
Blinky.axf:     file format elf32-littlearm


Disassembly of section .flash:

08000000 <Reset_Handler-0x40>:
 8000000:	20020000 	.word	0x20020000
 8000004:	08000041 	.word	0x08000041
 8000008:	080000a1 	.word	0x080000a1
 800000c:	080000a1 	.word	0x080000a1
 8000010:	080000a1 	.word	0x080000a1
 8000014:	080000a1 	.word	0x080000a1
 8000018:	080000a1 	.word	0x080000a1
	...
 800002c:	080000a1 	.word	0x080000a1
 8000030:	080000a1 	.word	0x080000a1
 8000034:	00000000 	.word	0x00000000
 8000038:	080000a1 	.word	0x080000a1
 800003c:	08000efd 	.word	0x08000efd

08000040 <Reset_Handler>:
	.thumb_func 			@; identify target type to linker
Reset_Handler:				@; @; start-from-reset code; initialize hardware and system data, launch main()
	@; copy .data section (initialized data) from flash to RAM (currently we must do this in each source file)
	@; (!!todo: figure out how we can get the compiler/asembler/linker to place constants in .rodata, etc)
copy_data:	
	ldr r1, DATA_BEG
 8000040:	4913      	ldr	r1, [pc, #76]	; (8000090 <DATA_BEG>)
	ldr r2, TEXT_END
 8000042:	4a12      	ldr	r2, [pc, #72]	; (800008c <TEXT_END>)
	ldr r3, DATA_END
 8000044:	4b13      	ldr	r3, [pc, #76]	; (8000094 <DATA_END>)
	subs r3, r3, r1			@; length of initialized data
 8000046:	1a5b      	subs	r3, r3, r1
	beq zero_bss			@; skip if none
 8000048:	f000 8007 	beq.w	800005a <zero_bss>

0800004c <copy_data_loop>:
copy_data_loop: 
	ldrb r4,[r2], #1		@; read byte from flash
 800004c:	f812 4b01 	ldrb.w	r4, [r2], #1
	strb r4, [r1], #1  		@; store byte to RAM
 8000050:	f801 4b01 	strb.w	r4, [r1], #1
	subs r3, r3, #1  		@; decrement counter
 8000054:	3b01      	subs	r3, #1
	bgt copy_data_loop		@; repeat until done
 8000056:	f73f aff9 	bgt.w	800004c <copy_data_loop>

0800005a <zero_bss>:

	@; zero out .bss section (uninitialized data) (currently we must do this in each source file)
	@; (!!todo: figure out how to get the linker to give us the extents of the merged .bss sections)
zero_bss: 	
	ldr r1, BSS_BEG
 800005a:	490f      	ldr	r1, [pc, #60]	; (8000098 <BSS_BEG>)
	ldr r3, BSS_END
 800005c:	4b0f      	ldr	r3, [pc, #60]	; (800009c <BSS_END>)
	subs r3, r3, r1			@; Length of uninitialized data
 800005e:	1a5b      	subs	r3, r3, r1
	beq initPLL				@; Skip if none
 8000060:	f000 8007 	beq.w	8000072 <initPLL>
	mov r2, #0				@; value to initialize .bss with
 8000064:	f04f 0200 	mov.w	r2, #0

08000068 <zero_bss_loop>:
zero_bss_loop: 	
	strb r2, [r1],#1		@; Store zero
 8000068:	f801 2b01 	strb.w	r2, [r1], #1
	subs r3, r3, #1			@; Decrement counter
 800006c:	3b01      	subs	r3, #1
	bgt zero_bss_loop		@; Repeat until done
 800006e:	f73f affb 	bgt.w	8000068 <zero_bss_loop>

08000072 <initPLL>:
	@; necessary hardware stuff (todo: crib from disassembly of Keil initPLL.c)
	initPLL:	@; !!todo -- fix this!				
				@; put code here to set up PLL 
	
	
	bl CortexM4asmOps_init	@; do some asm and C variable inits 'by hand'	
 8000072:	f000 f81e 	bl	80000b2 <CortexM4asmOps_init>
	bl asmSTR_examples		@; fill this function in for homework
 8000076:	f000 f833 	bl	80000e0 <asmSTR_examples>
	bl asmLDR_examples		@; fill this function in for homework	
 800007a:	f000 f830 	bl	80000de <asmLDR_examples>

0800007e <call_main>:

	@;here with everything set up and ready to go
	
	@exit to main (wont return)
call_main:	
	mov	r0, #0				@; argc=0
 800007e:	f04f 0000 	mov.w	r0, #0
	mov r1, #0				@; argv=NULL
 8000082:	f04f 0100 	mov.w	r1, #0
	bl	main 				@; gone
 8000086:	f002 ff59 	bl	8002f3c <main>
	b .						@; trap if return
 800008a:	e7fe      	b.n	800008a <call_main+0xc>

0800008c <TEXT_END>:
 800008c:	08003058 	.word	0x08003058

08000090 <DATA_BEG>:
 8000090:	20000000 	.word	0x20000000

08000094 <DATA_END>:
 8000094:	20000038 	.word	0x20000038

08000098 <BSS_BEG>:
 8000098:	20000038 	.word	0x20000038

0800009c <BSS_END>:
 800009c:	200001cc 	.word	0x200001cc

080000a0 <BusFault_Handler>:
DebugMon_Handler:
	.thumb_func
PendSV_Handler:
@;	.thumb_func
@;SysTick_Handler:
	bx  r14	 /* put a breakpoint here when we're debugging so we can trap here but then return to interrupted code */
 80000a0:	4770      	bx	lr
	...

080000a4 <testmacro>:
	.text						@;start the code section

	.global testmacro
	.thumb_func
testmacro:
	bitbandload r0 0x00010000 21
 80000a4:	48a7      	ldr	r0, [pc, #668]	; (8000344 <ROMdata+0x100>)
 80000a6:	e7fd      	b.n	80000a4 <testmacro>
	bitbandload r1 0x00010000 22
 80000a8:	49a7      	ldr	r1, [pc, #668]	; (8000348 <ROMdata+0x104>)
 80000aa:	e7fd      	b.n	80000a8 <testmacro+0x4>
	bitbandload r2 0x00010000 23	
 80000ac:	4aa7      	ldr	r2, [pc, #668]	; (800034c <ROMdata+0x108>)
 80000ae:	e7fd      	b.n	80000ac <testmacro+0x8>
	bx lr
 80000b0:	4770      	bx	lr

080000b2 <CortexM4asmOps_init>:
	
	.global CortexM4asmOps_init @; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
CortexM4asmOps_init: @; initialize variables defined in this sourcefile
	@; initialize globals in .data
	ldr r0,=0xFFFFFFFF			@; initialize 'Dint'
 80000b2:	48a7      	ldr	r0, [pc, #668]	; (8000350 <ROMdata+0x10c>)
	ldr r1,=Dint
 80000b4:	49a7      	ldr	r1, [pc, #668]	; (8000354 <ROMdata+0x110>)
	str r0,[r1]
 80000b6:	6008      	str	r0, [r1, #0]
	movw r0,#0xABCD				@;  initialize 'Dshort'
 80000b8:	f64a 30cd 	movw	r0, #43981	; 0xabcd
	ldr r1,=Dshort
 80000bc:	49a6      	ldr	r1, [pc, #664]	; (8000358 <ROMdata+0x114>)
	strh r0,[r1]
 80000be:	8008      	strh	r0, [r1, #0]
	mov r0,#0x55				@;  initialize 'Dchar'
 80000c0:	f04f 0055 	mov.w	r0, #85	; 0x55
	ldr r1,=Dchar
 80000c4:	49a5      	ldr	r1, [pc, #660]	; (800035c <ROMdata+0x118>)
	strb r0,[r1]
 80000c6:	7008      	strb	r0, [r1, #0]
	@; initialize .bss
	ldr r1,=local_bss_begin		
 80000c8:	49a5      	ldr	r1, [pc, #660]	; (8000360 <ROMdata+0x11c>)
	ldr r3,=local_bss_end
 80000ca:	4ba6      	ldr	r3, [pc, #664]	; (8000364 <ROMdata+0x120>)
	subs r3, r3, r1			@; length of uninitialized local .bss data section
 80000cc:	1a5b      	subs	r3, r3, r1
	beq 2f					@; Skip if none
 80000ce:	d005      	beq.n	80000dc <CortexM4asmOps_init+0x2a>
	mov r2, #0				@; value to initialize .bss with
 80000d0:	f04f 0200 	mov.w	r2, #0
1: 	@;!!local label which I can 'b 1b' branch backward to. Oooo, delicious. 
	strb r2, [r1],#1		@; Store zero
 80000d4:	f801 2b01 	strb.w	r2, [r1], #1
	subs r3, r3, #1			@; Decrement counter
 80000d8:	3b01      	subs	r3, #1
	bgt 1b					@; Repeat until done
 80000da:	dcfb      	bgt.n	80000d4 <CortexM4asmOps_init+0x22>
2:  @;!!local label which I can 'b 1f' branch forward to. 
	BX LR
 80000dc:	4770      	bx	lr

080000de <asmLDR_examples>:
	.thumb_func				@;specify that the function (defined below) uses thumb opcodes
asmLDR_examples:			@;examples using different LDR addressing and decoration 

	@;your code goes here

	bx lr					@; return to the caller
 80000de:	4770      	bx	lr

080000e0 <asmSTR_examples>:
	.thumb_func				@;specify that the function (defined below) uses thumb opcodes
asmSTR_examples:			@;examples using different LDR addressing and decoration 

	@;your code goes here

	bx lr					@; return to the caller
 80000e0:	4770      	bx	lr

080000e2 <CortexM4asmOps_test1>:
	.global CortexM4asmOps_test1 	@; make this function visible everywhere
	.thumb_func						@; make sure it starts in thumb mode
CortexM4asmOps_test1: 	@; asm function which decrements Cint by 2, increments Gint by 2, and shifts Dint left by 2	
	@;subtract 2 from Cint
	.extern Cint		@; tell linker where to look for Cint
	ldr r0,=Cint		@; point to Cint		
 80000e2:	48a1      	ldr	r0, [pc, #644]	; (8000368 <ROMdata+0x124>)
	ldr r1,[r0]			@; and get its current value
 80000e4:	6801      	ldr	r1, [r0, #0]
	sub r1,r1,#2		@;	and subtract 2
 80000e6:	f1a1 0102 	sub.w	r1, r1, #2
	str r1,[r0]			@;    then put it back
 80000ea:	6001      	str	r1, [r0, #0]

	@;add 2 to Gint
	.extern Gint		@; tell linker where to look for Gint
	ldr r0,=Gint		@; point to Gint		
 80000ec:	489f      	ldr	r0, [pc, #636]	; (800036c <ROMdata+0x128>)
	ldr r1,[r0]			@; and get its current value
 80000ee:	6801      	ldr	r1, [r0, #0]
	add r1,r1,#2		@;	and add 2
 80000f0:	f101 0102 	add.w	r1, r1, #2
	str r1,[r0]			@;    then put it back
 80000f4:	6001      	str	r1, [r0, #0]

	@;shift Dint left
	.extern Dint		@; tell linker where to look for Dint
	ldr r0,=Dint		@; point to Dint		
 80000f6:	4897      	ldr	r0, [pc, #604]	; (8000354 <ROMdata+0x110>)
	ldr r1,[r0]			@; and get its current value shifted left by 2
 80000f8:	6801      	ldr	r1, [r0, #0]
	lsr r1,r1,#1		@;  shift it left 1 bits
 80000fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
	str r1,[r0]			@;    then put it back
 80000fe:	6001      	str	r1, [r0, #0]
	
	bx lr				@;return to the caller
 8000100:	4770      	bx	lr

08000102 <MyasmDelay>:
	

	.global MyasmDelay 			@; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
MyasmDelay:						@; short software delay
	MOVW    R3, #0x0F88		    @; r3=0x00000F88
 8000102:	f640 7388 	movw	r3, #3976	; 0xf88
	MOVT    R3, #0x0000			@; ..
 8000106:	f2c0 0300 	movt	r3, #0
	MUL 	R3, R0;
 800010a:	fb00 f303 	mul.w	r3, r0, r3

0800010e <delay_loop>:
delay_loop:						@; repeat here
	CBZ     R3, delay_exit		@; r3 == 0?
 800010e:	b11b      	cbz	r3, 8000118 <delay_exit>
	SUB     R3, R3, #1			@; 	no --
 8000110:	f1a3 0301 	sub.w	r3, r3, #1
	B       delay_loop			@;	  continue 
 8000114:	f7ff bffb 	b.w	800010e <delay_loop>

08000118 <delay_exit>:
delay_exit:						@;  yes --
	BX      LR					@;    return to caller
 8000118:	4770      	bx	lr

0800011a <asmLED_ON>:

	.global asmLED_ON 			@; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
asmLED_ON: 						@; turn on LED
	MOVW 	r1, #0x1000			@; r1=UL1<<12, UL1=000....001
 800011a:	f241 0100 	movw	r1, #4096	; 0x1000
	MOVT 	r1, #0x0000	
 800011e:	f2c0 0100 	movt	r1, #0
	LSL		r1, r1, r0			@; r1<<r0
 8000122:	fa01 f100 	lsl.w	r1, r1, r0
	MOVW	r2, #0x0C18			@; r2=0x40020C18
 8000126:	f640 4218 	movw	r2, #3096	; 0xc18
	MOVT 	r2, #0x4002			
 800012a:	f2c4 0202 	movt	r2, #16386	; 0x4002
	STR		r1, [r2]
 800012e:	6011      	str	r1, [r2, #0]
	BX LR
 8000130:	4770      	bx	lr

08000132 <asmLED_OFF>:
	
	.global asmLED_OFF 			@; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
asmLED_OFF: 					@; turn off LED
	MOVW 	r1, #0x1000			@; r1=UL1<<12, UL1=000....001
 8000132:	f241 0100 	movw	r1, #4096	; 0x1000
	MOVT 	r1, #0x0000	
 8000136:	f2c0 0100 	movt	r1, #0
	LSL		r1, r1, r0			@; r1<<r0
 800013a:	fa01 f100 	lsl.w	r1, r1, r0
	MOVW	r2, #0x0C1A			@; r2=0x40020C1A
 800013e:	f640 421a 	movw	r2, #3098	; 0xc1a
	MOVT 	r2, #0x4002			
 8000142:	f2c4 0202 	movt	r2, #16386	; 0x4002
	STR		r1, [r2]
 8000146:	6011      	str	r1, [r2, #0]
	BX LR
 8000148:	4770      	bx	lr

0800014a <sub_uchar_from_quad_asm>:
	.global sub_uchar_from_quad_asm
	.thumb_func
sub_uchar_from_quad_asm:

@; load registers
	ldr 	r3, [r1,#0]
 800014a:	680b      	ldr	r3, [r1, #0]
	ldr 	r4, [r1,#4]
 800014c:	684c      	ldr	r4, [r1, #4]
	ldr 	r5, [r1,#8]
 800014e:	688d      	ldr	r5, [r1, #8]
	ldr 	r6, [r1,#12]
 8000150:	68ce      	ldr	r6, [r1, #12]
	
@; store initial sign bit
	mov r8, r3
 8000152:	4698      	mov	r8, r3
	lsr r8, #31
 8000154:	ea4f 78d8 	mov.w	r8, r8, lsr #31
	
@; subtract and propogate carry
	subs 	r6, r2
 8000158:	1ab6      	subs	r6, r6, r2
	sbcs 	r5, #0
 800015a:	f175 0500 	sbcs.w	r5, r5, #0
	sbcs 	r4, #0
 800015e:	f174 0400 	sbcs.w	r4, r4, #0
	sbc 	r3, #0
 8000162:	f163 0300 	sbc.w	r3, r3, #0

@; check if negative overflow occured
	mov 	r9, r3
 8000166:	4699      	mov	r9, r3
	lsr 	r9, #31
 8000168:	ea4f 79d9 	mov.w	r9, r9, lsr #31
	cmp 	r9, r8
 800016c:	45c1      	cmp	r9, r8
	blt 	overflow_case
 800016e:	f2c0 8002 	blt.w	8000176 <overflow_case>
	b 		store_values
 8000172:	f000 b805 	b.w	8000180 <store_values>

08000176 <overflow_case>:
	
overflow_case:
@; return -1 if overflow
	movw	r0, 0xfffe
 8000176:	f64f 70fe 	movw	r0, #65534	; 0xfffe
	movt	r0, 0xffff
 800017a:	f6cf 70ff 	movt	r0, #65535	; 0xffff
@; return
	bx lr
 800017e:	4770      	bx	lr

08000180 <store_values>:

store_values:
@; store values to RAM destination 
	str		r3, [r0, #0]
 8000180:	6003      	str	r3, [r0, #0]
	str		r4, [r0, #4]
 8000182:	6044      	str	r4, [r0, #4]
	str		r5, [r0, #8]
 8000184:	6085      	str	r5, [r0, #8]
	str		r6, [r0, #12]
 8000186:	60c6      	str	r6, [r0, #12]
@; return
	bx		lr
 8000188:	4770      	bx	lr

0800018a <test_update_mask32>:


	.global test_update_mask32
	.thumb_func
test_update_mask32:
	ldr r0, =mask32			@; load mask address
 800018a:	4879      	ldr	r0, [pc, #484]	; (8000370 <ROMdata+0x12c>)
	movw r1, #0x0005		@; set value to be or'd with existing mask
 800018c:	f240 0105 	movw	r1, #5
	movt r1, #0x0000
 8000190:	f2c0 0100 	movt	r1, #0
	update_mask32 r0 r1	
 8000194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000198:	466f      	mov	r7, sp
 800019a:	6802      	ldr	r2, [r0, #0]
 800019c:	ea42 0201 	orr.w	r2, r2, r1
 80001a0:	6002      	str	r2, [r0, #0]
 80001a2:	46bd      	mov	sp, r7
 80001a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ldr r3, [r0]			@; check to see if mask got updated correctly
 80001a8:	6803      	ldr	r3, [r0, #0]
	bx lr
 80001aa:	4770      	bx	lr

080001ac <test_op>:

	.global test_op
	.thumb_func
test_op:
	ldr r0, =mask32 @; address of label goes into r0
 80001ac:	4870      	ldr	r0, [pc, #448]	; (8000370 <ROMdata+0x12c>)
	ldr r1, [r0]
 80001ae:	6801      	ldr	r1, [r0, #0]
	bx lr
 80001b0:	4770      	bx	lr

080001b2 <atoi>:
	
	.global atoi
	.thumb_func
atoi:
	movw r4, #0		@; pointer offset
 80001b2:	f240 0400 	movw	r4, #0
	movt r4, #0
 80001b6:	f2c0 0400 	movt	r4, #0
	movw r10, #10 	@; r10 = const 10
 80001ba:	f240 0a0a 	movw	sl, #10
	movt r10, #0
 80001be:	f2c0 0a00 	movt	sl, #0
	movw r9, #1 	@; place holder multiplier
 80001c2:	f240 0901 	movw	r9, #1
	movt r9, #0
 80001c6:	f2c0 0900 	movt	r9, #0
	movw r11, #0 	@; accumulator
 80001ca:	f240 0b00 	movw	fp, #0
	movt r11, #0
 80001ce:	f2c0 0b00 	movt	fp, #0
	movw r7, #0		@; negative flag
 80001d2:	f240 0700 	movw	r7, #0
	movt r7, #0		
 80001d6:	f2c0 0700 	movt	r7, #0

080001da <check_negative>:

check_negative:
	ldrb r5, [r0,r4] 		@; load in first byte
 80001da:	5d05      	ldrb	r5, [r0, r4]
	cmp r5, #0x2D
 80001dc:	2d2d      	cmp	r5, #45	; 0x2d
	itt eq
 80001de:	bf04      	itt	eq
	addeq r7, #1			@; set negative flag
 80001e0:	3701      	addeq	r7, #1
	addeq r0, #1			@; increment pointer start by 1 byte
 80001e2:	3001      	addeq	r0, #1

080001e4 <str_length>:
	
str_length:
	ldrb r5, [r0,r4] 		@; load in next byte
 80001e4:	5d05      	ldrb	r5, [r0, r4]
	add r4,	#1				@; increment pointer offset by 1 byte
 80001e6:	f104 0401 	add.w	r4, r4, #1
	cmp r5, #0
 80001ea:	2d00      	cmp	r5, #0
	bne	str_length
 80001ec:	f47f affa 	bne.w	80001e4 <str_length>
	sub r4, #2
 80001f0:	f1a4 0402 	sub.w	r4, r4, #2

080001f4 <update_accumulator>:
	
update_accumulator:	
	ldrb r5, [r0,r4] 		@; load in next byte
 80001f4:	5d05      	ldrb	r5, [r0, r4]
	sub r5, #0x30	 		@; convert ascii to decimal digit
 80001f6:	f1a5 0530 	sub.w	r5, r5, #48	; 0x30
	mla r11, r5, r9, r11	@; acc += decimal digit * place holder multiplier
 80001fa:	fb05 bb09 	mla	fp, r5, r9, fp
	
	mul r9, r10				@; place holder multiplier *= 10
 80001fe:	fb0a f909 	mul.w	r9, sl, r9
	sub r4, #1				@; decrement pointer offsey by 1 byte
 8000202:	f1a4 0401 	sub.w	r4, r4, #1
	
	cmp r4, #0
 8000206:	2c00      	cmp	r4, #0
	bge update_accumulator
 8000208:	f6bf aff4 	bge.w	80001f4 <update_accumulator>

0800020c <update_sign>:

update_sign:
	cmp r7, #1
 800020c:	2f01      	cmp	r7, #1
	it eq
 800020e:	bf08      	it	eq
	rsbeq r11, #0 
 8000210:	f1cb 0b00 	rsbeq	fp, fp, #0
	
bx lr
 8000214:	4770      	bx	lr

08000216 <doJump>:


	.global doJump
	.thumb_func
doJump:	@;jump to address stored in table
	ldr R1,=dothings
 8000216:	4957      	ldr	r1, [pc, #348]	; (8000374 <ROMdata+0x130>)
	lsl R0,R0,#2
 8000218:	ea4f 0080 	mov.w	r0, r0, lsl #2
	add R0,R0,R1
 800021c:	4408      	add	r0, r1
	orr R0,R0,#1
 800021e:	f040 0001 	orr.w	r0, r0, #1
	bx  R0
 8000222:	4700      	bx	r0

08000224 <do0>:
 8000224:	08000241 	.word	0x08000241

08000228 <do1>:
 8000228:	0800023d 	.word	0x0800023d

0800022c <do2>:
 800022c:	08000239 	.word	0x08000239

08000230 <do3>:
 8000230:	08000235 	.word	0x08000235

08000234 <fn3>:
do2:	.word fn2
do3:	.word fn3

	.thumb_func
fn3: 
	nop
 8000234:	bf00      	nop
	bx LR
 8000236:	4770      	bx	lr

08000238 <fn2>:
	.thumb_func
fn2: 
	nop
 8000238:	bf00      	nop
	bx LR
 800023a:	4770      	bx	lr

0800023c <fn1>:
	.thumb_func
fn1: 
	nop
 800023c:	bf00      	nop
	bx LR
 800023e:	4770      	bx	lr

08000240 <fn0>:
	.thumb_func
fn0:
	nop
 8000240:	bf00      	nop
	bx LR
 8000242:	4770      	bx	lr

08000244 <ROMdata>:
 8000244:	03020100 	.word	0x03020100
 8000248:	07060504 	.word	0x07060504
 800024c:	0b0a0908 	.word	0x0b0a0908
 8000250:	0f0e0d0c 	.word	0x0f0e0d0c
 8000254:	13121110 	.word	0x13121110
 8000258:	17161514 	.word	0x17161514
 800025c:	1b1a1918 	.word	0x1b1a1918
 8000260:	1f1e1d1c 	.word	0x1f1e1d1c
 8000264:	23222120 	.word	0x23222120
 8000268:	27262524 	.word	0x27262524
 800026c:	2b2a2928 	.word	0x2b2a2928
 8000270:	2f2e2d2c 	.word	0x2f2e2d2c
 8000274:	33323130 	.word	0x33323130
 8000278:	37363534 	.word	0x37363534
 800027c:	3b3a3938 	.word	0x3b3a3938
 8000280:	3f3e3d3c 	.word	0x3f3e3d3c
 8000284:	43424140 	.word	0x43424140
 8000288:	47464544 	.word	0x47464544
 800028c:	4b4a4948 	.word	0x4b4a4948
 8000290:	4f4e4d4c 	.word	0x4f4e4d4c
 8000294:	53525150 	.word	0x53525150
 8000298:	57565554 	.word	0x57565554
 800029c:	5b5a5958 	.word	0x5b5a5958
 80002a0:	5f5e5d5c 	.word	0x5f5e5d5c
 80002a4:	63626160 	.word	0x63626160
 80002a8:	67666564 	.word	0x67666564
 80002ac:	6b6a6968 	.word	0x6b6a6968
 80002b0:	6f6e6d6c 	.word	0x6f6e6d6c
 80002b4:	73727170 	.word	0x73727170
 80002b8:	77767574 	.word	0x77767574
 80002bc:	7b7a7978 	.word	0x7b7a7978
 80002c0:	7f7e7d7c 	.word	0x7f7e7d7c
 80002c4:	83828180 	.word	0x83828180
 80002c8:	87868584 	.word	0x87868584
 80002cc:	8b8a8988 	.word	0x8b8a8988
 80002d0:	8f8e8d8c 	.word	0x8f8e8d8c
 80002d4:	93929190 	.word	0x93929190
 80002d8:	97969594 	.word	0x97969594
 80002dc:	9b9a9998 	.word	0x9b9a9998
 80002e0:	9f9e9d9c 	.word	0x9f9e9d9c
 80002e4:	a3a2a1a0 	.word	0xa3a2a1a0
 80002e8:	a7a6a5a4 	.word	0xa7a6a5a4
 80002ec:	abaaa9a8 	.word	0xabaaa9a8
 80002f0:	afaeadac 	.word	0xafaeadac
 80002f4:	b3b2b1b0 	.word	0xb3b2b1b0
 80002f8:	b7b6b5b4 	.word	0xb7b6b5b4
 80002fc:	bbbab9b8 	.word	0xbbbab9b8
 8000300:	bfbebdbc 	.word	0xbfbebdbc
 8000304:	c3c2c1c0 	.word	0xc3c2c1c0
 8000308:	c7c6c5c4 	.word	0xc7c6c5c4
 800030c:	cbcac9c8 	.word	0xcbcac9c8
 8000310:	cfcecdcc 	.word	0xcfcecdcc
 8000314:	d3d2d1d0 	.word	0xd3d2d1d0
 8000318:	d7d6d5d4 	.word	0xd7d6d5d4
 800031c:	dbdad9d8 	.word	0xdbdad9d8
 8000320:	dfdedddc 	.word	0xdfdedddc
 8000324:	e3e2e1e0 	.word	0xe3e2e1e0
 8000328:	e7e6e5e4 	.word	0xe7e6e5e4
 800032c:	ebeae9e8 	.word	0xebeae9e8
 8000330:	efeeedec 	.word	0xefeeedec
 8000334:	f3f2f1f0 	.word	0xf3f2f1f0
 8000338:	f7f6f5f4 	.word	0xf7f6f5f4
 800033c:	fbfaf9f8 	.word	0xfbfaf9f8
 8000340:	fffefdfc 	.word	0xfffefdfc
	.text						@;start the code section

	.global testmacro
	.thumb_func
testmacro:
	bitbandload r0 0x00010000 21
 8000344:	02200054 	.word	0x02200054
	bitbandload r1 0x00010000 22
 8000348:	02200058 	.word	0x02200058
	bitbandload r2 0x00010000 23	
 800034c:	0220005c 	.word	0x0220005c
	
	.global CortexM4asmOps_init @; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
CortexM4asmOps_init: @; initialize variables defined in this sourcefile
	@; initialize globals in .data
	ldr r0,=0xFFFFFFFF			@; initialize 'Dint'
 8000350:	ffffffff 	.word	0xffffffff
	ldr r1,=Dint
 8000354:	20000000 	.word	0x20000000
	str r0,[r1]
	movw r0,#0xABCD				@;  initialize 'Dshort'
	ldr r1,=Dshort
 8000358:	20000004 	.word	0x20000004
	strh r0,[r1]
	mov r0,#0x55				@;  initialize 'Dchar'
	ldr r1,=Dchar
 800035c:	20000006 	.word	0x20000006
	strb r0,[r1]
	@; initialize .bss
	ldr r1,=local_bss_begin		
 8000360:	20000040 	.word	0x20000040
	ldr r3,=local_bss_end
 8000364:	20000040 	.word	0x20000040
	.global CortexM4asmOps_test1 	@; make this function visible everywhere
	.thumb_func						@; make sure it starts in thumb mode
CortexM4asmOps_test1: 	@; asm function which decrements Cint by 2, increments Gint by 2, and shifts Dint left by 2	
	@;subtract 2 from Cint
	.extern Cint		@; tell linker where to look for Cint
	ldr r0,=Cint		@; point to Cint		
 8000368:	200002e4 	.word	0x200002e4
	sub r1,r1,#2		@;	and subtract 2
	str r1,[r0]			@;    then put it back

	@;add 2 to Gint
	.extern Gint		@; tell linker where to look for Gint
	ldr r0,=Gint		@; point to Gint		
 800036c:	200001d4 	.word	0x200001d4


	.global test_update_mask32
	.thumb_func
test_update_mask32:
	ldr r0, =mask32			@; load mask address
 8000370:	20000007 	.word	0x20000007


	.global doJump
	.thumb_func
doJump:	@;jump to address stored in table
	ldr R1,=dothings
 8000374:	08000224 	.word	0x08000224

08000378 <switch_init>:
		SW_7-8 (CA_B):		PB1
		SW_9-10 (CA_G): 	PC4
		SW_11-12 (CA_A):	PC5
		SW_13 (CA_C):			PA1
 *----------------------------------------------------------------------------*/
void switch_init() {
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	//Enable GPIO Clocks
	RCC->AHB1ENR  |= ((1UL <<  0));         /* Enable GPIOA clock                */
 800037c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000380:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000384:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000388:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800038c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800038e:	f042 0201 	orr.w	r2, r2, #1
 8000392:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  1));         /* Enable GPIOB clock                */
 8000394:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800039c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80003a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80003a6:	f042 0202 	orr.w	r2, r2, #2
 80003aa:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  2));         /* Enable GPIOC clock                */
 80003ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80003b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80003be:	f042 0204 	orr.w	r2, r2, #4
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
	
	//Initialize Port A: 1 (Switch Cathode Latch)
	GPIOA->MODER    &= ~((3UL << 2*1));   /* PA.1 is output               */
 80003c4:	f04f 0300 	mov.w	r3, #0
 80003c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003cc:	f04f 0200 	mov.w	r2, #0
 80003d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003d4:	6812      	ldr	r2, [r2, #0]
 80003d6:	f022 020c 	bic.w	r2, r2, #12
 80003da:	601a      	str	r2, [r3, #0]
  GPIOA->MODER    |=  ((1UL << 2*1)); 
 80003dc:	f04f 0300 	mov.w	r3, #0
 80003e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003e4:	f04f 0200 	mov.w	r2, #0
 80003e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	f042 0204 	orr.w	r2, r2, #4
 80003f2:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER   &= ~((1UL <<   1));   /* PA.1 is output Push-Pull     */
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000404:	6852      	ldr	r2, [r2, #4]
 8000406:	f022 0202 	bic.w	r2, r2, #2
 800040a:	605a      	str	r2, [r3, #4]
  GPIOA->OSPEEDR  &= ~((3UL << 2*1));   /* PA.1 is 50MHz Fast Speed     */
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000414:	f04f 0200 	mov.w	r2, #0
 8000418:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800041c:	6892      	ldr	r2, [r2, #8]
 800041e:	f022 020c 	bic.w	r2, r2, #12
 8000422:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR  |=  ((2UL << 2*1)); 
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800042c:	f04f 0200 	mov.w	r2, #0
 8000430:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000434:	6892      	ldr	r2, [r2, #8]
 8000436:	f042 0208 	orr.w	r2, r2, #8
 800043a:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR    &= ~((3UL << 2*1));   /* PA.1 is Pull up              */
 800043c:	f04f 0300 	mov.w	r3, #0
 8000440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000444:	f04f 0200 	mov.w	r2, #0
 8000448:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800044c:	68d2      	ldr	r2, [r2, #12]
 800044e:	f022 020c 	bic.w	r2, r2, #12
 8000452:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR    |=  ((1UL << 2*1));  
 8000454:	f04f 0300 	mov.w	r3, #0
 8000458:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800045c:	f04f 0200 	mov.w	r2, #0
 8000460:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000464:	68d2      	ldr	r2, [r2, #12]
 8000466:	f042 0204 	orr.w	r2, r2, #4
 800046a:	60da      	str	r2, [r3, #12]
	
	//Initialize Port A: 15 (Odd Input)
	GPIOA->MODER    &= ~((3UL << 2*15));   /* PA.15 is input               */
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000474:	f04f 0200 	mov.w	r2, #0
 8000478:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8000482:	601a      	str	r2, [r3, #0]
  GPIOA->OSPEEDR  &= ~((3UL << 2*15));   /* PA.15 is 50MHz Fast Speed     */
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800048c:	f04f 0200 	mov.w	r2, #0
 8000490:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000494:	6892      	ldr	r2, [r2, #8]
 8000496:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800049a:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR  |=  ((2UL << 2*15)); 
 800049c:	f04f 0300 	mov.w	r3, #0
 80004a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004a4:	f04f 0200 	mov.w	r2, #0
 80004a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004ac:	6892      	ldr	r2, [r2, #8]
 80004ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80004b2:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR    &= ~((3UL << 2*15));   /* PA.15 is Pull up              */
 80004b4:	f04f 0300 	mov.w	r3, #0
 80004b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004c4:	68d2      	ldr	r2, [r2, #12]
 80004c6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80004ca:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR    |=  ((1UL << 2*15));  
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004d4:	f04f 0200 	mov.w	r2, #0
 80004d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004dc:	68d2      	ldr	r2, [r2, #12]
 80004de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80004e2:	60da      	str	r2, [r3, #12]
	
	//Initialize Port B: 0,1,5,11 (Switch Cathode Latches)
  GPIOB->MODER    &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,5,11 is output               */
 80004e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004f4:	6819      	ldr	r1, [r3, #0]
 80004f6:	f24f 33f0 	movw	r3, #62448	; 0xf3f0
 80004fa:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 80004fe:	400b      	ands	r3, r1
 8000500:	6013      	str	r3, [r2, #0]
  GPIOB->MODER    |=  ((1UL << 2*0) | (1UL << 2*1) | (1UL << 2*5) | (1UL << 2*11)); 
 8000502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000506:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800050a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000512:	6819      	ldr	r1, [r3, #0]
 8000514:	f240 4305 	movw	r3, #1029	; 0x405
 8000518:	f2c0 0340 	movt	r3, #64	; 0x40
 800051c:	430b      	orrs	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER   &= ~((1UL <<   0) | (1UL <<   1) | (1UL <<   5) | (1UL <<   11));   /* PB.0,1,5,11 is output Push-Pull     */
 8000520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000524:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800052c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000530:	6852      	ldr	r2, [r2, #4]
 8000532:	f422 6202 	bic.w	r2, r2, #2080	; 0x820
 8000536:	f022 0203 	bic.w	r2, r2, #3
 800053a:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR  &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,5,11 is 50MHz Fast Speed     */
 800053c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000540:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000548:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800054c:	6899      	ldr	r1, [r3, #8]
 800054e:	f24f 33f0 	movw	r3, #62448	; 0xf3f0
 8000552:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000556:	400b      	ands	r3, r1
 8000558:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR  |=  ((2UL << 2*0) | (2UL << 2*1) | (2UL << 2*5) | (2UL << 2*11)); 
 800055a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800055e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800056a:	6899      	ldr	r1, [r3, #8]
 800056c:	f640 030a 	movw	r3, #2058	; 0x80a
 8000570:	f2c0 0380 	movt	r3, #128	; 0x80
 8000574:	430b      	orrs	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
  GPIOB->PUPDR    &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,5,11 is Pull up              */
 8000578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000588:	68d9      	ldr	r1, [r3, #12]
 800058a:	f24f 33f0 	movw	r3, #62448	; 0xf3f0
 800058e:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000592:	400b      	ands	r3, r1
 8000594:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR    |=  ((1UL << 2*0) | (1UL << 2*1) | (1UL << 2*5) | (1UL << 2*11)); 
 8000596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800059e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005a6:	68d9      	ldr	r1, [r3, #12]
 80005a8:	f240 4305 	movw	r3, #1029	; 0x405
 80005ac:	f2c0 0340 	movt	r3, #64	; 0x40
 80005b0:	430b      	orrs	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
											 						 
	//Initialize Port C: 4,5 (Switch Cathode Latches)
	GPIOC->MODER    &= ~((3UL << 2*4) | (3UL << 2*5));   /* PC.4,5 is output               */
 80005b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80005ca:	601a      	str	r2, [r3, #0]
  GPIOC->MODER    |=  ((1UL << 2*4) | (1UL << 2*5)); 
 80005cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80005e2:	601a      	str	r2, [r3, #0]
  GPIOC->OTYPER   &= ~((1UL <<   4) | (1UL <<   5));   /* PC.4,5 is output Push-Pull     */
 80005e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005f4:	6852      	ldr	r2, [r2, #4]
 80005f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80005fa:	605a      	str	r2, [r3, #4]
  GPIOC->OSPEEDR  &= ~((3UL << 2*4) | (3UL << 2*5));   /* PC.4,5 is 50MHz Fast Speed     */
 80005fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000608:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800060c:	6892      	ldr	r2, [r2, #8]
 800060e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000612:	609a      	str	r2, [r3, #8]
  GPIOC->OSPEEDR  |=  ((2UL << 2*4) | (2UL << 2*5)); 
 8000614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000618:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800061c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000620:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000624:	6892      	ldr	r2, [r2, #8]
 8000626:	f442 6220 	orr.w	r2, r2, #2560	; 0xa00
 800062a:	609a      	str	r2, [r3, #8]
  GPIOC->PUPDR    &= ~((3UL << 2*4) | (3UL << 2*5));   /* PC.4,5 is Pull up              */
 800062c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000630:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000638:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000642:	60da      	str	r2, [r3, #12]
  GPIOC->PUPDR    |=  ((1UL << 2*4) | (1UL << 2*5)); 
 8000644:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000648:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000650:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000654:	68d2      	ldr	r2, [r2, #12]
 8000656:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 800065a:	60da      	str	r2, [r3, #12]
	
	//Initialize Port C: 8 (Even Input)
	GPIOC->MODER    &= ~((3UL << 2*8));   /* PC.8 is input               */
 800065c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000660:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000668:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000672:	601a      	str	r2, [r3, #0]
  GPIOC->OSPEEDR  &= ~((3UL << 2*8));   /* PC.8 is 50MHz Fast Speed     */
 8000674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000678:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800067c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000680:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000684:	6892      	ldr	r2, [r2, #8]
 8000686:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800068a:	609a      	str	r2, [r3, #8]
  GPIOC->OSPEEDR  |=  ((2UL << 2*8)); 
 800068c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000690:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000698:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800069c:	6892      	ldr	r2, [r2, #8]
 800069e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006a2:	609a      	str	r2, [r3, #8]
  GPIOC->PUPDR    &= ~((3UL << 2*8));   /* PC.8 is Pull up              */
 80006a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006b4:	68d2      	ldr	r2, [r2, #12]
 80006b6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80006ba:	60da      	str	r2, [r3, #12]
  GPIOC->PUPDR    |=  ((1UL << 2*8)); 
 80006bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006cc:	68d2      	ldr	r2, [r2, #12]
 80006ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006d2:	60da      	str	r2, [r3, #12]
}
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SEG7_Init>:
/*----------------------------------------------------------------------------
  Initialize 7-Segments Display Pins
 *----------------------------------------------------------------------------*/
void SEG7_Init() {
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	RCC->AHB1ENR  |= ((1UL <<  0) );         /* Enable GPIOA clock                */
 80006e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80006f2:	f042 0201 	orr.w	r2, r2, #1
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  1) );         /* Enable GPIOB clock                */
 80006f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000700:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000704:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800070a:	f042 0202 	orr.w	r2, r2, #2
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  2) );         /* Enable GPIOC clock                */
 8000710:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000714:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000718:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800071c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000720:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000722:	f042 0204 	orr.w	r2, r2, #4
 8000726:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  3) );         /* Enable GPIOD clock                */
 8000728:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800072c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000730:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000734:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000738:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800073a:	f042 0208 	orr.w	r2, r2, #8
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
	
	//Initialize Cathode and Anode Pins
	//Initialize Port A: 1
	GPIOA->MODER    &= ~((3UL << 2*1));   /* PA.1 is output               */
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000748:	f04f 0200 	mov.w	r2, #0
 800074c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	f022 020c 	bic.w	r2, r2, #12
 8000756:	601a      	str	r2, [r3, #0]
  GPIOA->MODER    |=  ((1UL << 2*1)); 
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000760:	f04f 0200 	mov.w	r2, #0
 8000764:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	f042 0204 	orr.w	r2, r2, #4
 800076e:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER   &= ~((1UL <<   1));   /* PA.1 is output Push-Pull     */
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000780:	6852      	ldr	r2, [r2, #4]
 8000782:	f022 0202 	bic.w	r2, r2, #2
 8000786:	605a      	str	r2, [r3, #4]
  GPIOA->OSPEEDR  &= ~((3UL << 2*1));   /* PA.1 is 50MHz Fast Speed     */
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000790:	f04f 0200 	mov.w	r2, #0
 8000794:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000798:	6892      	ldr	r2, [r2, #8]
 800079a:	f022 020c 	bic.w	r2, r2, #12
 800079e:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR  |=  ((2UL << 2*1)); 
 80007a0:	f04f 0300 	mov.w	r3, #0
 80007a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007b0:	6892      	ldr	r2, [r2, #8]
 80007b2:	f042 0208 	orr.w	r2, r2, #8
 80007b6:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR    &= ~((3UL << 2*1));   /* PA.1 is Pull up              */
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007c8:	68d2      	ldr	r2, [r2, #12]
 80007ca:	f022 020c 	bic.w	r2, r2, #12
 80007ce:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR    |=  ((1UL << 2*1));  
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007e0:	68d2      	ldr	r2, [r2, #12]
 80007e2:	f042 0204 	orr.w	r2, r2, #4
 80007e6:	60da      	str	r2, [r3, #12]

	//Initialize Port B: 0,1,4,5,11
  GPIOB->MODER    &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,4,5,11 is output               */
 80007e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 80007fe:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000802:	400b      	ands	r3, r1
 8000804:	6013      	str	r3, [r2, #0]
  GPIOB->MODER    |=  ((1UL << 2*0) | (1UL << 2*1) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 8000806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	f240 5305 	movw	r3, #1285	; 0x505
 800081c:	f2c0 0340 	movt	r3, #64	; 0x40
 8000820:	430b      	orrs	r3, r1
 8000822:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER   &= ~((1UL <<   0) | (1UL <<   1) | (1UL <<   4) | (1UL <<   5) | (1UL <<   11));   /* PB.0,1,4,5,11 is output Push-Pull     */
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800082c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000830:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000834:	6852      	ldr	r2, [r2, #4]
 8000836:	f422 6203 	bic.w	r2, r2, #2096	; 0x830
 800083a:	f022 0203 	bic.w	r2, r2, #3
 800083e:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR  &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,4,5,11 is 50MHz Fast Speed     */
 8000840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000844:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000850:	6899      	ldr	r1, [r3, #8]
 8000852:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8000856:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 800085a:	400b      	ands	r3, r1
 800085c:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR  |=  ((2UL << 2*0) | (2UL << 2*1) | (2UL << 2*4) | (2UL << 2*5) | (2UL << 2*11)); 
 800085e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000862:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800086e:	6899      	ldr	r1, [r3, #8]
 8000870:	f640 230a 	movw	r3, #2570	; 0xa0a
 8000874:	f2c0 0380 	movt	r3, #128	; 0x80
 8000878:	430b      	orrs	r3, r1
 800087a:	6093      	str	r3, [r2, #8]
  GPIOB->PUPDR    &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,4,5,11 is Pull up              */
 800087c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000880:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800088c:	68d9      	ldr	r1, [r3, #12]
 800088e:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8000892:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000896:	400b      	ands	r3, r1
 8000898:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR    |=  ((1UL << 2*0) | (1UL << 2*1) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 800089a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008aa:	68d9      	ldr	r1, [r3, #12]
 80008ac:	f240 5305 	movw	r3, #1285	; 0x505
 80008b0:	f2c0 0340 	movt	r3, #64	; 0x40
 80008b4:	430b      	orrs	r3, r1
 80008b6:	60d3      	str	r3, [r2, #12]
											 						 
	//Initialize Port C: 1,2,4,5,11
	GPIOC->MODER    &= ~((3UL << 2*1) | (3UL << 2*2) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PC.1,2,4,5,11 is output               */
 80008b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c8:	6819      	ldr	r1, [r3, #0]
 80008ca:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 80008ce:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 80008d2:	400b      	ands	r3, r1
 80008d4:	6013      	str	r3, [r2, #0]
  GPIOC->MODER    |=  ((1UL << 2*1) | (1UL << 2*2) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 80008d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	f240 5314 	movw	r3, #1300	; 0x514
 80008ec:	f2c0 0340 	movt	r3, #64	; 0x40
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6013      	str	r3, [r2, #0]
  GPIOC->OTYPER   &= ~((1UL <<   1) | (1UL <<   2) | (1UL <<   4) | (1UL <<   5) | (1UL <<   11));   /* PC.1,2,4,5,11 is output Push-Pull     */
 80008f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000900:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000904:	6852      	ldr	r2, [r2, #4]
 8000906:	f422 6203 	bic.w	r2, r2, #2096	; 0x830
 800090a:	f022 0206 	bic.w	r2, r2, #6
 800090e:	605a      	str	r2, [r3, #4]
  GPIOC->OSPEEDR  &= ~((3UL << 2*1) | (3UL << 2*2) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PC.1,2,4,5,11 is 50MHz Fast Speed     */
 8000910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000914:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800091c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000920:	6899      	ldr	r1, [r3, #8]
 8000922:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 8000926:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 800092a:	400b      	ands	r3, r1
 800092c:	6093      	str	r3, [r2, #8]
  GPIOC->OSPEEDR  |=  ((2UL << 2*1) | (2UL << 2*2) | (2UL << 2*4) | (2UL << 2*5) | (2UL << 2*11)); 
 800092e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000932:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800093a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800093e:	6899      	ldr	r1, [r3, #8]
 8000940:	f640 2328 	movw	r3, #2600	; 0xa28
 8000944:	f2c0 0380 	movt	r3, #128	; 0x80
 8000948:	430b      	orrs	r3, r1
 800094a:	6093      	str	r3, [r2, #8]
  GPIOC->PUPDR    &= ~((3UL << 2*1) | (3UL << 2*2) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PC.1,2,4,5,11 is Pull up              */
 800094c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000950:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000958:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800095c:	68d9      	ldr	r1, [r3, #12]
 800095e:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 8000962:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000966:	400b      	ands	r3, r1
 8000968:	60d3      	str	r3, [r2, #12]
  GPIOC->PUPDR    |=  ((1UL << 2*1) | (1UL << 2*2) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 800096a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800096e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000976:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800097a:	68d9      	ldr	r1, [r3, #12]
 800097c:	f240 5314 	movw	r3, #1300	; 0x514
 8000980:	f2c0 0340 	movt	r3, #64	; 0x40
 8000984:	430b      	orrs	r3, r1
 8000986:	60d3      	str	r3, [r2, #12]
	
	//Initialize Port D: 2
	GPIOD->MODER    &= ~((3UL << 2*2));   /* PD.2 is output               */
 8000988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800098c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000990:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000994:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800099e:	601a      	str	r2, [r3, #0]
  GPIOD->MODER    |=  ((1UL << 2*2)); 
 80009a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009a8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	f042 0210 	orr.w	r2, r2, #16
 80009b6:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER   &= ~((1UL <<   2));   /* PD.2 is output Push-Pull     */
 80009b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009c0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009c8:	6852      	ldr	r2, [r2, #4]
 80009ca:	f022 0204 	bic.w	r2, r2, #4
 80009ce:	605a      	str	r2, [r3, #4]
  GPIOD->OSPEEDR  &= ~((3UL << 2*2));   /* PD.2 is 50MHz Fast Speed     */
 80009d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009d8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009e0:	6892      	ldr	r2, [r2, #8]
 80009e2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80009e6:	609a      	str	r2, [r3, #8]
  GPIOD->OSPEEDR  |=  ((2UL << 2*2)); 
 80009e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009f0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009f8:	6892      	ldr	r2, [r2, #8]
 80009fa:	f042 0220 	orr.w	r2, r2, #32
 80009fe:	609a      	str	r2, [r3, #8]
  GPIOD->PUPDR    &= ~((3UL << 2*2));   /* PD.2 is Pull up              */
 8000a00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a08:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a10:	68d2      	ldr	r2, [r2, #12]
 8000a12:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000a16:	60da      	str	r2, [r3, #12]
  GPIOD->PUPDR    |=  ((1UL << 2*2)); 
 8000a18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a20:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a28:	68d2      	ldr	r2, [r2, #12]
 8000a2a:	f042 0210 	orr.w	r2, r2, #16
 8000a2e:	60da      	str	r2, [r3, #12]
	
	
/* set anode and cathode clocks high (b/c clock on rising edge) */
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 8000a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a40:	8b12      	ldrh	r2, [r2, #24]
 8000a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a46:	b292      	uxth	r2, r2
 8000a48:	831a      	strh	r2, [r3, #24]
	GPIOD->BSRRL |= (1ul << 2);  //set CA_CLK (PD2)  high
 8000a4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a52:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a5a:	8b12      	ldrh	r2, [r2, #24]
 8000a5c:	f042 0204 	orr.w	r2, r2, #4
 8000a60:	b292      	uxth	r2, r2
 8000a62:	831a      	strh	r2, [r3, #24]
	
/* initialize seg7 to be disabled */
	//disable anode driver
	GPIOB->BSRRL |= (1ul << 4); //set AN_EN (PB4) high b/c active low
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a74:	8b12      	ldrh	r2, [r2, #24]
 8000a76:	f042 0210 	orr.w	r2, r2, #16
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	831a      	strh	r2, [r3, #24]

	// set anode lines high
	GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a8e:	8b12      	ldrh	r2, [r2, #24]
 8000a90:	f042 0204 	orr.w	r2, r2, #4
 8000a94:	b292      	uxth	r2, r2
 8000a96:	831a      	strh	r2, [r3, #24]
	GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aa8:	8b12      	ldrh	r2, [r2, #24]
 8000aaa:	f042 0202 	orr.w	r2, r2, #2
 8000aae:	b292      	uxth	r2, r2
 8000ab0:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8000ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ac2:	8b12      	ldrh	r2, [r2, #24]
 8000ac4:	f042 0210 	orr.w	r2, r2, #16
 8000ac8:	b292      	uxth	r2, r2
 8000aca:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000adc:	8b12      	ldrh	r2, [r2, #24]
 8000ade:	f042 0202 	orr.w	r2, r2, #2
 8000ae2:	b292      	uxth	r2, r2
 8000ae4:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8000ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000af6:	8b12      	ldrh	r2, [r2, #24]
 8000af8:	f042 0220 	orr.w	r2, r2, #32
 8000afc:	b292      	uxth	r2, r2
 8000afe:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b10:	8b12      	ldrh	r2, [r2, #24]
 8000b12:	f042 0201 	orr.w	r2, r2, #1
 8000b16:	b292      	uxth	r2, r2
 8000b18:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b2a:	8b12      	ldrh	r2, [r2, #24]
 8000b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b30:	b292      	uxth	r2, r2
 8000b32:	831a      	strh	r2, [r3, #24]
	
	// clock the anode driver
	GPIOC->BSRRH |= (1ul << 11); //set AN_CLK (PC11) low
 8000b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b44:	8b52      	ldrh	r2, [r2, #26]
 8000b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b4a:	b292      	uxth	r2, r2
 8000b4c:	835a      	strh	r2, [r3, #26]
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 8000b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b5e:	8b12      	ldrh	r2, [r2, #24]
 8000b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b64:	b292      	uxth	r2, r2
 8000b66:	831a      	strh	r2, [r3, #24]
	
	// enable anode driver
	GPIOB->BSRRH |= (1ul << 4); //set AN_EN (PB4) low b/c active low
 8000b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b78:	8b52      	ldrh	r2, [r2, #26]
 8000b7a:	f042 0210 	orr.w	r2, r2, #16
 8000b7e:	b292      	uxth	r2, r2
 8000b80:	835a      	strh	r2, [r3, #26]
	
}
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <LED_Init>:

/*----------------------------------------------------------------------------
  initialize LED Pins
 *----------------------------------------------------------------------------*/
void LED_Init (void) {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  RCC->AHB1ENR  |= ((1UL <<  3) );         /* Enable GPIOD clock                */
 8000b8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b9e:	f042 0208 	orr.w	r2, r2, #8
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30

  GPIOD->MODER    &= ~((3UL << 2*12) |
 8000ba4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bac:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000bb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000bba:	601a      	str	r2, [r3, #0]
                       (3UL << 2*13) |
                       (3UL << 2*14) |
                       (3UL << 2*15)  );   /* PD.12..15 is output               */
  GPIOD->MODER    |=  ((1UL << 2*12) |
 8000bbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bc4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000bc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8000bd2:	601a      	str	r2, [r3, #0]
                       (1UL << 2*13) | 
                       (1UL << 2*14) | 
                       (1UL << 2*15)  ); 
  GPIOD->OTYPER   &= ~((1UL <<   12) |
 8000bd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bdc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000be0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000be4:	6852      	ldr	r2, [r2, #4]
 8000be6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000bea:	605a      	str	r2, [r3, #4]
                       (1UL <<   13) |
                       (1UL <<   14) |
                       (1UL <<   15)  );   /* PD.12..15 is output Push-Pull     */
  GPIOD->OSPEEDR  &= ~((3UL << 2*12) |
 8000bec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bf4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000bf8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bfc:	6892      	ldr	r2, [r2, #8]
 8000bfe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000c02:	609a      	str	r2, [r3, #8]
                       (3UL << 2*13) |
                       (3UL << 2*14) |
                       (3UL << 2*15)  );   /* PD.12..15 is 50MHz Fast Speed     */
  GPIOD->OSPEEDR  |=  ((2UL << 2*12) |
 8000c04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c0c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000c10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c14:	6892      	ldr	r2, [r2, #8]
 8000c16:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
 8000c1a:	609a      	str	r2, [r3, #8]
                       (2UL << 2*13) | 
                       (2UL << 2*14) | 
                       (2UL << 2*15)  ); 
  GPIOD->PUPDR    &= ~((3UL << 2*12) |
 8000c1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c24:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c2c:	68d2      	ldr	r2, [r2, #12]
 8000c2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000c32:	60da      	str	r2, [r3, #12]
                       (3UL << 2*13) |
                       (3UL << 2*14) |
                       (3UL << 2*15)  );   /* PD.12..15 is Pull up              */
  GPIOD->PUPDR    |=  ((1UL << 2*12) |
 8000c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c44:	68d2      	ldr	r2, [r2, #12]
 8000c46:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8000c4a:	60da      	str	r2, [r3, #12]
                       (1UL << 2*13) | 
                       (1UL << 2*14) | 
                       (1UL << 2*15)  ); 
}
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <LED_On>:

/*----------------------------------------------------------------------------
  Function that turns on requested LED
 *----------------------------------------------------------------------------*/
void LED_On (unsigned int num) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  if (num < LED_NUM) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d80c      	bhi.n	8000c7c <LED_On+0x28>
    GPIOD->BSRRL = led_mask[num];
 8000c62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c6a:	f243 0248 	movw	r2, #12360	; 0x3048
 8000c6e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000c78:	b292      	uxth	r2, r2
 8000c7a:	831a      	strh	r2, [r3, #24]
  }
}
 8000c7c:	f107 070c 	add.w	r7, r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <LED_Off>:

/*----------------------------------------------------------------------------
  Function that turns off requested LED
 *----------------------------------------------------------------------------*/
void LED_Off (unsigned int num) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  if (num < LED_NUM) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d80c      	bhi.n	8000cb0 <LED_Off+0x28>
    GPIOD->BSRRH = led_mask[num];
 8000c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c9e:	f243 0248 	movw	r2, #12360	; 0x3048
 8000ca2:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000cac:	b292      	uxth	r2, r2
 8000cae:	835a      	strh	r2, [r3, #26]
  }
}
 8000cb0:	f107 070c 	add.w	r7, r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <LED_Out>:

/*----------------------------------------------------------------------------
  Function that outputs value to LEDs
 *----------------------------------------------------------------------------*/
void LED_Out(unsigned int value) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < LED_NUM; i++) {
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e016      	b.n	8000cfa <LED_Out+0x3e>
    if (value & (1<<i)) {
 8000ccc:	f04f 0201 	mov.w	r2, #1
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <LED_Out+0x2e>
      LED_On (i);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffb6 	bl	8000c54 <LED_On>
 8000ce8:	e003      	b.n	8000cf2 <LED_Out+0x36>
    } else {
      LED_Off(i);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffcb 	bl	8000c88 <LED_Off>
  Function that outputs value to LEDs
 *----------------------------------------------------------------------------*/
void LED_Out(unsigned int value) {
  int i;

  for (i = 0; i < LED_NUM; i++) {
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f103 0301 	add.w	r3, r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	dde5      	ble.n	8000ccc <LED_Out+0x10>
      LED_On (i);
    } else {
      LED_Off(i);
    }
  }
}
 8000d00:	f107 0710 	add.w	r7, r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SystemCoreClockUpdate>:
#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */

/*@} end of group CMSIS_SysTick */

void SystemCoreClockUpdate(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	f04f 0302 	mov.w	r3, #2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	f04f 0302 	mov.w	r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d00d      	beq.n	8000d5e <SystemCoreClockUpdate+0x56>
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d015      	beq.n	8000d72 <SystemCoreClockUpdate+0x6a>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d169      	bne.n	8000e1e <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d4a:	f240 23e0 	movw	r3, #736	; 0x2e0
 8000d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d52:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000d56:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000d5a:	601a      	str	r2, [r3, #0]
      break;
 8000d5c:	e069      	b.n	8000e32 <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d5e:	f240 23e0 	movw	r3, #736	; 0x2e0
 8000d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d66:	f647 0240 	movw	r2, #30784	; 0x7840
 8000d6a:	f2c0 127d 	movt	r2, #381	; 0x17d
 8000d6e:	601a      	str	r2, [r3, #0]
      break;
 8000d70:	e05f      	b.n	8000e32 <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d80:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000d84:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d94:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d014      	beq.n	8000dc6 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d9c:	f647 0340 	movw	r3, #30784	; 0x7840
 8000da0:	f2c0 137d 	movt	r3, #381	; 0x17d
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000daa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000db2:	6859      	ldr	r1, [r3, #4]
 8000db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000db8:	400b      	ands	r3, r1
 8000dba:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000dbe:	fb03 f302 	mul.w	r3, r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e013      	b.n	8000dee <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dc6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000dca:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ddc:	6859      	ldr	r1, [r3, #4]
 8000dde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000de2:	400b      	ands	r3, r1
 8000de4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000de8:	fb03 f302 	mul.w	r3, r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000dee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000df2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000e00:	f103 0301 	add.w	r3, r3, #1
 8000e04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e08:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e12:	f240 23e0 	movw	r3, #736	; 0x2e0
 8000e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e1a:	601a      	str	r2, [r3, #0]
      break;
 8000e1c:	e009      	b.n	8000e32 <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 8000e1e:	f240 23e0 	movw	r3, #736	; 0x2e0
 8000e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e26:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000e2a:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000e2e:	601a      	str	r2, [r3, #0]
      break;
 8000e30:	bf00      	nop
  }
}
 8000e32:	f107 071c 	add.w	r7, r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <NVIC_SetPriority>:
 

//__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
static inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	da10      	bge.n	8000e72 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000e50:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000e54:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	f002 020f 	and.w	r2, r2, #15
 8000e5e:	f1a2 0104 	sub.w	r1, r2, #4
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	185b      	adds	r3, r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
 8000e70:	e00d      	b.n	8000e8e <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000e72:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000e76:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e7a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	185b      	adds	r3, r3, r1
 8000e8a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e8e:	f107 070c 	add.w	r7, r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Config>:
 
 //__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) - change to gcc 'static inline' convention
static inline uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ea6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d902      	bls.n	8000eb4 <SysTick_Config+0x1c>
 8000eae:	f04f 0301 	mov.w	r3, #1
 8000eb2:	e01d      	b.n	8000ef0 <SysTick_Config+0x58>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000eb4:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000eb8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	f102 32ff 	add.w	r2, r2, #4294967295
 8000ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f04f 010f 	mov.w	r1, #15
 8000ecc:	f7ff ffb6 	bl	8000e3c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000ed0:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000ed4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000ee2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ee6:	f04f 0207 	mov.w	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000eec:	f04f 0300 	mov.w	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f107 0708 	add.w	r7, r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop

08000efc <SysTick_Handler>:

volatile uint32_t msTicks;                      /* counts 1ms timeTicks       */
/*----------------------------------------------------------------------------
  SysTick_Handler
 *----------------------------------------------------------------------------*/
void SysTick_Handler(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	//RUN EVERY 1 ms
  msTicks++; //need this for Delay()
 8000f00:	f240 23e8 	movw	r3, #744	; 0x2e8
 8000f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f103 0201 	add.w	r2, r3, #1
 8000f0e:	f240 23e8 	movw	r3, #744	; 0x2e8
 8000f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f16:	601a      	str	r2, [r3, #0]
	seg7_handler();
 8000f18:	f000 fd92 	bl	8001a40 <seg7_handler>
	
	//RUN EVERY 100 ms
	if (SAMPLE_COUNTER < 20) {
 8000f1c:	f240 1354 	movw	r3, #340	; 0x154
 8000f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b13      	cmp	r3, #19
 8000f28:	dc0c      	bgt.n	8000f44 <SysTick_Handler+0x48>
		SAMPLE_COUNTER++;
 8000f2a:	f240 1354 	movw	r3, #340	; 0x154
 8000f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f103 0201 	add.w	r2, r3, #1
 8000f38:	f240 1354 	movw	r3, #340	; 0x154
 8000f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e00e      	b.n	8000f62 <SysTick_Handler+0x66>
	}
	else {
		switch_cluster_handler();
 8000f44:	f000 fa98 	bl	8001478 <switch_cluster_handler>
		switch_queue_handler();
 8000f48:	f000 f8be 	bl	80010c8 <switch_queue_handler>
		switch_edge_handler();
 8000f4c:	f000 f80a 	bl	8000f64 <switch_edge_handler>
		mode_handler();
 8000f50:	f000 f902 	bl	8001158 <mode_handler>
		
		SAMPLE_COUNTER = 0;
 8000f54:	f240 1354 	movw	r3, #340	; 0x154
 8000f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
	}
}
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <switch_edge_handler>:

/*----------------------------------------------------------------------------
  switch_edge_handler function
 *----------------------------------------------------------------------------*/
switch_edge_handler() {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
	//Reset edges
	SW_POS_EDGE = 0x0;
 8000f6a:	f240 13b0 	movw	r3, #432	; 0x1b0
 8000f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	SW_NEG_EDGE = 0x0;
 8000f78:	f240 13b4 	movw	r3, #436	; 0x1b4
 8000f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
	
	int i;
	for (i=0; i<13; i++) {
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	e092      	b.n	80010b4 <switch_edge_handler+0x150>
		//Check edges then update egdes and state
		if (((SWITCHES & (0x1ul<<i))>>i) & !((SW_STATE & (0x1ul<<i))>>i)) { //sw=1, state=0
 8000f8e:	f04f 0201 	mov.w	r2, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	fa02 f203 	lsl.w	r2, r2, r3
 8000f98:	f240 1350 	movw	r3, #336	; 0x150
 8000f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	fa22 f203 	lsr.w	r2, r2, r3
 8000faa:	f04f 0101 	mov.w	r1, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000fb4:	f240 13ac 	movw	r3, #428	; 0x1ac
 8000fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4019      	ands	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2300      	movne	r3, #0
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d021      	beq.n	800101a <switch_edge_handler+0xb6>
				//positive edge
				SW_POS_EDGE |= (0x1ul<<i);
 8000fd6:	f04f 0201 	mov.w	r2, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	fa02 f203 	lsl.w	r2, r2, r3
 8000fe0:	f240 13b0 	movw	r3, #432	; 0x1b0
 8000fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	461a      	mov	r2, r3
 8000fee:	f240 13b0 	movw	r3, #432	; 0x1b0
 8000ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff6:	601a      	str	r2, [r3, #0]
				//high state
				SW_STATE |= (0x1ul<<i); //set
 8000ff8:	f04f 0201 	mov.w	r2, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	fa02 f203 	lsl.w	r2, r2, r3
 8001002:	f240 13ac 	movw	r3, #428	; 0x1ac
 8001006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	f240 13ac 	movw	r3, #428	; 0x1ac
 8001014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001018:	601a      	str	r2, [r3, #0]
		}
		if (!((SWITCHES & (0x1ul<<i))>>i) & ((SW_STATE & (0x1ul<<i))>>i)) { //sw=0, state=1
 800101a:	f04f 0201 	mov.w	r2, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	fa02 f203 	lsl.w	r2, r2, r3
 8001024:	f240 1350 	movw	r3, #336	; 0x150
 8001028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2300      	movne	r3, #0
 800103c:	2301      	moveq	r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	f04f 0101 	mov.w	r1, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	fa01 f103 	lsl.w	r1, r1, r3
 800104c:	f240 13ac 	movw	r3, #428	; 0x1ac
 8001050:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4019      	ands	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	fa21 f303 	lsr.w	r3, r1, r3
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <switch_edge_handler+0x148>
				//negative edge
				SW_NEG_EDGE |= (0x1ul<<i);
 8001064:	f04f 0201 	mov.w	r2, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	fa02 f203 	lsl.w	r2, r2, r3
 800106e:	f240 13b4 	movw	r3, #436	; 0x1b4
 8001072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	461a      	mov	r2, r3
 800107c:	f240 13b4 	movw	r3, #436	; 0x1b4
 8001080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001084:	601a      	str	r2, [r3, #0]
				//low state
				SW_STATE &= ~(0x1ul<<i); //reset
 8001086:	f04f 0201 	mov.w	r2, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	ea6f 0203 	mvn.w	r2, r3
 8001094:	f240 13ac 	movw	r3, #428	; 0x1ac
 8001098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4013      	ands	r3, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	f240 13ac 	movw	r3, #428	; 0x1ac
 80010a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010aa:	601a      	str	r2, [r3, #0]
	//Reset edges
	SW_POS_EDGE = 0x0;
	SW_NEG_EDGE = 0x0;
	
	int i;
	for (i=0; i<13; i++) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f103 0301 	add.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	f77f af69 	ble.w	8000f8e <switch_edge_handler+0x2a>
				SW_NEG_EDGE |= (0x1ul<<i);
				//low state
				SW_STATE &= ~(0x1ul<<i); //reset
		}
	}
}
 80010bc:	4618      	mov	r0, r3
 80010be:	f107 070c 	add.w	r7, r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <switch_queue_handler>:

/*----------------------------------------------------------------------------
  switch_queue_handler function
	NOTE: QUEUE[0] = newest item in queue
 *----------------------------------------------------------------------------*/
void switch_queue_handler() { //build the switch queue
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
	if (QUEUE_COUNTER < QUEUE_SIZE) {
 80010ce:	f240 13a8 	movw	r3, #424	; 0x1a8
 80010d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b13      	cmp	r3, #19
 80010da:	dc31      	bgt.n	8001140 <switch_queue_handler+0x78>
		int i;
		for (i=QUEUE_SIZE; i>0; i--) { //shift all items in queue to the left by 1
 80010dc:	f04f 0314 	mov.w	r3, #20
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	e013      	b.n	800110c <switch_queue_handler+0x44>
			SW_QUEUE[i] = SW_QUEUE[i-1];
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80010ea:	f240 1358 	movw	r3, #344	; 0x158
 80010ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010f6:	f240 1358 	movw	r3, #344	; 0x158
 80010fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	NOTE: QUEUE[0] = newest item in queue
 *----------------------------------------------------------------------------*/
void switch_queue_handler() { //build the switch queue
	if (QUEUE_COUNTER < QUEUE_SIZE) {
		int i;
		for (i=QUEUE_SIZE; i>0; i--) { //shift all items in queue to the left by 1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 33ff 	add.w	r3, r3, #4294967295
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dce8      	bgt.n	80010e4 <switch_queue_handler+0x1c>
			SW_QUEUE[i] = SW_QUEUE[i-1];
		}
		SW_QUEUE[0] = SWITCHES;//store new item
 8001112:	f240 1350 	movw	r3, #336	; 0x150
 8001116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	f240 1358 	movw	r3, #344	; 0x158
 8001120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001124:	601a      	str	r2, [r3, #0]
		
		QUEUE_COUNTER++;
 8001126:	f240 13a8 	movw	r3, #424	; 0x1a8
 800112a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f103 0201 	add.w	r2, r3, #1
 8001134:	f240 13a8 	movw	r3, #424	; 0x1a8
 8001138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e006      	b.n	800114e <switch_queue_handler+0x86>
	}
	else {
		QUEUE_COUNTER = 0; //reset switch counter
 8001140:	f240 13a8 	movw	r3, #424	; 0x1a8
 8001144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
	}
}
 800114e:	f107 070c 	add.w	r7, r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <mode_handler>:

/*----------------------------------------------------------------------------
  mode_handler function
 *----------------------------------------------------------------------------*/
void mode_handler() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	switch(MODE){
 800115c:	f240 13c8 	movw	r3, #456	; 0x1c8
 8001160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d029      	beq.n	80011be <mode_handler+0x66>
 800116a:	2b02      	cmp	r3, #2
 800116c:	d02a      	beq.n	80011c4 <mode_handler+0x6c>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d12d      	bne.n	80011ce <mode_handler+0x76>
		case 0: //INIT_MODE
			if ((SWITCHES >> 8)&(0x1L)) { //if SW9 is pressed
 8001172:	f240 1350 	movw	r3, #336	; 0x150
 8001176:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	ea4f 2323 	mov.w	r3, r3, asr #8
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d007      	beq.n	8001198 <mode_handler+0x40>
				MODE = FREQ_MODE;
 8001188:	f240 13c8 	movw	r3, #456	; 0x1c8
 800118c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001190:	f04f 0201 	mov.w	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
			}
			else if ((SWITCHES >> 9)&(0x1L)) { //if SW10 is pressed
				MODE = TEST_MODE;
			}
			break;
 8001196:	e019      	b.n	80011cc <mode_handler+0x74>
	switch(MODE){
		case 0: //INIT_MODE
			if ((SWITCHES >> 8)&(0x1L)) { //if SW9 is pressed
				MODE = FREQ_MODE;
			}
			else if ((SWITCHES >> 9)&(0x1L)) { //if SW10 is pressed
 8001198:	f240 1350 	movw	r3, #336	; 0x150
 800119c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	ea4f 2363 	mov.w	r3, r3, asr #9
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <mode_handler+0x74>
				MODE = TEST_MODE;
 80011ae:	f240 13c8 	movw	r3, #456	; 0x1c8
 80011b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011b6:	f04f 0202 	mov.w	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
			}
			break;
 80011bc:	e006      	b.n	80011cc <mode_handler+0x74>
		case 1: //FREQ_MODE
			freq_mode_handler();
 80011be:	f000 f807 	bl	80011d0 <freq_mode_handler>
			break;
 80011c2:	e004      	b.n	80011ce <mode_handler+0x76>
		case 2: //TEST_MODE
			test_mode_handler();
 80011c4:	f000 f8d0 	bl	8001368 <test_mode_handler>
			break;
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <mode_handler+0x76>
				MODE = FREQ_MODE;
			}
			else if ((SWITCHES >> 9)&(0x1L)) { //if SW10 is pressed
				MODE = TEST_MODE;
			}
			break;
 80011cc:	bf00      	nop
			break;
		case 2: //TEST_MODE
			test_mode_handler();
			break;
	}
}
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <freq_mode_handler>:

/*----------------------------------------------------------------------------
  freq_mode_handler function
 *----------------------------------------------------------------------------*/
void freq_mode_handler() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	display_frequency();
 80011d4:	f000 f84e 	bl	8001274 <display_frequency>
	if ((SWITCHES >> 9)&(0x1)) { //if SW10 is pressed
 80011d8:	f240 1350 	movw	r3, #336	; 0x150
 80011dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <freq_mode_handler+0x28>
		MODE = TEST_MODE;
 80011ea:	f240 13c8 	movw	r3, #456	; 0x1c8
 80011ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011f2:	f04f 0202 	mov.w	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
	}	
	if ((SW_POS_EDGE & 0x1) && (FREQ_VAL <= 7000)) { //SW1
 80011f8:	f240 13b0 	movw	r3, #432	; 0x1b0
 80011fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d014      	beq.n	8001234 <freq_mode_handler+0x64>
 800120a:	f240 0330 	movw	r3, #48	; 0x30
 800120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	f641 3358 	movw	r3, #7000	; 0x1b58
 8001218:	429a      	cmp	r2, r3
 800121a:	dc0b      	bgt.n	8001234 <freq_mode_handler+0x64>
		FREQ_VAL += 1000;
 800121c:	f240 0330 	movw	r3, #48	; 0x30
 8001220:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800122a:	f240 0330 	movw	r3, #48	; 0x30
 800122e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001232:	601a      	str	r2, [r3, #0]
	}
	if (((SW_POS_EDGE >> 1) & 0x1) && (FREQ_VAL >= 1125)) { //SW2
 8001234:	f240 13b0 	movw	r3, #432	; 0x1b0
 8001238:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d014      	beq.n	8001270 <freq_mode_handler+0xa0>
 8001246:	f240 0330 	movw	r3, #48	; 0x30
 800124a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	f240 4364 	movw	r3, #1124	; 0x464
 8001254:	429a      	cmp	r2, r3
 8001256:	dd0b      	ble.n	8001270 <freq_mode_handler+0xa0>
		FREQ_VAL -= 1000;
 8001258:	f240 0330 	movw	r3, #48	; 0x30
 800125c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8001266:	f240 0330 	movw	r3, #48	; 0x30
 800126a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800126e:	601a      	str	r2, [r3, #0]
	}
}
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop

08001274 <display_frequency>:


/*----------------------------------------------------------------------------
  display_frequency function
 *----------------------------------------------------------------------------*/
void display_frequency(){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
	//We know the frequency will be inbetween 125 and 8000
	int freq = FREQ_VAL;
 800127a:	f240 0330 	movw	r3, #48	; 0x30
 800127e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	607b      	str	r3, [r7, #4]
	//DIGIT1
	if (freq > 999) {
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	f240 33e7 	movw	r3, #999	; 0x3e7
 800128c:	429a      	cmp	r2, r3
 800128e:	dd1f      	ble.n	80012d0 <display_frequency+0x5c>
		SEG7_DIGIT1 = freq / 1000;
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001296:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800129a:	fb83 1302 	smull	r1, r3, r3, r2
 800129e:	ea4f 11a3 	mov.w	r1, r3, asr #6
 80012a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012a6:	1aca      	subs	r2, r1, r3
 80012a8:	f240 0314 	movw	r3, #20
 80012ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012b0:	601a      	str	r2, [r3, #0]
		freq -= 1000*SEG7_DIGIT1;
 80012b2:	f240 0314 	movw	r3, #20
 80012b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80012c0:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80012c4:	fb03 f302 	mul.w	r3, r3, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	18d3      	adds	r3, r2, r3
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e006      	b.n	80012de <display_frequency+0x6a>
	}
	else {
		SEG7_DIGIT1 = 10;
 80012d0:	f240 0314 	movw	r3, #20
 80012d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012d8:	f04f 020a 	mov.w	r2, #10
 80012dc:	601a      	str	r2, [r3, #0]
	}
	//DIGIT2-4
	SEG7_DIGIT2 = freq / 100;
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	f248 531f 	movw	r3, #34079	; 0x851f
 80012e4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80012e8:	fb83 1302 	smull	r1, r3, r3, r2
 80012ec:	ea4f 1163 	mov.w	r1, r3, asr #5
 80012f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012f4:	1aca      	subs	r2, r1, r3
 80012f6:	f240 0318 	movw	r3, #24
 80012fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012fe:	601a      	str	r2, [r3, #0]
	freq -= 100*SEG7_DIGIT2;
 8001300:	f240 0318 	movw	r3, #24
 8001304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	607b      	str	r3, [r7, #4]
	SEG7_DIGIT3 = freq / 10;
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	f246 6367 	movw	r3, #26215	; 0x6667
 800131e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	ea4f 01a3 	mov.w	r1, r3, asr #2
 800132a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800132e:	1aca      	subs	r2, r1, r3
 8001330:	f240 031c 	movw	r3, #28
 8001334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001338:	601a      	str	r2, [r3, #0]
	freq -= 10*SEG7_DIGIT3;
 800133a:	f240 031c 	movw	r3, #28
 800133e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f06f 0209 	mvn.w	r2, #9
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	607b      	str	r3, [r7, #4]
	SEG7_DIGIT4 = freq;
 8001352:	f240 0320 	movw	r3, #32
 8001356:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
}
 800135e:	f107 070c 	add.w	r7, r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <test_mode_handler>:
/*----------------------------------------------------------------------------
  test_mode_handler function
 *----------------------------------------------------------------------------*/
void test_mode_handler() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  display_intensity();
 800136c:	f000 f814 	bl	8001398 <display_intensity>
	if ((SWITCHES >> 8)&(0x1L)) { //if SW9 is pressed
 8001370:	f240 1350 	movw	r3, #336	; 0x150
 8001374:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	ea4f 2323 	mov.w	r3, r3, asr #8
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <test_mode_handler+0x2c>
		MODE = FREQ_MODE;
 8001386:	f240 13c8 	movw	r3, #456	; 0x1c8
 800138a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800138e:	f04f 0201 	mov.w	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
	}	
}
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop

08001398 <display_intensity>:

/*----------------------------------------------------------------------------
  display_intensity function
 *----------------------------------------------------------------------------*/
void display_intensity() {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
	int val = TEST_VAL;
 800139e:	f240 0334 	movw	r3, #52	; 0x34
 80013a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	607b      	str	r3, [r7, #4]
	//DIGIT1
	SEG7_DIGIT1 = 10; //off
 80013aa:	f240 0314 	movw	r3, #20
 80013ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013b2:	f04f 020a 	mov.w	r2, #10
 80013b6:	601a      	str	r2, [r3, #0]
	//DIGIT2
	if (val < 0) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da0b      	bge.n	80013d6 <display_intensity+0x3e>
		SEG7_DIGIT2 = 17; //'-'
 80013be:	f240 0318 	movw	r3, #24
 80013c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013c6:	f04f 0211 	mov.w	r2, #17
 80013ca:	601a      	str	r2, [r3, #0]
		val *= -1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1c3 0300 	rsb	r3, r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	e027      	b.n	8001426 <display_intensity+0x8e>
	}
	else if (val < 100){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b63      	cmp	r3, #99	; 0x63
 80013da:	dc07      	bgt.n	80013ec <display_intensity+0x54>
		SEG7_DIGIT2 = 10; //off
 80013dc:	f240 0318 	movw	r3, #24
 80013e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013e4:	f04f 020a 	mov.w	r2, #10
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e01c      	b.n	8001426 <display_intensity+0x8e>
	}
	else {
		SEG7_DIGIT2 = val / 100;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f248 531f 	movw	r3, #34079	; 0x851f
 80013f2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80013f6:	fb83 1302 	smull	r1, r3, r3, r2
 80013fa:	ea4f 1163 	mov.w	r1, r3, asr #5
 80013fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001402:	1aca      	subs	r2, r1, r3
 8001404:	f240 0318 	movw	r3, #24
 8001408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800140c:	601a      	str	r2, [r3, #0]
		val -= 100*SEG7_DIGIT2;
 800140e:	f240 0318 	movw	r3, #24
 8001412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	18d3      	adds	r3, r2, r3
 8001424:	607b      	str	r3, [r7, #4]
	}
	//DIGIT3,4
	SEG7_DIGIT3 = val / 10;
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	f246 6367 	movw	r3, #26215	; 0x6667
 800142c:	f2c6 6366 	movt	r3, #26214	; 0x6666
 8001430:	fb83 1302 	smull	r1, r3, r3, r2
 8001434:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8001438:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800143c:	1aca      	subs	r2, r1, r3
 800143e:	f240 031c 	movw	r3, #28
 8001442:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001446:	601a      	str	r2, [r3, #0]
	val -= 10*SEG7_DIGIT3;
 8001448:	f240 031c 	movw	r3, #28
 800144c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f06f 0209 	mvn.w	r2, #9
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	607b      	str	r3, [r7, #4]
	SEG7_DIGIT4 = val;
 8001460:	f240 0320 	movw	r3, #32
 8001464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	f107 070c 	add.w	r7, r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <switch_cluster_handler>:

/*----------------------------------------------------------------------------
  switch_cluster_handler function
 *----------------------------------------------------------------------------*/
void switch_cluster_handler() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	switch_handler(1);
 800147c:	f04f 0001 	mov.w	r0, #1
 8001480:	f000 f81a 	bl	80014b8 <switch_handler>
	switch_handler(3);
 8001484:	f04f 0003 	mov.w	r0, #3
 8001488:	f000 f816 	bl	80014b8 <switch_handler>
	switch_handler(5);
 800148c:	f04f 0005 	mov.w	r0, #5
 8001490:	f000 f812 	bl	80014b8 <switch_handler>
	switch_handler(7);
 8001494:	f04f 0007 	mov.w	r0, #7
 8001498:	f000 f80e 	bl	80014b8 <switch_handler>
	switch_handler(9);
 800149c:	f04f 0009 	mov.w	r0, #9
 80014a0:	f000 f80a 	bl	80014b8 <switch_handler>
	switch_handler(11);
 80014a4:	f04f 000b 	mov.w	r0, #11
 80014a8:	f000 f806 	bl	80014b8 <switch_handler>
	switch_handler(13);
 80014ac:	f04f 000d 	mov.w	r0, #13
 80014b0:	f000 f802 	bl	80014b8 <switch_handler>
}
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <switch_handler>:

/*----------------------------------------------------------------------------
  switch_handler function
 *----------------------------------------------------------------------------*/
void switch_handler(int sw_set) {
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	//initialize (disable) anode lines to prevent flicker in seven segment
	GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 80014c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014d0:	8b12      	ldrh	r2, [r2, #24]
 80014d2:	f042 0204 	orr.w	r2, r2, #4
 80014d6:	b292      	uxth	r2, r2
 80014d8:	831a      	strh	r2, [r3, #24]
	GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ea:	8b12      	ldrh	r2, [r2, #24]
 80014ec:	f042 0202 	orr.w	r2, r2, #2
 80014f0:	b292      	uxth	r2, r2
 80014f2:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 80014f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001500:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001504:	8b12      	ldrh	r2, [r2, #24]
 8001506:	f042 0210 	orr.w	r2, r2, #16
 800150a:	b292      	uxth	r2, r2
 800150c:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800151e:	8b12      	ldrh	r2, [r2, #24]
 8001520:	f042 0202 	orr.w	r2, r2, #2
 8001524:	b292      	uxth	r2, r2
 8001526:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8001528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800152c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001534:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001538:	8b12      	ldrh	r2, [r2, #24]
 800153a:	f042 0220 	orr.w	r2, r2, #32
 800153e:	b292      	uxth	r2, r2
 8001540:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001552:	8b12      	ldrh	r2, [r2, #24]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	b292      	uxth	r2, r2
 800155a:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001568:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800156c:	8b12      	ldrh	r2, [r2, #24]
 800156e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001572:	b292      	uxth	r2, r2
 8001574:	831a      	strh	r2, [r3, #24]
	
	//clock anode driver
	GPIOC->BSRRH |= (1ul << 11); //set AN_CLK (PC11) low
 8001576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800157e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001582:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001586:	8b52      	ldrh	r2, [r2, #26]
 8001588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800158c:	b292      	uxth	r2, r2
 800158e:	835a      	strh	r2, [r3, #26]
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 8001590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015a0:	8b12      	ldrh	r2, [r2, #24]
 80015a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a6:	b292      	uxth	r2, r2
 80015a8:	831a      	strh	r2, [r3, #24]

	//enable anode driver
	GPIOB->BSRRH |= (1ul << 4); //set AN_EN (PB4) low b/c active low
 80015aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ba:	8b52      	ldrh	r2, [r2, #26]
 80015bc:	f042 0210 	orr.w	r2, r2, #16
 80015c0:	b292      	uxth	r2, r2
 80015c2:	835a      	strh	r2, [r3, #26]
	
	//initialize all cathode lines
	GPIOB->BSRRL |= (1ul << 5); //set SW_1-2 | CA_D | PB5 high
 80015c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015d4:	8b12      	ldrh	r2, [r2, #24]
 80015d6:	f042 0220 	orr.w	r2, r2, #32
 80015da:	b292      	uxth	r2, r2
 80015dc:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 11); //set SW_3-4 | CA_E | PB11 high
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ee:	8b12      	ldrh	r2, [r2, #24]
 80015f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f4:	b292      	uxth	r2, r2
 80015f6:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 0); //set SW_5-6 | CA_DP | PB0 high
 80015f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001608:	8b12      	ldrh	r2, [r2, #24]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	b292      	uxth	r2, r2
 8001610:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 1); //set SW_7-8 | CA_B | PB1 high
 8001612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001616:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800161a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001622:	8b12      	ldrh	r2, [r2, #24]
 8001624:	f042 0202 	orr.w	r2, r2, #2
 8001628:	b292      	uxth	r2, r2
 800162a:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 4); //set SW_9-10 | CA_G | PC4 high
 800162c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001630:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800163c:	8b12      	ldrh	r2, [r2, #24]
 800163e:	f042 0210 	orr.w	r2, r2, #16
 8001642:	b292      	uxth	r2, r2
 8001644:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 5); //set SW_11-12 | CA_A | PC5 high
 8001646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800164e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001652:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001656:	8b12      	ldrh	r2, [r2, #24]
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	b292      	uxth	r2, r2
 800165e:	831a      	strh	r2, [r3, #24]
	GPIOA->BSRRL |= (1ul << 1); //set SW_13 | CA_C | PA1 high	
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001670:	8b12      	ldrh	r2, [r2, #24]
 8001672:	f042 0202 	orr.w	r2, r2, #2
 8001676:	b292      	uxth	r2, r2
 8001678:	831a      	strh	r2, [r3, #24]
	
	//set switch pair cathode lines
	switch (sw_set) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d87f      	bhi.n	8001784 <switch_handler+0x2cc>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <switch_handler+0x1d4>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	080016c1 	.word	0x080016c1
 8001690:	08001785 	.word	0x08001785
 8001694:	080016dd 	.word	0x080016dd
 8001698:	08001785 	.word	0x08001785
 800169c:	080016f9 	.word	0x080016f9
 80016a0:	08001785 	.word	0x08001785
 80016a4:	08001715 	.word	0x08001715
 80016a8:	08001785 	.word	0x08001785
 80016ac:	08001731 	.word	0x08001731
 80016b0:	08001785 	.word	0x08001785
 80016b4:	0800174d 	.word	0x0800174d
 80016b8:	08001785 	.word	0x08001785
 80016bc:	08001769 	.word	0x08001769
		case 1: //SW_1-2
			GPIOB->BSRRH |= (1ul << 5); //set SW_1-2 | CA_D | PB5 low
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016d0:	8b52      	ldrh	r2, [r2, #26]
 80016d2:	f042 0220 	orr.w	r2, r2, #32
 80016d6:	b292      	uxth	r2, r2
 80016d8:	835a      	strh	r2, [r3, #26]
			break;
 80016da:	e053      	b.n	8001784 <switch_handler+0x2cc>
		case 3: //SW_3-4
			GPIOB->BSRRH |= (1ul << 11); //set SW_3-4 | CA_E | PB11 low
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016ec:	8b52      	ldrh	r2, [r2, #26]
 80016ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f2:	b292      	uxth	r2, r2
 80016f4:	835a      	strh	r2, [r3, #26]
			break;
 80016f6:	e045      	b.n	8001784 <switch_handler+0x2cc>
		case 5: //SW_5-6
			GPIOB->BSRRH |= (1ul << 0); //set SW_5-6 | CA_DP | PB0 low
 80016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001704:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001708:	8b52      	ldrh	r2, [r2, #26]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	b292      	uxth	r2, r2
 8001710:	835a      	strh	r2, [r3, #26]
			break;
 8001712:	e037      	b.n	8001784 <switch_handler+0x2cc>
		case 7: //SW_7-8
			GPIOB->BSRRH |= (1ul << 1); //set SW_7-8 | CA_B | PB1 low
 8001714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001718:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001724:	8b52      	ldrh	r2, [r2, #26]
 8001726:	f042 0202 	orr.w	r2, r2, #2
 800172a:	b292      	uxth	r2, r2
 800172c:	835a      	strh	r2, [r3, #26]
			break;
 800172e:	e029      	b.n	8001784 <switch_handler+0x2cc>
		case 9: //SW_9-10
			GPIOC->BSRRH |= (1ul << 4); //set SW_9-10 | CA_G | PC4 low
 8001730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001734:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001740:	8b52      	ldrh	r2, [r2, #26]
 8001742:	f042 0210 	orr.w	r2, r2, #16
 8001746:	b292      	uxth	r2, r2
 8001748:	835a      	strh	r2, [r3, #26]
			break;
 800174a:	e01b      	b.n	8001784 <switch_handler+0x2cc>
		case 11: //SW_11-12
			GPIOC->BSRRH |= (1ul << 5); //set SW_11-12 | CA_A | PC5 low
 800174c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001758:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800175c:	8b52      	ldrh	r2, [r2, #26]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	b292      	uxth	r2, r2
 8001764:	835a      	strh	r2, [r3, #26]
			break;
 8001766:	e00d      	b.n	8001784 <switch_handler+0x2cc>
		case 13: //SW_13
			GPIOA->BSRRH |= (1ul << 1); //set SW_13 | CA_C | PA1 low	
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001778:	8b52      	ldrh	r2, [r2, #26]
 800177a:	f042 0202 	orr.w	r2, r2, #2
 800177e:	b292      	uxth	r2, r2
 8001780:	835a      	strh	r2, [r3, #26]
			break;
 8001782:	bf00      	nop
	}
	
	//clock cathode driver
	GPIOD->BSRRH |= (1ul << 2); //set CA_CLK | PD2 low
 8001784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001788:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800178c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001790:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001794:	8b52      	ldrh	r2, [r2, #26]
 8001796:	f042 0204 	orr.w	r2, r2, #4
 800179a:	b292      	uxth	r2, r2
 800179c:	835a      	strh	r2, [r3, #26]
	GPIOD->BSRRL |= (1ul << 2); //set CA_CLK | PD2 high
 800179e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017a6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80017aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017ae:	8b12      	ldrh	r2, [r2, #24]
 80017b0:	f042 0204 	orr.w	r2, r2, #4
 80017b4:	b292      	uxth	r2, r2
 80017b6:	831a      	strh	r2, [r3, #24]
	
	//enable cathode driver
	GPIOC->BSRRH |= (1ul << 1); //set CA_EN (PC1) low b/c active low
 80017b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017c8:	8b52      	ldrh	r2, [r2, #26]
 80017ca:	f042 0202 	orr.w	r2, r2, #2
 80017ce:	b292      	uxth	r2, r2
 80017d0:	835a      	strh	r2, [r3, #26]
	
	//read switch lines (0: not-pressed, 1: pressed)
	int val=0xDEAD;
 80017d2:	f64d 63ad 	movw	r3, #57005	; 0xdead
 80017d6:	60fb      	str	r3, [r7, #12]
	val = (~(((GPIOA->IDR) & (1ul<<15))>>15)) & 1ul; //SW_ODD | PA15
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2300      	movne	r3, #0
 80017ec:	2301      	moveq	r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	60fb      	str	r3, [r7, #12]
	SWITCHES &= ~(1ul<<(sw_set-1)); //clear bit
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80017f8:	f04f 0201 	mov.w	r2, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	ea6f 0203 	mvn.w	r2, r3
 8001804:	f240 1350 	movw	r3, #336	; 0x150
 8001808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4013      	ands	r3, r2
 8001810:	461a      	mov	r2, r3
 8001812:	f240 1350 	movw	r3, #336	; 0x150
 8001816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181a:	601a      	str	r2, [r3, #0]
	SWITCHES |= val<<(sw_set-1); //set bit
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 33ff 	add.w	r3, r3, #4294967295
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	fa02 f203 	lsl.w	r2, r2, r3
 8001828:	f240 1350 	movw	r3, #336	; 0x150
 800182c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	f240 1350 	movw	r3, #336	; 0x150
 8001838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183c:	601a      	str	r2, [r3, #0]
	
	val = (~(((GPIOC->IDR) & (1ul<<8))>>8)) & 1ul; //SW_EVEN | PC8
 800183e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001842:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf14      	ite	ne
 8001850:	2300      	movne	r3, #0
 8001852:	2301      	moveq	r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	60fb      	str	r3, [r7, #12]
	SWITCHES &= ~(1ul<<(sw_set)); //clear bit
 8001858:	f04f 0201 	mov.w	r2, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	ea6f 0203 	mvn.w	r2, r3
 8001866:	f240 1350 	movw	r3, #336	; 0x150
 800186a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4013      	ands	r3, r2
 8001872:	461a      	mov	r2, r3
 8001874:	f240 1350 	movw	r3, #336	; 0x150
 8001878:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800187c:	601a      	str	r2, [r3, #0]
	SWITCHES |= val<<(sw_set); //set bit
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	fa02 f203 	lsl.w	r2, r2, r3
 8001886:	f240 1350 	movw	r3, #336	; 0x150
 800188a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	f240 1350 	movw	r3, #336	; 0x150
 8001896:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800189a:	601a      	str	r2, [r3, #0]
	
	int sw=0xBAD;
 800189c:	f640 33ad 	movw	r3, #2989	; 0xbad
 80018a0:	60bb      	str	r3, [r7, #8]
	sw=SWITCHES;
 80018a2:	f240 1350 	movw	r3, #336	; 0x150
 80018a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60bb      	str	r3, [r7, #8]
	
	
}
 80018ae:	f107 0714 	add.w	r7, r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <Delay>:


/*----------------------------------------------------------------------------
  delays number of tick Systicks (happens every 1 ms)
 *----------------------------------------------------------------------------*/
void Delay (uint32_t dlyTicks) {                                              
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t curTicks;

//!!temporary -- replaced delay mediated by SysTick_Handeler() with software delay
//  curTicks = msTicks;
//  while ((msTicks - curTicks) < dlyTicks);
  curTicks = 0x12345;
 80018c0:	f242 3345 	movw	r3, #9029	; 0x2345
 80018c4:	f2c0 0301 	movt	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
  while(curTicks-- > 0);
 80018ca:	bf00      	nop
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf0c      	ite	eq
 80018d2:	2300      	moveq	r3, #0
 80018d4:	2301      	movne	r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	f102 32ff 	add.w	r2, r2, #4294967295
 80018de:	60fa      	str	r2, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f3      	bne.n	80018cc <Delay+0x14>
  return;
 80018e4:	bf00      	nop
}
 80018e6:	f107 0714 	add.w	r7, r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <BTN_Init>:


/*----------------------------------------------------------------------------
  Function that initializes Button pins
 *----------------------------------------------------------------------------*/
void BTN_Init(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  RCC->AHB1ENR  |= ((1UL <<  0) );              /* Enable GPIOA clock         */
 80018f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001900:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	631a      	str	r2, [r3, #48]	; 0x30

  GPIOA->MODER    &= ~((3UL << 2*0)  );         /* PA.0 is input              */
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	f022 0203 	bic.w	r2, r2, #3
 8001922:	601a      	str	r2, [r3, #0]
  GPIOA->OSPEEDR  &= ~((3UL << 2*0)  );         /* PA.0 is 50MHz Fast Speed   */
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001934:	6892      	ldr	r2, [r2, #8]
 8001936:	f022 0203 	bic.w	r2, r2, #3
 800193a:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR  |=  ((2UL << 2*0)  ); 
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800194c:	6892      	ldr	r2, [r2, #8]
 800194e:	f042 0202 	orr.w	r2, r2, #2
 8001952:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR    &= ~((3UL << 2*0)  );         /* PA.0 is no Pull up         */
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001964:	68d2      	ldr	r2, [r2, #12]
 8001966:	f022 0203 	bic.w	r2, r2, #3
 800196a:	60da      	str	r2, [r3, #12]
}
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <BTN_Get>:

/*----------------------------------------------------------------------------
  Function that read Button pins
 *----------------------------------------------------------------------------*/
uint32_t BTN_Get(void) {
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

 return (GPIOA->IDR & (1UL << 0));
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0301 	and.w	r3, r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <sub_uchar_from_quad_example>:
/*----------------------------------------------------------------------------
  sub_uchar_from_quad_asm function & function wrapper
 *----------------------------------------------------------------------------*/
void sub_uchar_from_quad_asm(int *quad_dest_addr, int *quad_base_addr, char uchar_addr); 

void sub_uchar_from_quad_example() {
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
	unsigned int quad_dest[4];
  
  unsigned int quad_base[4] = {0x0, 0x0, 0x0, 0x4}; 	//test 1 - basic case
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	f04f 0304 	mov.w	r3, #4
 80019ac:	613b      	str	r3, [r7, #16]
	unsigned char uchar = 0x1;
 80019ae:	f04f 0301 	mov.w	r3, #1
 80019b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  sub_uchar_from_quad_asm(quad_dest, quad_base, uchar); 
 80019b6:	f107 0114 	add.w	r1, r7, #20
 80019ba:	f107 0204 	add.w	r2, r7, #4
 80019be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	461a      	mov	r2, r3
 80019c8:	f7fe fbbf 	bl	800014a <sub_uchar_from_quad_asm>

	quad_base[0] = 0x0; //test 2 - propogation case
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
	quad_base[1] = 0x0;
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
	quad_base[2] = 0x3;
 80019d8:	f04f 0303 	mov.w	r3, #3
 80019dc:	60fb      	str	r3, [r7, #12]
	quad_base[3] = 0x10;
 80019de:	f04f 0310 	mov.w	r3, #16
 80019e2:	613b      	str	r3, [r7, #16]
	uchar = 0x20;
 80019e4:	f04f 0320 	mov.w	r3, #32
 80019e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  sub_uchar_from_quad_asm(quad_dest, quad_base, uchar); 
 80019ec:	f107 0114 	add.w	r1, r7, #20
 80019f0:	f107 0204 	add.w	r2, r7, #4
 80019f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7fe fba4 	bl	800014a <sub_uchar_from_quad_asm>

	quad_base[0] = 0x80000000; //test 3 - overflow case
 8001a02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a06:	607b      	str	r3, [r7, #4]
	quad_base[1] = 0x0;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
	quad_base[2] = 0x0;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
	quad_base[3] = 0x0;
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
	uchar = 0x01;
 8001a1a:	f04f 0301 	mov.w	r3, #1
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  sub_uchar_from_quad_asm(quad_dest, quad_base, uchar);
 8001a22:	f107 0114 	add.w	r1, r7, #20
 8001a26:	f107 0204 	add.w	r2, r7, #4
 8001a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a2e:	4608      	mov	r0, r1
 8001a30:	4611      	mov	r1, r2
 8001a32:	461a      	mov	r2, r3
 8001a34:	f7fe fb89 	bl	800014a <sub_uchar_from_quad_asm>
}
 8001a38:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <seg7_handler>:
int atoi(char* num_char);

/*----------------------------------------------------------------------------
  seg7_handler function - called from systick
 *----------------------------------------------------------------------------*/
int seg7_handler() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	switch (SEG7_COUNTER) {
 8001a44:	f240 0310 	movw	r3, #16
 8001a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d87f      	bhi.n	8001b56 <seg7_handler+0x116>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <seg7_handler+0x1c>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a71 	.word	0x08001a71
 8001a60:	08001a9f 	.word	0x08001a9f
 8001a64:	08001acd 	.word	0x08001acd
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001b29 	.word	0x08001b29
		case 1:
			seg7_update(1, SEG7_DIGIT1);
 8001a70:	f240 0314 	movw	r3, #20
 8001a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f04f 0001 	mov.w	r0, #1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f000 f874 	bl	8001b6c <seg7_update>
			SEG7_COUNTER++;
 8001a84:	f240 0310 	movw	r3, #16
 8001a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f103 0201 	add.w	r2, r3, #1
 8001a92:	f240 0310 	movw	r3, #16
 8001a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a9a:	601a      	str	r2, [r3, #0]
			break;
 8001a9c:	e063      	b.n	8001b66 <seg7_handler+0x126>
		case 2:
			seg7_update(2, SEG7_DIGIT2);
 8001a9e:	f240 0318 	movw	r3, #24
 8001aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 0002 	mov.w	r0, #2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f000 f85d 	bl	8001b6c <seg7_update>
			SEG7_COUNTER++;
 8001ab2:	f240 0310 	movw	r3, #16
 8001ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f103 0201 	add.w	r2, r3, #1
 8001ac0:	f240 0310 	movw	r3, #16
 8001ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ac8:	601a      	str	r2, [r3, #0]
			break;
 8001aca:	e04c      	b.n	8001b66 <seg7_handler+0x126>
		case 3:
			seg7_update(3, SEG7_DIGIT3);
 8001acc:	f240 031c 	movw	r3, #28
 8001ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f04f 0003 	mov.w	r0, #3
 8001ada:	4619      	mov	r1, r3
 8001adc:	f000 f846 	bl	8001b6c <seg7_update>
			SEG7_COUNTER++;
 8001ae0:	f240 0310 	movw	r3, #16
 8001ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f103 0201 	add.w	r2, r3, #1
 8001aee:	f240 0310 	movw	r3, #16
 8001af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af6:	601a      	str	r2, [r3, #0]
			break;
 8001af8:	e035      	b.n	8001b66 <seg7_handler+0x126>
		case 4:
			seg7_update(4, SEG7_DIGIT4);
 8001afa:	f240 0320 	movw	r3, #32
 8001afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 0004 	mov.w	r0, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f000 f82f 	bl	8001b6c <seg7_update>
		  SEG7_COUNTER++;
 8001b0e:	f240 0310 	movw	r3, #16
 8001b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f103 0201 	add.w	r2, r3, #1
 8001b1c:	f240 0310 	movw	r3, #16
 8001b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b24:	601a      	str	r2, [r3, #0]
			break;
 8001b26:	e01e      	b.n	8001b66 <seg7_handler+0x126>
		case 5:
			seg7_update(5, SEG7_COLON_DEGREE);
 8001b28:	f240 0324 	movw	r3, #36	; 0x24
 8001b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f04f 0005 	mov.w	r0, #5
 8001b36:	4619      	mov	r1, r3
 8001b38:	f000 f818 	bl	8001b6c <seg7_update>
		  SEG7_COUNTER++;
 8001b3c:	f240 0310 	movw	r3, #16
 8001b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f103 0201 	add.w	r2, r3, #1
 8001b4a:	f240 0310 	movw	r3, #16
 8001b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b52:	601a      	str	r2, [r3, #0]
			break;
 8001b54:	e007      	b.n	8001b66 <seg7_handler+0x126>
		default:
			SEG7_COUNTER = 1;
 8001b56:	f240 0310 	movw	r3, #16
 8001b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b5e:	f04f 0201 	mov.w	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
			break;
 8001b64:	bf00      	nop
	}
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop

08001b6c <seg7_update>:

/*----------------------------------------------------------------------------
  seg7_update function - updates a single seg7 digit to write passed value
 *----------------------------------------------------------------------------*/
int seg7_update(int digit, int val) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	//disable cathode driver
	GPIOC->BSRRL |= (1ul << 1); //set CA_EN (PC1) high b/c active low
 8001b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b86:	8b12      	ldrh	r2, [r2, #24]
 8001b88:	f042 0202 	orr.w	r2, r2, #2
 8001b8c:	b292      	uxth	r2, r2
 8001b8e:	831a      	strh	r2, [r3, #24]
	
	//set cathode lines
	switch(val) {
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b11      	cmp	r3, #17
 8001b94:	f200 8792 	bhi.w	8002abc <seg7_update+0xf50>
 8001b98:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <seg7_update+0x34>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001be9 	.word	0x08001be9
 8001ba4:	08001cbd 	.word	0x08001cbd
 8001ba8:	08001d91 	.word	0x08001d91
 8001bac:	08001e65 	.word	0x08001e65
 8001bb0:	08001f39 	.word	0x08001f39
 8001bb4:	0800200d 	.word	0x0800200d
 8001bb8:	080020e1 	.word	0x080020e1
 8001bbc:	080021b5 	.word	0x080021b5
 8001bc0:	08002289 	.word	0x08002289
 8001bc4:	0800235b 	.word	0x0800235b
 8001bc8:	0800242d 	.word	0x0800242d
 8001bcc:	080024ff 	.word	0x080024ff
 8001bd0:	080025d1 	.word	0x080025d1
 8001bd4:	080026a3 	.word	0x080026a3
 8001bd8:	08002775 	.word	0x08002775
 8001bdc:	08002847 	.word	0x08002847
 8001be0:	08002919 	.word	0x08002919
 8001be4:	080029eb 	.word	0x080029eb
		case 0: //'0'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bf8:	8b52      	ldrh	r2, [r2, #26]
 8001bfa:	f042 0220 	orr.w	r2, r2, #32
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c12:	8b52      	ldrh	r2, [r2, #26]
 8001c14:	f042 0202 	orr.w	r2, r2, #2
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c2c:	8b52      	ldrh	r2, [r2, #26]
 8001c2e:	f042 0202 	orr.w	r2, r2, #2
 8001c32:	b292      	uxth	r2, r2
 8001c34:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8001c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c46:	8b52      	ldrh	r2, [r2, #26]
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8001c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c60:	8b52      	ldrh	r2, [r2, #26]
 8001c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c66:	b292      	uxth	r2, r2
 8001c68:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8001c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c7a:	8b52      	ldrh	r2, [r2, #26]
 8001c7c:	f042 0204 	orr.w	r2, r2, #4
 8001c80:	b292      	uxth	r2, r2
 8001c82:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8001c84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c94:	8b12      	ldrh	r2, [r2, #24]
 8001c96:	f042 0210 	orr.w	r2, r2, #16
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001caa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cae:	8b12      	ldrh	r2, [r2, #24]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	831a      	strh	r2, [r3, #24]
			break;
 8001cb8:	f000 bf00 	b.w	8002abc <seg7_update+0xf50>
		case 1: //'1'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 8001cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ccc:	8b12      	ldrh	r2, [r2, #24]
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ce6:	8b52      	ldrh	r2, [r2, #26]
 8001ce8:	f042 0202 	orr.w	r2, r2, #2
 8001cec:	b292      	uxth	r2, r2
 8001cee:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d00:	8b52      	ldrh	r2, [r2, #26]
 8001d02:	f042 0202 	orr.w	r2, r2, #2
 8001d06:	b292      	uxth	r2, r2
 8001d08:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d1a:	8b12      	ldrh	r2, [r2, #24]
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	b292      	uxth	r2, r2
 8001d22:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d34:	8b12      	ldrh	r2, [r2, #24]
 8001d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8001d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d4e:	8b12      	ldrh	r2, [r2, #24]
 8001d50:	f042 0204 	orr.w	r2, r2, #4
 8001d54:	b292      	uxth	r2, r2
 8001d56:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8001d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d68:	8b12      	ldrh	r2, [r2, #24]
 8001d6a:	f042 0210 	orr.w	r2, r2, #16
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d82:	8b12      	ldrh	r2, [r2, #24]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	831a      	strh	r2, [r3, #24]
			break;
 8001d8c:	f000 be96 	b.w	8002abc <seg7_update+0xf50>
		case 2: //'2'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da0:	8b52      	ldrh	r2, [r2, #26]
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	b292      	uxth	r2, r2
 8001da8:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dba:	8b52      	ldrh	r2, [r2, #26]
 8001dbc:	f042 0202 	orr.w	r2, r2, #2
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dd4:	8b12      	ldrh	r2, [r2, #24]
 8001dd6:	f042 0202 	orr.w	r2, r2, #2
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8001dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dee:	8b52      	ldrh	r2, [r2, #26]
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b292      	uxth	r2, r2
 8001df6:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8001df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e08:	8b52      	ldrh	r2, [r2, #26]
 8001e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8001e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e22:	8b12      	ldrh	r2, [r2, #24]
 8001e24:	f042 0204 	orr.w	r2, r2, #4
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e3c:	8b52      	ldrh	r2, [r2, #26]
 8001e3e:	f042 0210 	orr.w	r2, r2, #16
 8001e42:	b292      	uxth	r2, r2
 8001e44:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e56:	8b12      	ldrh	r2, [r2, #24]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	831a      	strh	r2, [r3, #24]
			break;
 8001e60:	f000 be2c 	b.w	8002abc <seg7_update+0xf50>
		case 3: //'3'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e74:	8b52      	ldrh	r2, [r2, #26]
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e8e:	8b52      	ldrh	r2, [r2, #26]
 8001e90:	f042 0202 	orr.w	r2, r2, #2
 8001e94:	b292      	uxth	r2, r2
 8001e96:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ea8:	8b52      	ldrh	r2, [r2, #26]
 8001eaa:	f042 0202 	orr.w	r2, r2, #2
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8001eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ebe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ec2:	8b52      	ldrh	r2, [r2, #26]
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001edc:	8b12      	ldrh	r2, [r2, #24]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8001ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ef2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ef6:	8b12      	ldrh	r2, [r2, #24]
 8001ef8:	f042 0204 	orr.w	r2, r2, #4
 8001efc:	b292      	uxth	r2, r2
 8001efe:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f10:	8b52      	ldrh	r2, [r2, #26]
 8001f12:	f042 0210 	orr.w	r2, r2, #16
 8001f16:	b292      	uxth	r2, r2
 8001f18:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f2a:	8b12      	ldrh	r2, [r2, #24]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	b292      	uxth	r2, r2
 8001f32:	831a      	strh	r2, [r3, #24]
			break;
 8001f34:	f000 bdc2 	b.w	8002abc <seg7_update+0xf50>
		case 4: //'4'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 8001f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f48:	8b12      	ldrh	r2, [r2, #24]
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f62:	8b52      	ldrh	r2, [r2, #26]
 8001f64:	f042 0202 	orr.w	r2, r2, #2
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f7c:	8b52      	ldrh	r2, [r2, #26]
 8001f7e:	f042 0202 	orr.w	r2, r2, #2
 8001f82:	b292      	uxth	r2, r2
 8001f84:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f96:	8b12      	ldrh	r2, [r2, #24]
 8001f98:	f042 0220 	orr.w	r2, r2, #32
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fb0:	8b12      	ldrh	r2, [r2, #24]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8001fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fca:	8b52      	ldrh	r2, [r2, #26]
 8001fcc:	f042 0204 	orr.w	r2, r2, #4
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fe4:	8b52      	ldrh	r2, [r2, #26]
 8001fe6:	f042 0210 	orr.w	r2, r2, #16
 8001fea:	b292      	uxth	r2, r2
 8001fec:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ffe:	8b12      	ldrh	r2, [r2, #24]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	b292      	uxth	r2, r2
 8002006:	831a      	strh	r2, [r3, #24]
			break;	
 8002008:	f000 bd58 	b.w	8002abc <seg7_update+0xf50>
		case 5: //'5'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 800200c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002010:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002018:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800201c:	8b52      	ldrh	r2, [r2, #26]
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b292      	uxth	r2, r2
 8002024:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8002026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002036:	8b12      	ldrh	r2, [r2, #24]
 8002038:	f042 0202 	orr.w	r2, r2, #2
 800203c:	b292      	uxth	r2, r2
 800203e:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002050:	8b52      	ldrh	r2, [r2, #26]
 8002052:	f042 0202 	orr.w	r2, r2, #2
 8002056:	b292      	uxth	r2, r2
 8002058:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 800205a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002066:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800206a:	8b52      	ldrh	r2, [r2, #26]
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	b292      	uxth	r2, r2
 8002072:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002084:	8b12      	ldrh	r2, [r2, #24]
 8002086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208a:	b292      	uxth	r2, r2
 800208c:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 800208e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002092:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800209a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800209e:	8b52      	ldrh	r2, [r2, #26]
 80020a0:	f042 0204 	orr.w	r2, r2, #4
 80020a4:	b292      	uxth	r2, r2
 80020a6:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 80020a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020b8:	8b52      	ldrh	r2, [r2, #26]
 80020ba:	f042 0210 	orr.w	r2, r2, #16
 80020be:	b292      	uxth	r2, r2
 80020c0:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80020c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020d2:	8b12      	ldrh	r2, [r2, #24]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	b292      	uxth	r2, r2
 80020da:	831a      	strh	r2, [r3, #24]
			break;
 80020dc:	f000 bcee 	b.w	8002abc <seg7_update+0xf50>
		case 6: //'6'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 80020e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020f0:	8b52      	ldrh	r2, [r2, #26]
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	b292      	uxth	r2, r2
 80020f8:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 80020fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800210a:	8b12      	ldrh	r2, [r2, #24]
 800210c:	f042 0202 	orr.w	r2, r2, #2
 8002110:	b292      	uxth	r2, r2
 8002112:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002124:	8b52      	ldrh	r2, [r2, #26]
 8002126:	f042 0202 	orr.w	r2, r2, #2
 800212a:	b292      	uxth	r2, r2
 800212c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800213e:	8b52      	ldrh	r2, [r2, #26]
 8002140:	f042 0220 	orr.w	r2, r2, #32
 8002144:	b292      	uxth	r2, r2
 8002146:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8002148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800214c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002154:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002158:	8b52      	ldrh	r2, [r2, #26]
 800215a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800215e:	b292      	uxth	r2, r2
 8002160:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8002162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800216a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002172:	8b52      	ldrh	r2, [r2, #26]
 8002174:	f042 0204 	orr.w	r2, r2, #4
 8002178:	b292      	uxth	r2, r2
 800217a:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 800217c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002180:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002188:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800218c:	8b52      	ldrh	r2, [r2, #26]
 800218e:	f042 0210 	orr.w	r2, r2, #16
 8002192:	b292      	uxth	r2, r2
 8002194:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8002196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800219e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021a6:	8b12      	ldrh	r2, [r2, #24]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	b292      	uxth	r2, r2
 80021ae:	831a      	strh	r2, [r3, #24]
			break;
 80021b0:	f000 bc84 	b.w	8002abc <seg7_update+0xf50>
		case 7: //'7'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 80021b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021c4:	8b52      	ldrh	r2, [r2, #26]
 80021c6:	f042 0220 	orr.w	r2, r2, #32
 80021ca:	b292      	uxth	r2, r2
 80021cc:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 80021ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021de:	8b52      	ldrh	r2, [r2, #26]
 80021e0:	f042 0202 	orr.w	r2, r2, #2
 80021e4:	b292      	uxth	r2, r2
 80021e6:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021f8:	8b52      	ldrh	r2, [r2, #26]
 80021fa:	f042 0202 	orr.w	r2, r2, #2
 80021fe:	b292      	uxth	r2, r2
 8002200:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8002202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002206:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800220a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800220e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002212:	8b12      	ldrh	r2, [r2, #24]
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b292      	uxth	r2, r2
 800221a:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 800221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002220:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002228:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800222c:	8b12      	ldrh	r2, [r2, #24]
 800222e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002232:	b292      	uxth	r2, r2
 8002234:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8002236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800223a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800223e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002242:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002246:	8b52      	ldrh	r2, [r2, #26]
 8002248:	f042 0204 	orr.w	r2, r2, #4
 800224c:	b292      	uxth	r2, r2
 800224e:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8002250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800225c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002260:	8b12      	ldrh	r2, [r2, #24]
 8002262:	f042 0210 	orr.w	r2, r2, #16
 8002266:	b292      	uxth	r2, r2
 8002268:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 800226a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002276:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800227a:	8b12      	ldrh	r2, [r2, #24]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	b292      	uxth	r2, r2
 8002282:	831a      	strh	r2, [r3, #24]
			break;
 8002284:	f000 bc1a 	b.w	8002abc <seg7_update+0xf50>
		case 8: //'8'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8002288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800228c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002294:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002298:	8b52      	ldrh	r2, [r2, #26]
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	b292      	uxth	r2, r2
 80022a0:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 80022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022b2:	8b52      	ldrh	r2, [r2, #26]
 80022b4:	f042 0202 	orr.w	r2, r2, #2
 80022b8:	b292      	uxth	r2, r2
 80022ba:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022cc:	8b52      	ldrh	r2, [r2, #26]
 80022ce:	f042 0202 	orr.w	r2, r2, #2
 80022d2:	b292      	uxth	r2, r2
 80022d4:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 80022d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022e6:	8b52      	ldrh	r2, [r2, #26]
 80022e8:	f042 0220 	orr.w	r2, r2, #32
 80022ec:	b292      	uxth	r2, r2
 80022ee:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 80022f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002300:	8b52      	ldrh	r2, [r2, #26]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	b292      	uxth	r2, r2
 8002308:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 800230a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002316:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800231a:	8b52      	ldrh	r2, [r2, #26]
 800231c:	f042 0204 	orr.w	r2, r2, #4
 8002320:	b292      	uxth	r2, r2
 8002322:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8002324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002328:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800232c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002330:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002334:	8b52      	ldrh	r2, [r2, #26]
 8002336:	f042 0210 	orr.w	r2, r2, #16
 800233a:	b292      	uxth	r2, r2
 800233c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 800233e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002342:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800234e:	8b12      	ldrh	r2, [r2, #24]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	b292      	uxth	r2, r2
 8002356:	831a      	strh	r2, [r3, #24]
			break;	
 8002358:	e3b0      	b.n	8002abc <seg7_update+0xf50>
		case 9: //'9'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 800235a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002366:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800236a:	8b52      	ldrh	r2, [r2, #26]
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	b292      	uxth	r2, r2
 8002372:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8002374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002378:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800237c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002380:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002384:	8b52      	ldrh	r2, [r2, #26]
 8002386:	f042 0202 	orr.w	r2, r2, #2
 800238a:	b292      	uxth	r2, r2
 800238c:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800239e:	8b52      	ldrh	r2, [r2, #26]
 80023a0:	f042 0202 	orr.w	r2, r2, #2
 80023a4:	b292      	uxth	r2, r2
 80023a6:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 80023a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023b8:	8b12      	ldrh	r2, [r2, #24]
 80023ba:	f042 0220 	orr.w	r2, r2, #32
 80023be:	b292      	uxth	r2, r2
 80023c0:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 80023c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023d2:	8b12      	ldrh	r2, [r2, #24]
 80023d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d8:	b292      	uxth	r2, r2
 80023da:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 80023dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023ec:	8b52      	ldrh	r2, [r2, #26]
 80023ee:	f042 0204 	orr.w	r2, r2, #4
 80023f2:	b292      	uxth	r2, r2
 80023f4:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 80023f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002402:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002406:	8b52      	ldrh	r2, [r2, #26]
 8002408:	f042 0210 	orr.w	r2, r2, #16
 800240c:	b292      	uxth	r2, r2
 800240e:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8002410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002414:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800241c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002420:	8b12      	ldrh	r2, [r2, #24]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	b292      	uxth	r2, r2
 8002428:	831a      	strh	r2, [r3, #24]
			break;
 800242a:	e347      	b.n	8002abc <seg7_update+0xf50>
		case 10: //OFF
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 800242c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002430:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002438:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800243c:	8b12      	ldrh	r2, [r2, #24]
 800243e:	f042 0220 	orr.w	r2, r2, #32
 8002442:	b292      	uxth	r2, r2
 8002444:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8002446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800244e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002452:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002456:	8b12      	ldrh	r2, [r2, #24]
 8002458:	f042 0202 	orr.w	r2, r2, #2
 800245c:	b292      	uxth	r2, r2
 800245e:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002470:	8b12      	ldrh	r2, [r2, #24]
 8002472:	f042 0202 	orr.w	r2, r2, #2
 8002476:	b292      	uxth	r2, r2
 8002478:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 800247a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800247e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002486:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800248a:	8b12      	ldrh	r2, [r2, #24]
 800248c:	f042 0220 	orr.w	r2, r2, #32
 8002490:	b292      	uxth	r2, r2
 8002492:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8002494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002498:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800249c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024a4:	8b12      	ldrh	r2, [r2, #24]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024aa:	b292      	uxth	r2, r2
 80024ac:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 80024ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024be:	8b12      	ldrh	r2, [r2, #24]
 80024c0:	f042 0204 	orr.w	r2, r2, #4
 80024c4:	b292      	uxth	r2, r2
 80024c6:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 80024c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024d8:	8b12      	ldrh	r2, [r2, #24]
 80024da:	f042 0210 	orr.w	r2, r2, #16
 80024de:	b292      	uxth	r2, r2
 80024e0:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80024e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024f2:	8b12      	ldrh	r2, [r2, #24]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	b292      	uxth	r2, r2
 80024fa:	831a      	strh	r2, [r3, #24]
			break;	
 80024fc:	e2de      	b.n	8002abc <seg7_update+0xf50>
		case 11: //':'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 80024fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002502:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800250a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800250e:	8b52      	ldrh	r2, [r2, #26]
 8002510:	f042 0220 	orr.w	r2, r2, #32
 8002514:	b292      	uxth	r2, r2
 8002516:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8002518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800251c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002524:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002528:	8b52      	ldrh	r2, [r2, #26]
 800252a:	f042 0202 	orr.w	r2, r2, #2
 800252e:	b292      	uxth	r2, r2
 8002530:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002542:	8b12      	ldrh	r2, [r2, #24]
 8002544:	f042 0202 	orr.w	r2, r2, #2
 8002548:	b292      	uxth	r2, r2
 800254a:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 800254c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002558:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800255c:	8b12      	ldrh	r2, [r2, #24]
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b292      	uxth	r2, r2
 8002564:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800256e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002572:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002576:	8b12      	ldrh	r2, [r2, #24]
 8002578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257c:	b292      	uxth	r2, r2
 800257e:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8002580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002590:	8b12      	ldrh	r2, [r2, #24]
 8002592:	f042 0204 	orr.w	r2, r2, #4
 8002596:	b292      	uxth	r2, r2
 8002598:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 800259a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800259e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025aa:	8b12      	ldrh	r2, [r2, #24]
 80025ac:	f042 0210 	orr.w	r2, r2, #16
 80025b0:	b292      	uxth	r2, r2
 80025b2:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80025b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025c4:	8b12      	ldrh	r2, [r2, #24]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	b292      	uxth	r2, r2
 80025cc:	831a      	strh	r2, [r3, #24]
			break;	
 80025ce:	e275      	b.n	8002abc <seg7_update+0xf50>
		case 12: //'<degree>'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 80025d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025e0:	8b12      	ldrh	r2, [r2, #24]
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	b292      	uxth	r2, r2
 80025e8:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 80025ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025fa:	8b12      	ldrh	r2, [r2, #24]
 80025fc:	f042 0202 	orr.w	r2, r2, #2
 8002600:	b292      	uxth	r2, r2
 8002602:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002614:	8b52      	ldrh	r2, [r2, #26]
 8002616:	f042 0202 	orr.w	r2, r2, #2
 800261a:	b292      	uxth	r2, r2
 800261c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800262e:	8b12      	ldrh	r2, [r2, #24]
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b292      	uxth	r2, r2
 8002636:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8002638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002644:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002648:	8b12      	ldrh	r2, [r2, #24]
 800264a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264e:	b292      	uxth	r2, r2
 8002650:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8002652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002656:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800265a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800265e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002662:	8b12      	ldrh	r2, [r2, #24]
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	b292      	uxth	r2, r2
 800266a:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 800266c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002678:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800267c:	8b12      	ldrh	r2, [r2, #24]
 800267e:	f042 0210 	orr.w	r2, r2, #16
 8002682:	b292      	uxth	r2, r2
 8002684:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8002686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800268e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002692:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002696:	8b12      	ldrh	r2, [r2, #24]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	b292      	uxth	r2, r2
 800269e:	831a      	strh	r2, [r3, #24]
			break;	
 80026a0:	e20c      	b.n	8002abc <seg7_update+0xf50>
		case 13: //'<colon> and <degree>'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 80026a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026b2:	8b52      	ldrh	r2, [r2, #26]
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	b292      	uxth	r2, r2
 80026ba:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 80026bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026cc:	8b52      	ldrh	r2, [r2, #26]
 80026ce:	f042 0202 	orr.w	r2, r2, #2
 80026d2:	b292      	uxth	r2, r2
 80026d4:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026e6:	8b52      	ldrh	r2, [r2, #26]
 80026e8:	f042 0202 	orr.w	r2, r2, #2
 80026ec:	b292      	uxth	r2, r2
 80026ee:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 80026f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002700:	8b12      	ldrh	r2, [r2, #24]
 8002702:	f042 0220 	orr.w	r2, r2, #32
 8002706:	b292      	uxth	r2, r2
 8002708:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 800270a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002716:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800271a:	8b12      	ldrh	r2, [r2, #24]
 800271c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002720:	b292      	uxth	r2, r2
 8002722:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8002724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800272c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002730:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002734:	8b12      	ldrh	r2, [r2, #24]
 8002736:	f042 0204 	orr.w	r2, r2, #4
 800273a:	b292      	uxth	r2, r2
 800273c:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 800273e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002742:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800274a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800274e:	8b12      	ldrh	r2, [r2, #24]
 8002750:	f042 0210 	orr.w	r2, r2, #16
 8002754:	b292      	uxth	r2, r2
 8002756:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8002758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002764:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002768:	8b12      	ldrh	r2, [r2, #24]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	b292      	uxth	r2, r2
 8002770:	831a      	strh	r2, [r3, #24]
			break;		
 8002772:	e1a3      	b.n	8002abc <seg7_update+0xf50>
		case 14: //'E'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8002774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800277c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002780:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002784:	8b52      	ldrh	r2, [r2, #26]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b292      	uxth	r2, r2
 800278c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 800278e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002792:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800279e:	8b12      	ldrh	r2, [r2, #24]
 80027a0:	f042 0202 	orr.w	r2, r2, #2
 80027a4:	b292      	uxth	r2, r2
 80027a6:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027b8:	8b12      	ldrh	r2, [r2, #24]
 80027ba:	f042 0202 	orr.w	r2, r2, #2
 80027be:	b292      	uxth	r2, r2
 80027c0:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 80027c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027d2:	8b52      	ldrh	r2, [r2, #26]
 80027d4:	f042 0220 	orr.w	r2, r2, #32
 80027d8:	b292      	uxth	r2, r2
 80027da:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 80027dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027ec:	8b52      	ldrh	r2, [r2, #26]
 80027ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f2:	b292      	uxth	r2, r2
 80027f4:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 80027f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002802:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002806:	8b52      	ldrh	r2, [r2, #26]
 8002808:	f042 0204 	orr.w	r2, r2, #4
 800280c:	b292      	uxth	r2, r2
 800280e:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8002810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800281c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002820:	8b52      	ldrh	r2, [r2, #26]
 8002822:	f042 0210 	orr.w	r2, r2, #16
 8002826:	b292      	uxth	r2, r2
 8002828:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 800282a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002836:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800283a:	8b12      	ldrh	r2, [r2, #24]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	b292      	uxth	r2, r2
 8002842:	831a      	strh	r2, [r3, #24]
			break;		
 8002844:	e13a      	b.n	8002abc <seg7_update+0xf50>
		case 15: //'h'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 8002846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800284a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800284e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002852:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002856:	8b12      	ldrh	r2, [r2, #24]
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b292      	uxth	r2, r2
 800285e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8002860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002870:	8b12      	ldrh	r2, [r2, #24]
 8002872:	f042 0202 	orr.w	r2, r2, #2
 8002876:	b292      	uxth	r2, r2
 8002878:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800288a:	8b52      	ldrh	r2, [r2, #26]
 800288c:	f042 0202 	orr.w	r2, r2, #2
 8002890:	b292      	uxth	r2, r2
 8002892:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800289c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028a4:	8b12      	ldrh	r2, [r2, #24]
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	b292      	uxth	r2, r2
 80028ac:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 80028ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028be:	8b52      	ldrh	r2, [r2, #26]
 80028c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c4:	b292      	uxth	r2, r2
 80028c6:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 80028c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028d8:	8b52      	ldrh	r2, [r2, #26]
 80028da:	f042 0204 	orr.w	r2, r2, #4
 80028de:	b292      	uxth	r2, r2
 80028e0:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 80028e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80028f2:	8b52      	ldrh	r2, [r2, #26]
 80028f4:	f042 0210 	orr.w	r2, r2, #16
 80028f8:	b292      	uxth	r2, r2
 80028fa:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80028fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002900:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002908:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800290c:	8b12      	ldrh	r2, [r2, #24]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	b292      	uxth	r2, r2
 8002914:	831a      	strh	r2, [r3, #24]
			break;		
 8002916:	e0d1      	b.n	8002abc <seg7_update+0xf50>
		case 16: //'m'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 8002918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800291c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002924:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002928:	8b12      	ldrh	r2, [r2, #24]
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b292      	uxth	r2, r2
 8002930:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8002932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002936:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800293a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002942:	8b12      	ldrh	r2, [r2, #24]
 8002944:	f042 0202 	orr.w	r2, r2, #2
 8002948:	b292      	uxth	r2, r2
 800294a:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800295c:	8b52      	ldrh	r2, [r2, #26]
 800295e:	f042 0202 	orr.w	r2, r2, #2
 8002962:	b292      	uxth	r2, r2
 8002964:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8002966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800296e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002972:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002976:	8b12      	ldrh	r2, [r2, #24]
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	b292      	uxth	r2, r2
 800297e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8002980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002990:	8b52      	ldrh	r2, [r2, #26]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	b292      	uxth	r2, r2
 8002998:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 800299a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800299e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029aa:	8b12      	ldrh	r2, [r2, #24]
 80029ac:	f042 0204 	orr.w	r2, r2, #4
 80029b0:	b292      	uxth	r2, r2
 80029b2:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 80029b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029c4:	8b52      	ldrh	r2, [r2, #26]
 80029c6:	f042 0210 	orr.w	r2, r2, #16
 80029ca:	b292      	uxth	r2, r2
 80029cc:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80029ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029de:	8b12      	ldrh	r2, [r2, #24]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	b292      	uxth	r2, r2
 80029e6:	831a      	strh	r2, [r3, #24]
			break;	
 80029e8:	e068      	b.n	8002abc <seg7_update+0xf50>
		case 17: //'-'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 80029ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029fa:	8b12      	ldrh	r2, [r2, #24]
 80029fc:	f042 0220 	orr.w	r2, r2, #32
 8002a00:	b292      	uxth	r2, r2
 8002a02:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8002a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a14:	8b12      	ldrh	r2, [r2, #24]
 8002a16:	f042 0202 	orr.w	r2, r2, #2
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a2e:	8b12      	ldrh	r2, [r2, #24]
 8002a30:	f042 0202 	orr.w	r2, r2, #2
 8002a34:	b292      	uxth	r2, r2
 8002a36:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8002a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a48:	8b12      	ldrh	r2, [r2, #24]
 8002a4a:	f042 0220 	orr.w	r2, r2, #32
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8002a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a62:	8b12      	ldrh	r2, [r2, #24]
 8002a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8002a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a7c:	8b12      	ldrh	r2, [r2, #24]
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	b292      	uxth	r2, r2
 8002a84:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8002a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a96:	8b52      	ldrh	r2, [r2, #26]
 8002a98:	f042 0210 	orr.w	r2, r2, #16
 8002a9c:	b292      	uxth	r2, r2
 8002a9e:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8002aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ab0:	8b12      	ldrh	r2, [r2, #24]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	831a      	strh	r2, [r3, #24]
			break;		
 8002aba:	bf00      	nop
 
	}
	
	//clock cathode
	GPIOD->BSRRH |= (1ul << 2); //set CA_CLK (PD2) low
 8002abc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ac4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002ac8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002acc:	8b52      	ldrh	r2, [r2, #26]
 8002ace:	f042 0204 	orr.w	r2, r2, #4
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	835a      	strh	r2, [r3, #26]
	GPIOD->BSRRL |= (1ul << 2); //set CA_CLK (PD2) high
 8002ad6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ade:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002ae2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ae6:	8b12      	ldrh	r2, [r2, #24]
 8002ae8:	f042 0204 	orr.w	r2, r2, #4
 8002aec:	b292      	uxth	r2, r2
 8002aee:	831a      	strh	r2, [r3, #24]

	//disable anode driver
	GPIOB->BSRRL |= (1ul << 4); //set AN_EN (PB4) high b/c active low
 8002af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002afc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b00:	8b12      	ldrh	r2, [r2, #24]
 8002b02:	f042 0210 	orr.w	r2, r2, #16
 8002b06:	b292      	uxth	r2, r2
 8002b08:	831a      	strh	r2, [r3, #24]
	
	//set anode lines
	switch(digit) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	f200 81d9 	bhi.w	8002ec8 <seg7_update+0x135c>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <seg7_update+0xfb0>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b31 	.word	0x08002b31
 8002b20:	08002be9 	.word	0x08002be9
 8002b24:	08002ca1 	.word	0x08002ca1
 8002b28:	08002d59 	.word	0x08002d59
 8002b2c:	08002e11 	.word	0x08002e11
		case 1: //digit 1
			GPIOC->BSRRH |= (1ul << 2); //set DIGIT1 anode (PC2) low
 8002b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b40:	8b52      	ldrh	r2, [r2, #26]
 8002b42:	f042 0204 	orr.w	r2, r2, #4
 8002b46:	b292      	uxth	r2, r2
 8002b48:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b5a:	8b12      	ldrh	r2, [r2, #24]
 8002b5c:	f042 0202 	orr.w	r2, r2, #2
 8002b60:	b292      	uxth	r2, r2
 8002b62:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8002b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b74:	8b12      	ldrh	r2, [r2, #24]
 8002b76:	f042 0210 	orr.w	r2, r2, #16
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8002b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b8e:	8b12      	ldrh	r2, [r2, #24]
 8002b90:	f042 0202 	orr.w	r2, r2, #2
 8002b94:	b292      	uxth	r2, r2
 8002b96:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8002b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ba8:	8b12      	ldrh	r2, [r2, #24]
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8002bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002bc2:	8b12      	ldrh	r2, [r2, #24]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002bdc:	8b12      	ldrh	r2, [r2, #24]
 8002bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be2:	b292      	uxth	r2, r2
 8002be4:	831a      	strh	r2, [r3, #24]
			break;
 8002be6:	e16f      	b.n	8002ec8 <seg7_update+0x135c>
		case 2: //digit 2
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8002be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002bf8:	8b12      	ldrh	r2, [r2, #24]
 8002bfa:	f042 0204 	orr.w	r2, r2, #4
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set DIGIT2 anode (PA1) low
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c12:	8b52      	ldrh	r2, [r2, #26]
 8002c14:	f042 0202 	orr.w	r2, r2, #2
 8002c18:	b292      	uxth	r2, r2
 8002c1a:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8002c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c2c:	8b12      	ldrh	r2, [r2, #24]
 8002c2e:	f042 0210 	orr.w	r2, r2, #16
 8002c32:	b292      	uxth	r2, r2
 8002c34:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8002c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c46:	8b12      	ldrh	r2, [r2, #24]
 8002c48:	f042 0202 	orr.w	r2, r2, #2
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8002c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c60:	8b12      	ldrh	r2, [r2, #24]
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	b292      	uxth	r2, r2
 8002c68:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8002c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c7a:	8b12      	ldrh	r2, [r2, #24]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	b292      	uxth	r2, r2
 8002c82:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8002c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c94:	8b12      	ldrh	r2, [r2, #24]
 8002c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	831a      	strh	r2, [r3, #24]
			break;
 8002c9e:	e113      	b.n	8002ec8 <seg7_update+0x135c>
		case 3: //digit 3
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8002ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cb0:	8b12      	ldrh	r2, [r2, #24]
 8002cb2:	f042 0204 	orr.w	r2, r2, #4
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cca:	8b12      	ldrh	r2, [r2, #24]
 8002ccc:	f042 0202 	orr.w	r2, r2, #2
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set DIGIT3 anode (PC4) low
 8002cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ce4:	8b52      	ldrh	r2, [r2, #26]
 8002ce6:	f042 0210 	orr.w	r2, r2, #16
 8002cea:	b292      	uxth	r2, r2
 8002cec:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8002cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002cfe:	8b12      	ldrh	r2, [r2, #24]
 8002d00:	f042 0202 	orr.w	r2, r2, #2
 8002d04:	b292      	uxth	r2, r2
 8002d06:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8002d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d18:	8b12      	ldrh	r2, [r2, #24]
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8002d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d32:	8b12      	ldrh	r2, [r2, #24]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8002d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d4c:	8b12      	ldrh	r2, [r2, #24]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	b292      	uxth	r2, r2
 8002d54:	831a      	strh	r2, [r3, #24]
			break;
 8002d56:	e0b7      	b.n	8002ec8 <seg7_update+0x135c>
		case 4: //digit 4
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8002d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d68:	8b12      	ldrh	r2, [r2, #24]
 8002d6a:	f042 0204 	orr.w	r2, r2, #4
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d82:	8b12      	ldrh	r2, [r2, #24]
 8002d84:	f042 0202 	orr.w	r2, r2, #2
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8002d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d98:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002d9c:	8b12      	ldrh	r2, [r2, #24]
 8002d9e:	f042 0210 	orr.w	r2, r2, #16
 8002da2:	b292      	uxth	r2, r2
 8002da4:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 1); //set DIGIT4 anode (PB1) low
 8002da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002daa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002db6:	8b52      	ldrh	r2, [r2, #26]
 8002db8:	f042 0202 	orr.w	r2, r2, #2
 8002dbc:	b292      	uxth	r2, r2
 8002dbe:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8002dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002dd0:	8b12      	ldrh	r2, [r2, #24]
 8002dd2:	f042 0220 	orr.w	r2, r2, #32
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8002dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002dea:	8b12      	ldrh	r2, [r2, #24]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	b292      	uxth	r2, r2
 8002df2:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8002df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e04:	8b12      	ldrh	r2, [r2, #24]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	831a      	strh	r2, [r3, #24]
			break;
 8002e0e:	e05b      	b.n	8002ec8 <seg7_update+0x135c>
		case 5: //colon_degree
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8002e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e20:	8b12      	ldrh	r2, [r2, #24]
 8002e22:	f042 0204 	orr.w	r2, r2, #4
 8002e26:	b292      	uxth	r2, r2
 8002e28:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e3a:	8b12      	ldrh	r2, [r2, #24]
 8002e3c:	f042 0202 	orr.w	r2, r2, #2
 8002e40:	b292      	uxth	r2, r2
 8002e42:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8002e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e54:	8b12      	ldrh	r2, [r2, #24]
 8002e56:	f042 0210 	orr.w	r2, r2, #16
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8002e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e6e:	8b12      	ldrh	r2, [r2, #24]
 8002e70:	f042 0202 	orr.w	r2, r2, #2
 8002e74:	b292      	uxth	r2, r2
 8002e76:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 5); //set COLON  anode (PC5) low
 8002e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002e88:	8b52      	ldrh	r2, [r2, #26]
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ea2:	8b12      	ldrh	r2, [r2, #24]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8002eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ebc:	8b12      	ldrh	r2, [r2, #24]
 8002ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	831a      	strh	r2, [r3, #24]
			break;
 8002ec6:	bf00      	nop
}
	//clock anode driver
	GPIOC->BSRRH |= (1ul << 11); //set AN_CLK (PC11) low
 8002ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ecc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ed8:	8b52      	ldrh	r2, [r2, #26]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	835a      	strh	r2, [r3, #26]
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 8002ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ee6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ef2:	8b12      	ldrh	r2, [r2, #24]
 8002ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	831a      	strh	r2, [r3, #24]

	//enable anode driver
	GPIOB->BSRRH |= (1ul << 4); //set AN_EN (PB4) low b/c active low
 8002efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f08:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002f0c:	8b52      	ldrh	r2, [r2, #26]
 8002f0e:	f042 0210 	orr.w	r2, r2, #16
 8002f12:	b292      	uxth	r2, r2
 8002f14:	835a      	strh	r2, [r3, #26]
	
	//enable cathode driver
	GPIOC->BSRRH |= (1ul << 1); //set CA_EN (PC1) low b/c active low
 8002f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002f26:	8b52      	ldrh	r2, [r2, #26]
 8002f28:	f042 0202 	orr.w	r2, r2, #2
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	835a      	strh	r2, [r3, #26]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	f107 070c 	add.w	r7, r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <main>:

/*----------------------------------------------------------------------------
  MAIN function
 *----------------------------------------------------------------------------*/

int main (void) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
	//int num_int;
	
	//sub_uchar_from_quad_example();
	//num_int = atoi(num_char); //assum number between 0-9
	
  int32_t num = -1; 
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	60fb      	str	r3, [r7, #12]
  int32_t dir =  1;
 8002f48:	f04f 0301 	mov.w	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
  uint32_t btns = 0;
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	603b      	str	r3, [r7, #0]
	
	
	//asmLDR_examples();
	//asmSTR_examples();
 
  SystemCoreClock = 168000000; 	//!!found in system_stm32f4xx.c, added here instead of as global
 8002f54:	f240 23e0 	movw	r3, #736	; 0x2e0
 8002f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f5c:	f44f 42f4 	mov.w	r2, #31232	; 0x7a00
 8002f60:	f6c0 2203 	movt	r2, #2563	; 0xa03
 8002f64:	601a      	str	r2, [r3, #0]
							   //becaus we're trying to avoid need to have crt0.o

 
 
  SystemCoreClockUpdate();                      /* Get Core Clock Frequency   */
 8002f66:	f7fd fecf 	bl	8000d08 <SystemCoreClockUpdate>
  if (SysTick_Config(SystemCoreClock / 1000)) { /* SysTick 1 msec interrupts  */
 8002f6a:	f240 23e0 	movw	r3, #736	; 0x2e0
 8002f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8002f78:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8002f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f80:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd ff87 	bl	8000e98 <SysTick_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d000      	beq.n	8002f92 <main+0x56>
    while (1);                                  /* Capture error              */
 8002f90:	e7fe      	b.n	8002f90 <main+0x54>
  }
	SEG7_Init();
 8002f92:	f7fd fba3 	bl	80006dc <SEG7_Init>
	switch_init();
 8002f96:	f7fd f9ef 	bl	8000378 <switch_init>
  LED_Init();
 8002f9a:	f7fd fdf5 	bl	8000b88 <LED_Init>
  BTN_Init();    	
 8002f9e:	f7fe fca7 	bl	80018f0 <BTN_Init>
  int toggle=0;
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	607b      	str	r3, [r7, #4]
	
  while(1) {                                    // Loop forever 
		btns = BTN_Get();                           // Read button states       
 8002fa8:	f7fe fce4 	bl	8001974 <BTN_Get>
 8002fac:	6038      	str	r0, [r7, #0]

    if (btns != (1UL << 0)) {
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d03f      	beq.n	8003034 <main+0xf8>
      // Calculate 'num': 0,1,...,LED_NUM-1,LED_NUM-1,...,1,0,0,...
      num += dir;
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	60fb      	str	r3, [r7, #12]
      if (num == LED_NUM) { dir = -1; num =  LED_NUM-1; } 
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d106      	bne.n	8002fd0 <main+0x94>
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	f04f 0303 	mov.w	r3, #3
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e008      	b.n	8002fe2 <main+0xa6>
      else if   (num < 0) { dir =  1; num =  0;         }
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da05      	bge.n	8002fe2 <main+0xa6>
 8002fd6:	f04f 0301 	mov.w	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]

			if (toggle==0) {  	//LED and Delay in Assembly
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <main+0xd0>
				asmLED_ON (num);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7fd f896 	bl	800011a <asmLED_ON>
				MyasmDelay(50);
 8002fee:	f04f 0032 	mov.w	r0, #50	; 0x32
 8002ff2:	f7fd f886 	bl	8000102 <MyasmDelay>
				asmLED_OFF(num);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7fd f89b 	bl	8000132 <asmLED_OFF>
				MyasmDelay(100);
 8002ffc:	f04f 0064 	mov.w	r0, #100	; 0x64
 8003000:	f7fd f87f 	bl	8000102 <MyasmDelay>
				toggle=1;
 8003004:	f04f 0301 	mov.w	r3, #1
 8003008:	607b      	str	r3, [r7, #4]
    else {
      LED_Out (0x0F);
      Delay(10);                                // Delay 10ms
    }

  }
 800300a:	e7cd      	b.n	8002fa8 <main+0x6c>
				asmLED_OFF(num);
				MyasmDelay(100);
				toggle=1;
			}
			else {							//LED and Delay in C
				LED_On (num);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fe20 	bl	8000c54 <LED_On>
				Delay(50);
 8003014:	f04f 0032 	mov.w	r0, #50	; 0x32
 8003018:	f7fe fc4e 	bl	80018b8 <Delay>
				LED_Off(num);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fe32 	bl	8000c88 <LED_Off>
				Delay(100);
 8003024:	f04f 0064 	mov.w	r0, #100	; 0x64
 8003028:	f7fe fc46 	bl	80018b8 <Delay>
				toggle=0;
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
    else {
      LED_Out (0x0F);
      Delay(10);                                // Delay 10ms
    }

  }
 8003032:	e7b9      	b.n	8002fa8 <main+0x6c>
			}
			
			
    }
    else {
      LED_Out (0x0F);
 8003034:	f04f 000f 	mov.w	r0, #15
 8003038:	f7fd fe40 	bl	8000cbc <LED_Out>
      Delay(10);                                // Delay 10ms
 800303c:	f04f 000a 	mov.w	r0, #10
 8003040:	f7fe fc3a 	bl	80018b8 <Delay>
    }

  }
 8003044:	e7b0      	b.n	8002fa8 <main+0x6c>
 8003046:	bf00      	nop

08003048 <led_mask>:
 8003048:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......

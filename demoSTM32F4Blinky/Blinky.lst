
Blinky.axf:     file format elf32-littlearm


Disassembly of section .flash:

08000000 <Reset_Handler-0x40>:
 8000000:	20020000 	.word	0x20020000
 8000004:	08000041 	.word	0x08000041
 8000008:	080000a1 	.word	0x080000a1
 800000c:	080000a1 	.word	0x080000a1
 8000010:	080000a1 	.word	0x080000a1
 8000014:	080000a1 	.word	0x080000a1
 8000018:	080000a1 	.word	0x080000a1
	...
 800002c:	080000a1 	.word	0x080000a1
 8000030:	080000a1 	.word	0x080000a1
 8000034:	00000000 	.word	0x00000000
 8000038:	080000a1 	.word	0x080000a1
 800003c:	08000c29 	.word	0x08000c29

08000040 <Reset_Handler>:
	.thumb_func 			@; identify target type to linker
Reset_Handler:				@; @; start-from-reset code; initialize hardware and system data, launch main()
	@; copy .data section (initialized data) from flash to RAM (currently we must do this in each source file)
	@; (!!todo: figure out how we can get the compiler/asembler/linker to place constants in .rodata, etc)
copy_data:	
	ldr r1, DATA_BEG
 8000040:	4913      	ldr	r1, [pc, #76]	; (8000090 <DATA_BEG>)
	ldr r2, TEXT_END
 8000042:	4a12      	ldr	r2, [pc, #72]	; (800008c <TEXT_END>)
	ldr r3, DATA_END
 8000044:	4b13      	ldr	r3, [pc, #76]	; (8000094 <DATA_END>)
	subs r3, r3, r1			@; length of initialized data
 8000046:	1a5b      	subs	r3, r3, r1
	beq zero_bss			@; skip if none
 8000048:	f000 8007 	beq.w	800005a <zero_bss>

0800004c <copy_data_loop>:
copy_data_loop: 
	ldrb r4,[r2], #1		@; read byte from flash
 800004c:	f812 4b01 	ldrb.w	r4, [r2], #1
	strb r4, [r1], #1  		@; store byte to RAM
 8000050:	f801 4b01 	strb.w	r4, [r1], #1
	subs r3, r3, #1  		@; decrement counter
 8000054:	3b01      	subs	r3, #1
	bgt copy_data_loop		@; repeat until done
 8000056:	f73f aff9 	bgt.w	800004c <copy_data_loop>

0800005a <zero_bss>:

	@; zero out .bss section (uninitialized data) (currently we must do this in each source file)
	@; (!!todo: figure out how to get the linker to give us the extents of the merged .bss sections)
zero_bss: 	
	ldr r1, BSS_BEG
 800005a:	490f      	ldr	r1, [pc, #60]	; (8000098 <BSS_BEG>)
	ldr r3, BSS_END
 800005c:	4b0f      	ldr	r3, [pc, #60]	; (800009c <BSS_END>)
	subs r3, r3, r1			@; Length of uninitialized data
 800005e:	1a5b      	subs	r3, r3, r1
	beq initPLL				@; Skip if none
 8000060:	f000 8007 	beq.w	8000072 <initPLL>
	mov r2, #0				@; value to initialize .bss with
 8000064:	f04f 0200 	mov.w	r2, #0

08000068 <zero_bss_loop>:
zero_bss_loop: 	
	strb r2, [r1],#1		@; Store zero
 8000068:	f801 2b01 	strb.w	r2, [r1], #1
	subs r3, r3, #1			@; Decrement counter
 800006c:	3b01      	subs	r3, #1
	bgt zero_bss_loop		@; Repeat until done
 800006e:	f73f affb 	bgt.w	8000068 <zero_bss_loop>

08000072 <initPLL>:
	@; necessary hardware stuff (todo: crib from disassembly of Keil initPLL.c)
	initPLL:	@; !!todo -- fix this!				
				@; put code here to set up PLL 
	
	
	bl CortexM4asmOps_init	@; do some asm and C variable inits 'by hand'	
 8000072:	f000 f81e 	bl	80000b2 <CortexM4asmOps_init>
	bl asmSTR_examples		@; fill this function in for homework
 8000076:	f000 f833 	bl	80000e0 <asmSTR_examples>
	bl asmLDR_examples		@; fill this function in for homework	
 800007a:	f000 f830 	bl	80000de <asmLDR_examples>

0800007e <call_main>:

	@;here with everything set up and ready to go
	
	@exit to main (wont return)
call_main:	
	mov	r0, #0				@; argc=0
 800007e:	f04f 0000 	mov.w	r0, #0
	mov r1, #0				@; argv=NULL
 8000082:	f04f 0100 	mov.w	r1, #0
	bl	main 				@; gone
 8000086:	f002 f939 	bl	80022fc <main>
	b .						@; trap if return
 800008a:	e7fe      	b.n	800008a <call_main+0xc>

0800008c <TEXT_END>:
 800008c:	08002420 	.word	0x08002420

08000090 <DATA_BEG>:
 8000090:	20000000 	.word	0x20000000

08000094 <DATA_END>:
 8000094:	20000030 	.word	0x20000030

08000098 <BSS_BEG>:
 8000098:	20000030 	.word	0x20000030

0800009c <BSS_END>:
 800009c:	20000140 	.word	0x20000140

080000a0 <BusFault_Handler>:
DebugMon_Handler:
	.thumb_func
PendSV_Handler:
@;	.thumb_func
@;SysTick_Handler:
	bx  r14	 /* put a breakpoint here when we're debugging so we can trap here but then return to interrupted code */
 80000a0:	4770      	bx	lr
	...

080000a4 <testmacro>:
	.text						@;start the code section

	.global testmacro
	.thumb_func
testmacro:
	bitbandload r0 0x00010000 21
 80000a4:	48cb      	ldr	r0, [pc, #812]	; (80003d4 <ROMdata+0x100>)
 80000a6:	e7fd      	b.n	80000a4 <testmacro>
	bitbandload r1 0x00010000 22
 80000a8:	49cb      	ldr	r1, [pc, #812]	; (80003d8 <ROMdata+0x104>)
 80000aa:	e7fd      	b.n	80000a8 <testmacro+0x4>
	bitbandload r2 0x00010000 23	
 80000ac:	4acb      	ldr	r2, [pc, #812]	; (80003dc <ROMdata+0x108>)
 80000ae:	e7fd      	b.n	80000ac <testmacro+0x8>
	bx lr
 80000b0:	4770      	bx	lr

080000b2 <CortexM4asmOps_init>:
	
	.global CortexM4asmOps_init @; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
CortexM4asmOps_init: @; initialize variables defined in this sourcefile
	@; initialize globals in .data
	ldr r0,=0xFFFFFFFF			@; initialize 'Dint'
 80000b2:	48cb      	ldr	r0, [pc, #812]	; (80003e0 <ROMdata+0x10c>)
	ldr r1,=Dint
 80000b4:	49cb      	ldr	r1, [pc, #812]	; (80003e4 <ROMdata+0x110>)
	str r0,[r1]
 80000b6:	6008      	str	r0, [r1, #0]
	movw r0,#0xABCD				@;  initialize 'Dshort'
 80000b8:	f64a 30cd 	movw	r0, #43981	; 0xabcd
	ldr r1,=Dshort
 80000bc:	49ca      	ldr	r1, [pc, #808]	; (80003e8 <ROMdata+0x114>)
	strh r0,[r1]
 80000be:	8008      	strh	r0, [r1, #0]
	mov r0,#0x55				@;  initialize 'Dchar'
 80000c0:	f04f 0055 	mov.w	r0, #85	; 0x55
	ldr r1,=Dchar
 80000c4:	49c9      	ldr	r1, [pc, #804]	; (80003ec <ROMdata+0x118>)
	strb r0,[r1]
 80000c6:	7008      	strb	r0, [r1, #0]
	@; initialize .bss
	ldr r1,=local_bss_begin		
 80000c8:	49c9      	ldr	r1, [pc, #804]	; (80003f0 <ROMdata+0x11c>)
	ldr r3,=local_bss_end
 80000ca:	4bca      	ldr	r3, [pc, #808]	; (80003f4 <ROMdata+0x120>)
	subs r3, r3, r1			@; length of uninitialized local .bss data section
 80000cc:	1a5b      	subs	r3, r3, r1
	beq 2f					@; Skip if none
 80000ce:	d005      	beq.n	80000dc <CortexM4asmOps_init+0x2a>
	mov r2, #0				@; value to initialize .bss with
 80000d0:	f04f 0200 	mov.w	r2, #0
1: 	@;!!local label which I can 'b 1b' branch backward to. Oooo, delicious. 
	strb r2, [r1],#1		@; Store zero
 80000d4:	f801 2b01 	strb.w	r2, [r1], #1
	subs r3, r3, #1			@; Decrement counter
 80000d8:	3b01      	subs	r3, #1
	bgt 1b					@; Repeat until done
 80000da:	dcfb      	bgt.n	80000d4 <CortexM4asmOps_init+0x22>
2:  @;!!local label which I can 'b 1f' branch forward to. 
	BX LR
 80000dc:	4770      	bx	lr

080000de <asmLDR_examples>:
	.thumb_func				@;specify that the function (defined below) uses thumb opcodes
asmLDR_examples:			@;examples using different LDR addressing and decoration 

	@;your code goes here

	bx lr					@; return to the caller
 80000de:	4770      	bx	lr

080000e0 <asmSTR_examples>:
	.thumb_func				@;specify that the function (defined below) uses thumb opcodes
asmSTR_examples:			@;examples using different LDR addressing and decoration 

	@;your code goes here

	bx lr					@; return to the caller
 80000e0:	4770      	bx	lr

080000e2 <CortexM4asmOps_test1>:
	.global CortexM4asmOps_test1 	@; make this function visible everywhere
	.thumb_func						@; make sure it starts in thumb mode
CortexM4asmOps_test1: 	@; asm function which decrements Cint by 2, increments Gint by 2, and shifts Dint left by 2	
	@;subtract 2 from Cint
	.extern Cint		@; tell linker where to look for Cint
	ldr r0,=Cint		@; point to Cint		
 80000e2:	48c5      	ldr	r0, [pc, #788]	; (80003f8 <ROMdata+0x124>)
	ldr r1,[r0]			@; and get its current value
 80000e4:	6801      	ldr	r1, [r0, #0]
	sub r1,r1,#2		@;	and subtract 2
 80000e6:	f1a1 0102 	sub.w	r1, r1, #2
	str r1,[r0]			@;    then put it back
 80000ea:	6001      	str	r1, [r0, #0]

	@;add 2 to Gint
	.extern Gint		@; tell linker where to look for Gint
	ldr r0,=Gint		@; point to Gint		
 80000ec:	48c3      	ldr	r0, [pc, #780]	; (80003fc <ROMdata+0x128>)
	ldr r1,[r0]			@; and get its current value
 80000ee:	6801      	ldr	r1, [r0, #0]
	add r1,r1,#2		@;	and add 2
 80000f0:	f101 0102 	add.w	r1, r1, #2
	str r1,[r0]			@;    then put it back
 80000f4:	6001      	str	r1, [r0, #0]

	@;shift Dint left
	.extern Dint		@; tell linker where to look for Dint
	ldr r0,=Dint		@; point to Dint		
 80000f6:	48bb      	ldr	r0, [pc, #748]	; (80003e4 <ROMdata+0x110>)
	ldr r1,[r0]			@; and get its current value shifted left by 2
 80000f8:	6801      	ldr	r1, [r0, #0]
	lsr r1,r1,#1		@;  shift it left 1 bits
 80000fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
	str r1,[r0]			@;    then put it back
 80000fe:	6001      	str	r1, [r0, #0]
	
	bx lr				@;return to the caller
 8000100:	4770      	bx	lr

08000102 <bin2bcd_asm>:

	.global bin2bcd_asm
	.thumb_func
bin2bcd_asm:
	@; r0 is binary
	movw 	r1, #0 			@; r1 is ones
 8000102:	f240 0100 	movw	r1, #0
	movw 	r2, #0	 		@; r2 is tens
 8000106:	f240 0200 	movw	r2, #0
	movw 	r3, #0	 	@; r3 is hundreds
 800010a:	f240 0300 	movw	r3, #0
	movw 	r4, #0 			@; r4 is thousands
 800010e:	f240 0400 	movw	r4, #0
	movw	r5, #15			@; r5 is index, i=15
 8000112:	f240 050f 	movw	r5, #15
	movw	r6, #0			@; r6 is temp
 8000116:	f240 0600 	movw	r6, #0
	movw	r7, #0			@; r7 is temp2
 800011a:	f240 0700 	movw	r7, #0

0800011e <loop>:
	
loop:
	@; add 3 to columns >= 5
	cmp 	r4, #5			@; thousands
 800011e:	2c05      	cmp	r4, #5
	it 		ge
 8000120:	bfa8      	it	ge
	addge 	r4, #3
 8000122:	3403      	addge	r4, #3
	cmp 	r3, #5			@; hundreds
 8000124:	2b05      	cmp	r3, #5
	it 		ge
 8000126:	bfa8      	it	ge
	addge 	r3, #3
 8000128:	3303      	addge	r3, #3
	cmp 	r2, #5			@; tens
 800012a:	2a05      	cmp	r2, #5
	it 		ge
 800012c:	bfa8      	it	ge
	addge 	r2, #3
 800012e:	3203      	addge	r2, #3
	cmp 	r1, #5			@; ones
 8000130:	2905      	cmp	r1, #5
	it 		ge
 8000132:	bfa8      	it	ge
	addge 	r1, #3
 8000134:	3103      	addge	r1, #3
	
	@; shift left one
	lsl 	r4, #1			@; thousands << 1
 8000136:	ea4f 0444 	mov.w	r4, r4, lsl #1
	and		r6, r3, #0x08	@; thousands[0] = hundreds[3]
 800013a:	f003 0608 	and.w	r6, r3, #8
	lsr		r6, #3
 800013e:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	add		r4, r6
 8000142:	4434      	add	r4, r6
	lsl 	r3, #1			@; hundreds << 1
 8000144:	ea4f 0343 	mov.w	r3, r3, lsl #1
	and		r6, r2, #0x08	@; hundreds[0] = tens[3]
 8000148:	f002 0608 	and.w	r6, r2, #8
	lsr		r6, #3
 800014c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	add		r3, r6
 8000150:	4433      	add	r3, r6
	lsl 	r2, #1			@; tens << 1
 8000152:	ea4f 0242 	mov.w	r2, r2, lsl #1
	and		r6, r1, #0x08	@; tens[0] = ones[3]
 8000156:	f001 0608 	and.w	r6, r1, #8
	lsr		r6, #3
 800015a:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	add		r2, r6
 800015e:	4432      	add	r2, r6
	
	lsl 	r1, #1			@; ones << 1
 8000160:	ea4f 0141 	mov.w	r1, r1, lsl #1
	movw	r7, #1			@; r7 = 1ul << i
 8000164:	f240 0701 	movw	r7, #1
	lsl		r7, r5			
 8000168:	fa07 f705 	lsl.w	r7, r7, r5
	and		r6, r0, r7		@; ones[0] = binary[i]
 800016c:	ea00 0607 	and.w	r6, r0, r7
	lsr		r6, r5
 8000170:	fa26 f605 	lsr.w	r6, r6, r5
	add		r1, r6
 8000174:	4431      	add	r1, r6
	
	@; pretend data type is a nibble
	and 	r4, #0x0F		@; thousands
 8000176:	f004 040f 	and.w	r4, r4, #15
	and 	r3, #0x0F		@; hundreds
 800017a:	f003 030f 	and.w	r3, r3, #15
	and 	r2, #0x0F		@; tens
 800017e:	f002 020f 	and.w	r2, r2, #15
	and 	r1, #0x0F		@; ones
 8000182:	f001 010f 	and.w	r1, r1, #15
	
	@; check loop condition
	sub		r5, #1
 8000186:	f1a5 0501 	sub.w	r5, r5, #1
	cmp 	r5, #0
 800018a:	2d00      	cmp	r5, #0
	bge		loop
 800018c:	f6bf afc7 	bge.w	800011e <loop>
	
	@; return
	bx lr
 8000190:	4770      	bx	lr

08000192 <MyasmDelay>:


	.global MyasmDelay 			@; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
MyasmDelay:						@; short software delay
	MOVW    R3, #0x0F88		    @; r3=0x00000F88
 8000192:	f640 7388 	movw	r3, #3976	; 0xf88
	MOVT    R3, #0x0000			@; ..
 8000196:	f2c0 0300 	movt	r3, #0
	MUL 	R3, R0;
 800019a:	fb00 f303 	mul.w	r3, r0, r3

0800019e <delay_loop>:
delay_loop:						@; repeat here
	CBZ     R3, delay_exit		@; r3 == 0?
 800019e:	b11b      	cbz	r3, 80001a8 <delay_exit>
	SUB     R3, R3, #1			@; 	no --
 80001a0:	f1a3 0301 	sub.w	r3, r3, #1
	B       delay_loop			@;	  continue 
 80001a4:	f7ff bffb 	b.w	800019e <delay_loop>

080001a8 <delay_exit>:
delay_exit:						@;  yes --
	BX      LR					@;    return to caller
 80001a8:	4770      	bx	lr

080001aa <asmLED_ON>:

	.global asmLED_ON 			@; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
asmLED_ON: 						@; turn on LED
	MOVW 	r1, #0x1000			@; r1=UL1<<12, UL1=000....001
 80001aa:	f241 0100 	movw	r1, #4096	; 0x1000
	MOVT 	r1, #0x0000	
 80001ae:	f2c0 0100 	movt	r1, #0
	LSL		r1, r1, r0			@; r1<<r0
 80001b2:	fa01 f100 	lsl.w	r1, r1, r0
	MOVW	r2, #0x0C18			@; r2=0x40020C18
 80001b6:	f640 4218 	movw	r2, #3096	; 0xc18
	MOVT 	r2, #0x4002			
 80001ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
	STR		r1, [r2]
 80001be:	6011      	str	r1, [r2, #0]
	BX LR
 80001c0:	4770      	bx	lr

080001c2 <asmLED_OFF>:
	
	.global asmLED_OFF 			@; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
asmLED_OFF: 					@; turn off LED
	MOVW 	r1, #0x1000			@; r1=UL1<<12, UL1=000....001
 80001c2:	f241 0100 	movw	r1, #4096	; 0x1000
	MOVT 	r1, #0x0000	
 80001c6:	f2c0 0100 	movt	r1, #0
	LSL		r1, r1, r0			@; r1<<r0
 80001ca:	fa01 f100 	lsl.w	r1, r1, r0
	MOVW	r2, #0x0C1A			@; r2=0x40020C1A
 80001ce:	f640 421a 	movw	r2, #3098	; 0xc1a
	MOVT 	r2, #0x4002			
 80001d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
	STR		r1, [r2]
 80001d6:	6011      	str	r1, [r2, #0]
	BX LR
 80001d8:	4770      	bx	lr

080001da <sub_uchar_from_quad_asm>:
	.global sub_uchar_from_quad_asm
	.thumb_func
sub_uchar_from_quad_asm:

@; load registers
	ldr 	r3, [r1,#0]
 80001da:	680b      	ldr	r3, [r1, #0]
	ldr 	r4, [r1,#4]
 80001dc:	684c      	ldr	r4, [r1, #4]
	ldr 	r5, [r1,#8]
 80001de:	688d      	ldr	r5, [r1, #8]
	ldr 	r6, [r1,#12]
 80001e0:	68ce      	ldr	r6, [r1, #12]
	
@; store initial sign bit
	mov r8, r3
 80001e2:	4698      	mov	r8, r3
	lsr r8, #31
 80001e4:	ea4f 78d8 	mov.w	r8, r8, lsr #31
	
@; subtract and propogate carry
	subs 	r6, r2
 80001e8:	1ab6      	subs	r6, r6, r2
	sbcs 	r5, #0
 80001ea:	f175 0500 	sbcs.w	r5, r5, #0
	sbcs 	r4, #0
 80001ee:	f174 0400 	sbcs.w	r4, r4, #0
	sbc 	r3, #0
 80001f2:	f163 0300 	sbc.w	r3, r3, #0

@; check if negative overflow occured
	mov 	r9, r3
 80001f6:	4699      	mov	r9, r3
	lsr 	r9, #31
 80001f8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
	cmp 	r9, r8
 80001fc:	45c1      	cmp	r9, r8
	blt 	overflow_case
 80001fe:	f2c0 8002 	blt.w	8000206 <overflow_case>
	b 		store_values
 8000202:	f000 b805 	b.w	8000210 <store_values>

08000206 <overflow_case>:
	
overflow_case:
@; return -1 if overflow
	movw	r0, 0xfffe
 8000206:	f64f 70fe 	movw	r0, #65534	; 0xfffe
	movt	r0, 0xffff
 800020a:	f6cf 70ff 	movt	r0, #65535	; 0xffff
@; return
	bx lr
 800020e:	4770      	bx	lr

08000210 <store_values>:

store_values:
@; store values to RAM destination 
	str		r3, [r0, #0]
 8000210:	6003      	str	r3, [r0, #0]
	str		r4, [r0, #4]
 8000212:	6044      	str	r4, [r0, #4]
	str		r5, [r0, #8]
 8000214:	6085      	str	r5, [r0, #8]
	str		r6, [r0, #12]
 8000216:	60c6      	str	r6, [r0, #12]
@; return
	bx		lr
 8000218:	4770      	bx	lr

0800021a <test_update_mask32>:


	.global test_update_mask32
	.thumb_func
test_update_mask32:
	ldr r0, =mask32			@; load mask address
 800021a:	4879      	ldr	r0, [pc, #484]	; (8000400 <ROMdata+0x12c>)
	movw r1, #0x0005		@; set value to be or'd with existing mask
 800021c:	f240 0105 	movw	r1, #5
	movt r1, #0x0000
 8000220:	f2c0 0100 	movt	r1, #0
	update_mask32 r0 r1	
 8000224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000228:	466f      	mov	r7, sp
 800022a:	6802      	ldr	r2, [r0, #0]
 800022c:	ea42 0201 	orr.w	r2, r2, r1
 8000230:	6002      	str	r2, [r0, #0]
 8000232:	46bd      	mov	sp, r7
 8000234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ldr r3, [r0]			@; check to see if mask got updated correctly
 8000238:	6803      	ldr	r3, [r0, #0]
	bx lr
 800023a:	4770      	bx	lr

0800023c <test_op>:

	.global test_op
	.thumb_func
test_op:
	ldr r0, =mask32 @; address of label goes into r0
 800023c:	4870      	ldr	r0, [pc, #448]	; (8000400 <ROMdata+0x12c>)
	ldr r1, [r0]
 800023e:	6801      	ldr	r1, [r0, #0]
	bx lr
 8000240:	4770      	bx	lr

08000242 <atoi>:
	
	.global atoi
	.thumb_func
atoi:
	movw r4, #0		@; pointer offset
 8000242:	f240 0400 	movw	r4, #0
	movt r4, #0
 8000246:	f2c0 0400 	movt	r4, #0
	movw r10, #10 	@; r10 = const 10
 800024a:	f240 0a0a 	movw	sl, #10
	movt r10, #0
 800024e:	f2c0 0a00 	movt	sl, #0
	movw r9, #1 	@; place holder multiplier
 8000252:	f240 0901 	movw	r9, #1
	movt r9, #0
 8000256:	f2c0 0900 	movt	r9, #0
	movw r11, #0 	@; accumulator
 800025a:	f240 0b00 	movw	fp, #0
	movt r11, #0
 800025e:	f2c0 0b00 	movt	fp, #0
	movw r7, #0		@; negative flag
 8000262:	f240 0700 	movw	r7, #0
	movt r7, #0		
 8000266:	f2c0 0700 	movt	r7, #0

0800026a <check_negative>:

check_negative:
	ldrb r5, [r0,r4] 		@; load in first byte
 800026a:	5d05      	ldrb	r5, [r0, r4]
	cmp r5, #0x2D
 800026c:	2d2d      	cmp	r5, #45	; 0x2d
	itt eq
 800026e:	bf04      	itt	eq
	addeq r7, #1			@; set negative flag
 8000270:	3701      	addeq	r7, #1
	addeq r0, #1			@; increment pointer start by 1 byte
 8000272:	3001      	addeq	r0, #1

08000274 <str_length>:
	
str_length:
	ldrb r5, [r0,r4] 		@; load in next byte
 8000274:	5d05      	ldrb	r5, [r0, r4]
	add r4,	#1				@; increment pointer offset by 1 byte
 8000276:	f104 0401 	add.w	r4, r4, #1
	cmp r5, #0
 800027a:	2d00      	cmp	r5, #0
	bne	str_length
 800027c:	f47f affa 	bne.w	8000274 <str_length>
	sub r4, #2
 8000280:	f1a4 0402 	sub.w	r4, r4, #2

08000284 <update_accumulator>:
	
update_accumulator:	
	ldrb r5, [r0,r4] 		@; load in next byte
 8000284:	5d05      	ldrb	r5, [r0, r4]
	sub r5, #0x30	 		@; convert ascii to decimal digit
 8000286:	f1a5 0530 	sub.w	r5, r5, #48	; 0x30
	mla r11, r5, r9, r11	@; acc += decimal digit * place holder multiplier
 800028a:	fb05 bb09 	mla	fp, r5, r9, fp
	
	mul r9, r10				@; place holder multiplier *= 10
 800028e:	fb0a f909 	mul.w	r9, sl, r9
	sub r4, #1				@; decrement pointer offsey by 1 byte
 8000292:	f1a4 0401 	sub.w	r4, r4, #1
	
	cmp r4, #0
 8000296:	2c00      	cmp	r4, #0
	bge update_accumulator
 8000298:	f6bf aff4 	bge.w	8000284 <update_accumulator>

0800029c <update_sign>:

update_sign:
	cmp r7, #1
 800029c:	2f01      	cmp	r7, #1
	it eq
 800029e:	bf08      	it	eq
	rsbeq r11, #0 
 80002a0:	f1cb 0b00 	rsbeq	fp, fp, #0
	
bx lr
 80002a4:	4770      	bx	lr

080002a6 <doJump>:


	.global doJump
	.thumb_func
doJump:	@;jump to address stored in table
	ldr R1,=dothings
 80002a6:	4957      	ldr	r1, [pc, #348]	; (8000404 <ROMdata+0x130>)
	lsl R0,R0,#2
 80002a8:	ea4f 0080 	mov.w	r0, r0, lsl #2
	add R0,R0,R1
 80002ac:	4408      	add	r0, r1
	orr R0,R0,#1
 80002ae:	f040 0001 	orr.w	r0, r0, #1
	bx  R0
 80002b2:	4700      	bx	r0

080002b4 <do0>:
 80002b4:	080002d1 	.word	0x080002d1

080002b8 <do1>:
 80002b8:	080002cd 	.word	0x080002cd

080002bc <do2>:
 80002bc:	080002c9 	.word	0x080002c9

080002c0 <do3>:
 80002c0:	080002c5 	.word	0x080002c5

080002c4 <fn3>:
do2:	.word fn2
do3:	.word fn3

	.thumb_func
fn3: 
	nop
 80002c4:	bf00      	nop
	bx LR
 80002c6:	4770      	bx	lr

080002c8 <fn2>:
	.thumb_func
fn2: 
	nop
 80002c8:	bf00      	nop
	bx LR
 80002ca:	4770      	bx	lr

080002cc <fn1>:
	.thumb_func
fn1: 
	nop
 80002cc:	bf00      	nop
	bx LR
 80002ce:	4770      	bx	lr

080002d0 <fn0>:
	.thumb_func
fn0:
	nop
 80002d0:	bf00      	nop
	bx LR
 80002d2:	4770      	bx	lr

080002d4 <ROMdata>:
 80002d4:	03020100 	.word	0x03020100
 80002d8:	07060504 	.word	0x07060504
 80002dc:	0b0a0908 	.word	0x0b0a0908
 80002e0:	0f0e0d0c 	.word	0x0f0e0d0c
 80002e4:	13121110 	.word	0x13121110
 80002e8:	17161514 	.word	0x17161514
 80002ec:	1b1a1918 	.word	0x1b1a1918
 80002f0:	1f1e1d1c 	.word	0x1f1e1d1c
 80002f4:	23222120 	.word	0x23222120
 80002f8:	27262524 	.word	0x27262524
 80002fc:	2b2a2928 	.word	0x2b2a2928
 8000300:	2f2e2d2c 	.word	0x2f2e2d2c
 8000304:	33323130 	.word	0x33323130
 8000308:	37363534 	.word	0x37363534
 800030c:	3b3a3938 	.word	0x3b3a3938
 8000310:	3f3e3d3c 	.word	0x3f3e3d3c
 8000314:	43424140 	.word	0x43424140
 8000318:	47464544 	.word	0x47464544
 800031c:	4b4a4948 	.word	0x4b4a4948
 8000320:	4f4e4d4c 	.word	0x4f4e4d4c
 8000324:	53525150 	.word	0x53525150
 8000328:	57565554 	.word	0x57565554
 800032c:	5b5a5958 	.word	0x5b5a5958
 8000330:	5f5e5d5c 	.word	0x5f5e5d5c
 8000334:	63626160 	.word	0x63626160
 8000338:	67666564 	.word	0x67666564
 800033c:	6b6a6968 	.word	0x6b6a6968
 8000340:	6f6e6d6c 	.word	0x6f6e6d6c
 8000344:	73727170 	.word	0x73727170
 8000348:	77767574 	.word	0x77767574
 800034c:	7b7a7978 	.word	0x7b7a7978
 8000350:	7f7e7d7c 	.word	0x7f7e7d7c
 8000354:	83828180 	.word	0x83828180
 8000358:	87868584 	.word	0x87868584
 800035c:	8b8a8988 	.word	0x8b8a8988
 8000360:	8f8e8d8c 	.word	0x8f8e8d8c
 8000364:	93929190 	.word	0x93929190
 8000368:	97969594 	.word	0x97969594
 800036c:	9b9a9998 	.word	0x9b9a9998
 8000370:	9f9e9d9c 	.word	0x9f9e9d9c
 8000374:	a3a2a1a0 	.word	0xa3a2a1a0
 8000378:	a7a6a5a4 	.word	0xa7a6a5a4
 800037c:	abaaa9a8 	.word	0xabaaa9a8
 8000380:	afaeadac 	.word	0xafaeadac
 8000384:	b3b2b1b0 	.word	0xb3b2b1b0
 8000388:	b7b6b5b4 	.word	0xb7b6b5b4
 800038c:	bbbab9b8 	.word	0xbbbab9b8
 8000390:	bfbebdbc 	.word	0xbfbebdbc
 8000394:	c3c2c1c0 	.word	0xc3c2c1c0
 8000398:	c7c6c5c4 	.word	0xc7c6c5c4
 800039c:	cbcac9c8 	.word	0xcbcac9c8
 80003a0:	cfcecdcc 	.word	0xcfcecdcc
 80003a4:	d3d2d1d0 	.word	0xd3d2d1d0
 80003a8:	d7d6d5d4 	.word	0xd7d6d5d4
 80003ac:	dbdad9d8 	.word	0xdbdad9d8
 80003b0:	dfdedddc 	.word	0xdfdedddc
 80003b4:	e3e2e1e0 	.word	0xe3e2e1e0
 80003b8:	e7e6e5e4 	.word	0xe7e6e5e4
 80003bc:	ebeae9e8 	.word	0xebeae9e8
 80003c0:	efeeedec 	.word	0xefeeedec
 80003c4:	f3f2f1f0 	.word	0xf3f2f1f0
 80003c8:	f7f6f5f4 	.word	0xf7f6f5f4
 80003cc:	fbfaf9f8 	.word	0xfbfaf9f8
 80003d0:	fffefdfc 	.word	0xfffefdfc
	.text						@;start the code section

	.global testmacro
	.thumb_func
testmacro:
	bitbandload r0 0x00010000 21
 80003d4:	02200054 	.word	0x02200054
	bitbandload r1 0x00010000 22
 80003d8:	02200058 	.word	0x02200058
	bitbandload r2 0x00010000 23	
 80003dc:	0220005c 	.word	0x0220005c
	
	.global CortexM4asmOps_init @; make this function visible everywhere
	.thumb_func					@; make sure it starts in thumb mode
CortexM4asmOps_init: @; initialize variables defined in this sourcefile
	@; initialize globals in .data
	ldr r0,=0xFFFFFFFF			@; initialize 'Dint'
 80003e0:	ffffffff 	.word	0xffffffff
	ldr r1,=Dint
 80003e4:	20000000 	.word	0x20000000
	str r0,[r1]
	movw r0,#0xABCD				@;  initialize 'Dshort'
	ldr r1,=Dshort
 80003e8:	20000004 	.word	0x20000004
	strh r0,[r1]
	mov r0,#0x55				@;  initialize 'Dchar'
	ldr r1,=Dchar
 80003ec:	20000006 	.word	0x20000006
	strb r0,[r1]
	@; initialize .bss
	ldr r1,=local_bss_begin		
 80003f0:	20000030 	.word	0x20000030
	ldr r3,=local_bss_end
 80003f4:	20000030 	.word	0x20000030
	.global CortexM4asmOps_test1 	@; make this function visible everywhere
	.thumb_func						@; make sure it starts in thumb mode
CortexM4asmOps_test1: 	@; asm function which decrements Cint by 2, increments Gint by 2, and shifts Dint left by 2	
	@;subtract 2 from Cint
	.extern Cint		@; tell linker where to look for Cint
	ldr r0,=Cint		@; point to Cint		
 80003f8:	20000254 	.word	0x20000254
	sub r1,r1,#2		@;	and subtract 2
	str r1,[r0]			@;    then put it back

	@;add 2 to Gint
	.extern Gint		@; tell linker where to look for Gint
	ldr r0,=Gint		@; point to Gint		
 80003fc:	20000144 	.word	0x20000144


	.global test_update_mask32
	.thumb_func
test_update_mask32:
	ldr r0, =mask32			@; load mask address
 8000400:	20000007 	.word	0x20000007


	.global doJump
	.thumb_func
doJump:	@;jump to address stored in table
	ldr R1,=dothings
 8000404:	080002b4 	.word	0x080002b4

08000408 <SEG7_Init>:


/*----------------------------------------------------------------------------
  Initialize 7-Segments Display Pins
 *----------------------------------------------------------------------------*/
void SEG7_Init() {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR  |= ((1UL <<  0) );         /* Enable GPIOA clock                */
 800040c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000410:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000414:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000418:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800041c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800041e:	f042 0201 	orr.w	r2, r2, #1
 8000422:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  1) );         /* Enable GPIOB clock                */
 8000424:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800042c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000430:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000436:	f042 0202 	orr.w	r2, r2, #2
 800043a:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  2) );         /* Enable GPIOC clock                */
 800043c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000444:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000448:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800044c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800044e:	f042 0204 	orr.w	r2, r2, #4
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR  |= ((1UL <<  3) );         /* Enable GPIOD clock                */
 8000454:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000458:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800045c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000460:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000464:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000466:	f042 0208 	orr.w	r2, r2, #8
 800046a:	631a      	str	r2, [r3, #48]	; 0x30
	
	//Initialize Cathode and Anode Pins
	//Initialize Port A: 1
	GPIOA->MODER    &= ~((3UL << 2*1));   /* PA.1 is output               */
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000474:	f04f 0200 	mov.w	r2, #0
 8000478:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	f022 020c 	bic.w	r2, r2, #12
 8000482:	601a      	str	r2, [r3, #0]
  GPIOA->MODER    |=  ((1UL << 2*1)); 
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800048c:	f04f 0200 	mov.w	r2, #0
 8000490:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000494:	6812      	ldr	r2, [r2, #0]
 8000496:	f042 0204 	orr.w	r2, r2, #4
 800049a:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER   &= ~((1UL <<   1));   /* PA.1 is output Push-Pull     */
 800049c:	f04f 0300 	mov.w	r3, #0
 80004a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004a4:	f04f 0200 	mov.w	r2, #0
 80004a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004ac:	6852      	ldr	r2, [r2, #4]
 80004ae:	f022 0202 	bic.w	r2, r2, #2
 80004b2:	605a      	str	r2, [r3, #4]
  GPIOA->OSPEEDR  &= ~((3UL << 2*1));   /* PA.1 is 50MHz Fast Speed     */
 80004b4:	f04f 0300 	mov.w	r3, #0
 80004b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004c4:	6892      	ldr	r2, [r2, #8]
 80004c6:	f022 020c 	bic.w	r2, r2, #12
 80004ca:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR  |=  ((2UL << 2*1)); 
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004d4:	f04f 0200 	mov.w	r2, #0
 80004d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004dc:	6892      	ldr	r2, [r2, #8]
 80004de:	f042 0208 	orr.w	r2, r2, #8
 80004e2:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR    &= ~((3UL << 2*1));   /* PA.1 is Pull up              */
 80004e4:	f04f 0300 	mov.w	r3, #0
 80004e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004f4:	68d2      	ldr	r2, [r2, #12]
 80004f6:	f022 020c 	bic.w	r2, r2, #12
 80004fa:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR    |=  ((1UL << 2*1));  
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000504:	f04f 0200 	mov.w	r2, #0
 8000508:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800050c:	68d2      	ldr	r2, [r2, #12]
 800050e:	f042 0204 	orr.w	r2, r2, #4
 8000512:	60da      	str	r2, [r3, #12]

	//Initialize Port B: 0,1,4,5,11
  GPIOB->MODER    &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,4,5,11 is output               */
 8000514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000518:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800052a:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 800052e:	400b      	ands	r3, r1
 8000530:	6013      	str	r3, [r2, #0]
  GPIOB->MODER    |=  ((1UL << 2*0) | (1UL << 2*1) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	f240 5305 	movw	r3, #1285	; 0x505
 8000548:	f2c0 0340 	movt	r3, #64	; 0x40
 800054c:	430b      	orrs	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER   &= ~((1UL <<   0) | (1UL <<   1) | (1UL <<   4) | (1UL <<   5) | (1UL <<   11));   /* PB.0,1,4,5,11 is output Push-Pull     */
 8000550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000554:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800055c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000560:	6852      	ldr	r2, [r2, #4]
 8000562:	f422 6203 	bic.w	r2, r2, #2096	; 0x830
 8000566:	f022 0203 	bic.w	r2, r2, #3
 800056a:	605a      	str	r2, [r3, #4]
  GPIOB->OSPEEDR  &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,4,5,11 is 50MHz Fast Speed     */
 800056c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000570:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000578:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800057c:	6899      	ldr	r1, [r3, #8]
 800057e:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8000582:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000586:	400b      	ands	r3, r1
 8000588:	6093      	str	r3, [r2, #8]
  GPIOB->OSPEEDR  |=  ((2UL << 2*0) | (2UL << 2*1) | (2UL << 2*4) | (2UL << 2*5) | (2UL << 2*11)); 
 800058a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800059a:	6899      	ldr	r1, [r3, #8]
 800059c:	f640 230a 	movw	r3, #2570	; 0xa0a
 80005a0:	f2c0 0380 	movt	r3, #128	; 0x80
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
  GPIOB->PUPDR    &= ~((3UL << 2*0) | (3UL << 2*1) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PB.0,1,4,5,11 is Pull up              */
 80005a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b8:	68d9      	ldr	r1, [r3, #12]
 80005ba:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 80005be:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 80005c2:	400b      	ands	r3, r1
 80005c4:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR    |=  ((1UL << 2*0) | (1UL << 2*1) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 80005c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005d6:	68d9      	ldr	r1, [r3, #12]
 80005d8:	f240 5305 	movw	r3, #1285	; 0x505
 80005dc:	f2c0 0340 	movt	r3, #64	; 0x40
 80005e0:	430b      	orrs	r3, r1
 80005e2:	60d3      	str	r3, [r2, #12]
											 						 
	//Initialize Port C: 1,2,4,5,11
	GPIOC->MODER    &= ~((3UL << 2*1) | (3UL << 2*2) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PC.1,2,4,5,11 is output               */
 80005e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 80005fa:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 80005fe:	400b      	ands	r3, r1
 8000600:	6013      	str	r3, [r2, #0]
  GPIOC->MODER    |=  ((1UL << 2*1) | (1UL << 2*2) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 8000602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000606:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800060a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800060e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	f240 5314 	movw	r3, #1300	; 0x514
 8000618:	f2c0 0340 	movt	r3, #64	; 0x40
 800061c:	430b      	orrs	r3, r1
 800061e:	6013      	str	r3, [r2, #0]
  GPIOC->OTYPER   &= ~((1UL <<   1) | (1UL <<   2) | (1UL <<   4) | (1UL <<   5) | (1UL <<   11));   /* PC.1,2,4,5,11 is output Push-Pull     */
 8000620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000624:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800062c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000630:	6852      	ldr	r2, [r2, #4]
 8000632:	f422 6203 	bic.w	r2, r2, #2096	; 0x830
 8000636:	f022 0206 	bic.w	r2, r2, #6
 800063a:	605a      	str	r2, [r3, #4]
  GPIOC->OSPEEDR  &= ~((3UL << 2*1) | (3UL << 2*2) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PC.1,2,4,5,11 is 50MHz Fast Speed     */
 800063c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000640:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000644:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000648:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064c:	6899      	ldr	r1, [r3, #8]
 800064e:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 8000652:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000656:	400b      	ands	r3, r1
 8000658:	6093      	str	r3, [r2, #8]
  GPIOC->OSPEEDR  |=  ((2UL << 2*1) | (2UL << 2*2) | (2UL << 2*4) | (2UL << 2*5) | (2UL << 2*11)); 
 800065a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000666:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800066a:	6899      	ldr	r1, [r3, #8]
 800066c:	f640 2328 	movw	r3, #2600	; 0xa28
 8000670:	f2c0 0380 	movt	r3, #128	; 0x80
 8000674:	430b      	orrs	r3, r1
 8000676:	6093      	str	r3, [r2, #8]
  GPIOC->PUPDR    &= ~((3UL << 2*1) | (3UL << 2*2) | (3UL << 2*4) | (3UL << 2*5) | (3UL << 2*11));   /* PC.1,2,4,5,11 is Pull up              */
 8000678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800067c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000684:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000688:	68d9      	ldr	r1, [r3, #12]
 800068a:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 800068e:	f6cf 733f 	movt	r3, #65343	; 0xff3f
 8000692:	400b      	ands	r3, r1
 8000694:	60d3      	str	r3, [r2, #12]
  GPIOC->PUPDR    |=  ((1UL << 2*1) | (1UL << 2*2) | (1UL << 2*4) | (1UL << 2*5) | (1UL << 2*11)); 
 8000696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800069a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800069e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006a6:	68d9      	ldr	r1, [r3, #12]
 80006a8:	f240 5314 	movw	r3, #1300	; 0x514
 80006ac:	f2c0 0340 	movt	r3, #64	; 0x40
 80006b0:	430b      	orrs	r3, r1
 80006b2:	60d3      	str	r3, [r2, #12]
	
	//Initialize Port D: 2
	GPIOD->MODER    &= ~((3UL << 2*2));   /* PD.2 is output               */
 80006b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006bc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80006c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80006ca:	601a      	str	r2, [r3, #0]
  GPIOD->MODER    |=  ((1UL << 2*2)); 
 80006cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006d4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80006d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	f042 0210 	orr.w	r2, r2, #16
 80006e2:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER   &= ~((1UL <<   2));   /* PD.2 is output Push-Pull     */
 80006e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006ec:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80006f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006f4:	6852      	ldr	r2, [r2, #4]
 80006f6:	f022 0204 	bic.w	r2, r2, #4
 80006fa:	605a      	str	r2, [r3, #4]
  GPIOD->OSPEEDR  &= ~((3UL << 2*2));   /* PD.2 is 50MHz Fast Speed     */
 80006fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000700:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000704:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000708:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800070c:	6892      	ldr	r2, [r2, #8]
 800070e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000712:	609a      	str	r2, [r3, #8]
  GPIOD->OSPEEDR  |=  ((2UL << 2*2)); 
 8000714:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000718:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800071c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000720:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000724:	6892      	ldr	r2, [r2, #8]
 8000726:	f042 0220 	orr.w	r2, r2, #32
 800072a:	609a      	str	r2, [r3, #8]
  GPIOD->PUPDR    &= ~((3UL << 2*2));   /* PD.2 is Pull up              */
 800072c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000730:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000734:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000738:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800073c:	68d2      	ldr	r2, [r2, #12]
 800073e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000742:	60da      	str	r2, [r3, #12]
  GPIOD->PUPDR    |=  ((1UL << 2*2)); 
 8000744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800074c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000750:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000754:	68d2      	ldr	r2, [r2, #12]
 8000756:	f042 0210 	orr.w	r2, r2, #16
 800075a:	60da      	str	r2, [r3, #12]
	
	
/* set anode and cathode clocks high (b/c clock on rising edge) */
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 800075c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000760:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800076c:	8b12      	ldrh	r2, [r2, #24]
 800076e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000772:	b292      	uxth	r2, r2
 8000774:	831a      	strh	r2, [r3, #24]
	GPIOD->BSRRL |= (1ul << 2);  //set CA_CLK (PD2)  high
 8000776:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800077a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800077e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000782:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000786:	8b12      	ldrh	r2, [r2, #24]
 8000788:	f042 0204 	orr.w	r2, r2, #4
 800078c:	b292      	uxth	r2, r2
 800078e:	831a      	strh	r2, [r3, #24]
	
/* initialize seg7 to be disabled */
	//disable anode driver
	GPIOB->BSRRL |= (1ul << 4); //set AN_EN (PB4) high b/c active low
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007a0:	8b12      	ldrh	r2, [r2, #24]
 80007a2:	f042 0210 	orr.w	r2, r2, #16
 80007a6:	b292      	uxth	r2, r2
 80007a8:	831a      	strh	r2, [r3, #24]

	// set anode lines high
	GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 80007aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007ba:	8b12      	ldrh	r2, [r2, #24]
 80007bc:	f042 0204 	orr.w	r2, r2, #4
 80007c0:	b292      	uxth	r2, r2
 80007c2:	831a      	strh	r2, [r3, #24]
	GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 80007c4:	f04f 0300 	mov.w	r3, #0
 80007c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007d4:	8b12      	ldrh	r2, [r2, #24]
 80007d6:	f042 0202 	orr.w	r2, r2, #2
 80007da:	b292      	uxth	r2, r2
 80007dc:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 80007de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007ee:	8b12      	ldrh	r2, [r2, #24]
 80007f0:	f042 0210 	orr.w	r2, r2, #16
 80007f4:	b292      	uxth	r2, r2
 80007f6:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000804:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000808:	8b12      	ldrh	r2, [r2, #24]
 800080a:	f042 0202 	orr.w	r2, r2, #2
 800080e:	b292      	uxth	r2, r2
 8000810:	831a      	strh	r2, [r3, #24]
	GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8000812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000816:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800081a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800081e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000822:	8b12      	ldrh	r2, [r2, #24]
 8000824:	f042 0220 	orr.w	r2, r2, #32
 8000828:	b292      	uxth	r2, r2
 800082a:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 800082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000830:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000838:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800083c:	8b12      	ldrh	r2, [r2, #24]
 800083e:	f042 0201 	orr.w	r2, r2, #1
 8000842:	b292      	uxth	r2, r2
 8000844:	831a      	strh	r2, [r3, #24]
	GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800084e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000852:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000856:	8b12      	ldrh	r2, [r2, #24]
 8000858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800085c:	b292      	uxth	r2, r2
 800085e:	831a      	strh	r2, [r3, #24]
	
	// clock the anode driver
	GPIOC->BSRRH |= (1ul << 11); //set AN_CLK (PC11) low
 8000860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000870:	8b52      	ldrh	r2, [r2, #26]
 8000872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000876:	b292      	uxth	r2, r2
 8000878:	835a      	strh	r2, [r3, #26]
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 800087a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800087e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000886:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800088a:	8b12      	ldrh	r2, [r2, #24]
 800088c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000890:	b292      	uxth	r2, r2
 8000892:	831a      	strh	r2, [r3, #24]
	
	// enable anode driver
	GPIOB->BSRRH |= (1ul << 4); //set AN_EN (PB4) low b/c active low
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800089c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008a4:	8b52      	ldrh	r2, [r2, #26]
 80008a6:	f042 0210 	orr.w	r2, r2, #16
 80008aa:	b292      	uxth	r2, r2
 80008ac:	835a      	strh	r2, [r3, #26]
	
}
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <LED_Init>:

/*----------------------------------------------------------------------------
  initialize LED Pins
 *----------------------------------------------------------------------------*/
void LED_Init (void) {
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  RCC->AHB1ENR  |= ((1UL <<  3) );         /* Enable GPIOD clock                */
 80008b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80008c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80008ca:	f042 0208 	orr.w	r2, r2, #8
 80008ce:	631a      	str	r2, [r3, #48]	; 0x30

  GPIOD->MODER    &= ~((3UL << 2*12) |
 80008d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008d8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80008e6:	601a      	str	r2, [r3, #0]
                       (3UL << 2*13) |
                       (3UL << 2*14) |
                       (3UL << 2*15)  );   /* PD.12..15 is output               */
  GPIOD->MODER    |=  ((1UL << 2*12) |
 80008e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008f0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 80008fe:	601a      	str	r2, [r3, #0]
                       (1UL << 2*13) | 
                       (1UL << 2*14) | 
                       (1UL << 2*15)  ); 
  GPIOD->OTYPER   &= ~((1UL <<   12) |
 8000900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000904:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000908:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800090c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000910:	6852      	ldr	r2, [r2, #4]
 8000912:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000916:	605a      	str	r2, [r3, #4]
                       (1UL <<   13) |
                       (1UL <<   14) |
                       (1UL <<   15)  );   /* PD.12..15 is output Push-Pull     */
  GPIOD->OSPEEDR  &= ~((3UL << 2*12) |
 8000918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000920:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000924:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000928:	6892      	ldr	r2, [r2, #8]
 800092a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800092e:	609a      	str	r2, [r3, #8]
                       (3UL << 2*13) |
                       (3UL << 2*14) |
                       (3UL << 2*15)  );   /* PD.12..15 is 50MHz Fast Speed     */
  GPIOD->OSPEEDR  |=  ((2UL << 2*12) |
 8000930:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000934:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000938:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800093c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000940:	6892      	ldr	r2, [r2, #8]
 8000942:	f042 422a 	orr.w	r2, r2, #2852126720	; 0xaa000000
 8000946:	609a      	str	r2, [r3, #8]
                       (2UL << 2*13) | 
                       (2UL << 2*14) | 
                       (2UL << 2*15)  ); 
  GPIOD->PUPDR    &= ~((3UL << 2*12) |
 8000948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000950:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000954:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000958:	68d2      	ldr	r2, [r2, #12]
 800095a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800095e:	60da      	str	r2, [r3, #12]
                       (3UL << 2*13) |
                       (3UL << 2*14) |
                       (3UL << 2*15)  );   /* PD.12..15 is Pull up              */
  GPIOD->PUPDR    |=  ((1UL << 2*12) |
 8000960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000964:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000968:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800096c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000970:	68d2      	ldr	r2, [r2, #12]
 8000972:	f042 42aa 	orr.w	r2, r2, #1426063360	; 0x55000000
 8000976:	60da      	str	r2, [r3, #12]
                       (1UL << 2*13) | 
                       (1UL << 2*14) | 
                       (1UL << 2*15)  ); 
}
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <LED_On>:

/*----------------------------------------------------------------------------
  Function that turns on requested LED
 *----------------------------------------------------------------------------*/
void LED_On (unsigned int num) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  if (num < LED_NUM) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d80c      	bhi.n	80009a8 <LED_On+0x28>
    GPIOD->BSRRL = led_mask[num];
 800098e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000992:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000996:	f242 4210 	movw	r2, #9232	; 0x2410
 800099a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80009a4:	b292      	uxth	r2, r2
 80009a6:	831a      	strh	r2, [r3, #24]
  }
}
 80009a8:	f107 070c 	add.w	r7, r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <LED_Off>:

/*----------------------------------------------------------------------------
  Function that turns off requested LED
 *----------------------------------------------------------------------------*/
void LED_Off (unsigned int num) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  if (num < LED_NUM) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d80c      	bhi.n	80009dc <LED_Off+0x28>
    GPIOD->BSRRH = led_mask[num];
 80009c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009ca:	f242 4210 	movw	r2, #9232	; 0x2410
 80009ce:	f6c0 0200 	movt	r2, #2048	; 0x800
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80009d8:	b292      	uxth	r2, r2
 80009da:	835a      	strh	r2, [r3, #26]
  }
}
 80009dc:	f107 070c 	add.w	r7, r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <LED_Out>:

/*----------------------------------------------------------------------------
  Function that outputs value to LEDs
 *----------------------------------------------------------------------------*/
void LED_Out(unsigned int value) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < LED_NUM; i++) {
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e016      	b.n	8000a26 <LED_Out+0x3e>
    if (value & (1<<i)) {
 80009f8:	f04f 0201 	mov.w	r2, #1
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <LED_Out+0x2e>
      LED_On (i);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffb6 	bl	8000980 <LED_On>
 8000a14:	e003      	b.n	8000a1e <LED_Out+0x36>
    } else {
      LED_Off(i);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffcb 	bl	80009b4 <LED_Off>
  Function that outputs value to LEDs
 *----------------------------------------------------------------------------*/
void LED_Out(unsigned int value) {
  int i;

  for (i = 0; i < LED_NUM; i++) {
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f103 0301 	add.w	r3, r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	dde5      	ble.n	80009f8 <LED_Out+0x10>
      LED_On (i);
    } else {
      LED_Off(i);
    }
  }
}
 8000a2c:	f107 0710 	add.w	r7, r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemCoreClockUpdate>:
#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */

/*@} end of group CMSIS_SysTick */

void SystemCoreClockUpdate(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	f04f 0302 	mov.w	r3, #2
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	f04f 0300 	mov.w	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	f04f 0302 	mov.w	r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f003 030c 	and.w	r3, r3, #12
 8000a66:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d00d      	beq.n	8000a8a <SystemCoreClockUpdate+0x56>
 8000a6e:	2b08      	cmp	r3, #8
 8000a70:	d015      	beq.n	8000a9e <SystemCoreClockUpdate+0x6a>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d169      	bne.n	8000b4a <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a76:	f240 2350 	movw	r3, #592	; 0x250
 8000a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a7e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000a82:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000a86:	601a      	str	r2, [r3, #0]
      break;
 8000a88:	e069      	b.n	8000b5e <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a8a:	f240 2350 	movw	r3, #592	; 0x250
 8000a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a92:	f647 0240 	movw	r2, #30784	; 0x7840
 8000a96:	f2c0 127d 	movt	r2, #381	; 0x17d
 8000a9a:	601a      	str	r2, [r3, #0]
      break;
 8000a9c:	e05f      	b.n	8000b5e <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aac:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000ab0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ab2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ac0:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d014      	beq.n	8000af2 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ac8:	f647 0340 	movw	r3, #30784	; 0x7840
 8000acc:	f2c0 137d 	movt	r3, #381	; 0x17d
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ad6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ade:	6859      	ldr	r1, [r3, #4]
 8000ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000aea:	fb03 f302 	mul.w	r3, r3, r2
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e013      	b.n	8000b1a <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000af2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000af6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b08:	6859      	ldr	r1, [r3, #4]
 8000b0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b0e:	400b      	ands	r3, r1
 8000b10:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000b14:	fb03 f302 	mul.w	r3, r3, r2
 8000b18:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b28:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000b2c:	f103 0301 	add.w	r3, r3, #1
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b3e:	f240 2350 	movw	r3, #592	; 0x250
 8000b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b46:	601a      	str	r2, [r3, #0]
      break;
 8000b48:	e009      	b.n	8000b5e <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b4a:	f240 2350 	movw	r3, #592	; 0x250
 8000b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b52:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000b56:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000b5a:	601a      	str	r2, [r3, #0]
      break;
 8000b5c:	bf00      	nop
  }
}
 8000b5e:	f107 071c 	add.w	r7, r7, #28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <NVIC_SetPriority>:
 

//__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
static inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da10      	bge.n	8000b9e <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000b7c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000b80:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	f002 020f 	and.w	r2, r2, #15
 8000b8a:	f1a2 0104 	sub.w	r1, r2, #4
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	185b      	adds	r3, r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
 8000b9c:	e00d      	b.n	8000bba <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000b9e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000ba2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ba6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	185b      	adds	r3, r3, r1
 8000bb6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bba:	f107 070c 	add.w	r7, r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Config>:
 
 //__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks) - change to gcc 'static inline' convention
static inline uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f103 32ff 	add.w	r2, r3, #4294967295
 8000bd2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d902      	bls.n	8000be0 <SysTick_Config+0x1c>
 8000bda:	f04f 0301 	mov.w	r3, #1
 8000bde:	e01d      	b.n	8000c1c <SysTick_Config+0x58>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000be0:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000be4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f102 32ff 	add.w	r2, r2, #4294967295
 8000bee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f04f 010f 	mov.w	r1, #15
 8000bf8:	f7ff ffb6 	bl	8000b68 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000bfc:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000c00:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000c0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c12:	f04f 0207 	mov.w	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000c18:	f04f 0300 	mov.w	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f107 0708 	add.w	r7, r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop

08000c28 <SysTick_Handler>:

volatile uint32_t msTicks;                      /* counts 1ms timeTicks       */
/*----------------------------------------------------------------------------
  SysTick_Handler
 *----------------------------------------------------------------------------*/
void SysTick_Handler(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  msTicks++; //need this for Delay()
 8000c2c:	f240 2358 	movw	r3, #600	; 0x258
 8000c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f103 0201 	add.w	r2, r3, #1
 8000c3a:	f240 2358 	movw	r3, #600	; 0x258
 8000c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c42:	601a      	str	r2, [r3, #0]
	seg7_handler();
 8000c44:	f000 f8c6 	bl	8000dd4 <seg7_handler>
}
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop

08000c4c <Delay>:

/*----------------------------------------------------------------------------
  delays number of tick Systicks (happens every 1 ms)
 *----------------------------------------------------------------------------*/
void Delay (uint32_t dlyTicks) {                                              
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t curTicks;

//!!temporary -- replaced delay mediated by SysTick_Handeler() with software delay
//  curTicks = msTicks;
//  while ((msTicks - curTicks) < dlyTicks);
  curTicks = 0x12345;
 8000c54:	f242 3345 	movw	r3, #9029	; 0x2345
 8000c58:	f2c0 0301 	movt	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
  while(curTicks-- > 0);
 8000c5e:	bf00      	nop
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf0c      	ite	eq
 8000c66:	2300      	moveq	r3, #0
 8000c68:	2301      	movne	r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	f102 32ff 	add.w	r2, r2, #4294967295
 8000c72:	60fa      	str	r2, [r7, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f3      	bne.n	8000c60 <Delay+0x14>
  return;
 8000c78:	bf00      	nop
}
 8000c7a:	f107 0714 	add.w	r7, r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <BTN_Init>:


/*----------------------------------------------------------------------------
  Function that initializes Button pins
 *----------------------------------------------------------------------------*/
void BTN_Init(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  RCC->AHB1ENR  |= ((1UL <<  0) );              /* Enable GPIOA clock         */
 8000c88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30

  GPIOA->MODER    &= ~((3UL << 2*0)  );         /* PA.0 is input              */
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	f022 0203 	bic.w	r2, r2, #3
 8000cb6:	601a      	str	r2, [r3, #0]
  GPIOA->OSPEEDR  &= ~((3UL << 2*0)  );         /* PA.0 is 50MHz Fast Speed   */
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cc8:	6892      	ldr	r2, [r2, #8]
 8000cca:	f022 0203 	bic.w	r2, r2, #3
 8000cce:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR  |=  ((2UL << 2*0)  ); 
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ce0:	6892      	ldr	r2, [r2, #8]
 8000ce2:	f042 0202 	orr.w	r2, r2, #2
 8000ce6:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR    &= ~((3UL << 2*0)  );         /* PA.0 is no Pull up         */
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cf8:	68d2      	ldr	r2, [r2, #12]
 8000cfa:	f022 0203 	bic.w	r2, r2, #3
 8000cfe:	60da      	str	r2, [r3, #12]
}
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <BTN_Get>:

/*----------------------------------------------------------------------------
  Function that read Button pins
 *----------------------------------------------------------------------------*/
uint32_t BTN_Get(void) {
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

 return (GPIOA->IDR & (1UL << 0));
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	f003 0301 	and.w	r3, r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <sub_uchar_from_quad_example>:
/*----------------------------------------------------------------------------
  sub_uchar_from_quad_asm function & function wrapper
 *----------------------------------------------------------------------------*/
void sub_uchar_from_quad_asm(int *quad_dest_addr, int *quad_base_addr, char uchar_addr); 

void sub_uchar_from_quad_example() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
	unsigned int quad_dest[4];
  
  unsigned int quad_base[4] = {0x0, 0x0, 0x0, 0x4}; 	//test 1 - basic case
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	f04f 0304 	mov.w	r3, #4
 8000d40:	613b      	str	r3, [r7, #16]
	unsigned char uchar = 0x1;
 8000d42:	f04f 0301 	mov.w	r3, #1
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  sub_uchar_from_quad_asm(quad_dest, quad_base, uchar); 
 8000d4a:	f107 0114 	add.w	r1, r7, #20
 8000d4e:	f107 0204 	add.w	r2, r7, #4
 8000d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d56:	4608      	mov	r0, r1
 8000d58:	4611      	mov	r1, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f7ff fa3d 	bl	80001da <sub_uchar_from_quad_asm>

	quad_base[0] = 0x0; //test 2 - propogation case
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
	quad_base[1] = 0x0;
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
	quad_base[2] = 0x3;
 8000d6c:	f04f 0303 	mov.w	r3, #3
 8000d70:	60fb      	str	r3, [r7, #12]
	quad_base[3] = 0x10;
 8000d72:	f04f 0310 	mov.w	r3, #16
 8000d76:	613b      	str	r3, [r7, #16]
	uchar = 0x20;
 8000d78:	f04f 0320 	mov.w	r3, #32
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  sub_uchar_from_quad_asm(quad_dest, quad_base, uchar); 
 8000d80:	f107 0114 	add.w	r1, r7, #20
 8000d84:	f107 0204 	add.w	r2, r7, #4
 8000d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	f7ff fa22 	bl	80001da <sub_uchar_from_quad_asm>

	quad_base[0] = 0x80000000; //test 3 - overflow case
 8000d96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000d9a:	607b      	str	r3, [r7, #4]
	quad_base[1] = 0x0;
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
	quad_base[2] = 0x0;
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
	quad_base[3] = 0x0;
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
	uchar = 0x01;
 8000dae:	f04f 0301 	mov.w	r3, #1
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  sub_uchar_from_quad_asm(quad_dest, quad_base, uchar);
 8000db6:	f107 0114 	add.w	r1, r7, #20
 8000dba:	f107 0204 	add.w	r2, r7, #4
 8000dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f7ff fa07 	bl	80001da <sub_uchar_from_quad_asm>
}
 8000dcc:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <seg7_handler>:
int atoi(char* num_char);

/*----------------------------------------------------------------------------
  seg7_handler function - called from systick
 *----------------------------------------------------------------------------*/
int seg7_handler() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	switch (SEG7_COUNTER) {
 8000dd8:	f240 0310 	movw	r3, #16
 8000ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f103 33ff 	add.w	r3, r3, #4294967295
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d87f      	bhi.n	8000eea <seg7_handler+0x116>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <seg7_handler+0x1c>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e05 	.word	0x08000e05
 8000df4:	08000e33 	.word	0x08000e33
 8000df8:	08000e61 	.word	0x08000e61
 8000dfc:	08000e8f 	.word	0x08000e8f
 8000e00:	08000ebd 	.word	0x08000ebd
		case 1:
			seg7_update(1, SEG7_DIGIT1);
 8000e04:	f240 0314 	movw	r3, #20
 8000e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f04f 0001 	mov.w	r0, #1
 8000e12:	4619      	mov	r1, r3
 8000e14:	f000 f874 	bl	8000f00 <seg7_update>
			SEG7_COUNTER++;
 8000e18:	f240 0310 	movw	r3, #16
 8000e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f103 0201 	add.w	r2, r3, #1
 8000e26:	f240 0310 	movw	r3, #16
 8000e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e2e:	601a      	str	r2, [r3, #0]
			break;
 8000e30:	e063      	b.n	8000efa <seg7_handler+0x126>
		case 2:
			seg7_update(2, SEG7_DIGIT2);
 8000e32:	f240 0318 	movw	r3, #24
 8000e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f04f 0002 	mov.w	r0, #2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f000 f85d 	bl	8000f00 <seg7_update>
			SEG7_COUNTER++;
 8000e46:	f240 0310 	movw	r3, #16
 8000e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f103 0201 	add.w	r2, r3, #1
 8000e54:	f240 0310 	movw	r3, #16
 8000e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e5c:	601a      	str	r2, [r3, #0]
			break;
 8000e5e:	e04c      	b.n	8000efa <seg7_handler+0x126>
		case 3:
			seg7_update(3, SEG7_DIGIT3);
 8000e60:	f240 031c 	movw	r3, #28
 8000e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f04f 0003 	mov.w	r0, #3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f000 f846 	bl	8000f00 <seg7_update>
			SEG7_COUNTER++;
 8000e74:	f240 0310 	movw	r3, #16
 8000e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f103 0201 	add.w	r2, r3, #1
 8000e82:	f240 0310 	movw	r3, #16
 8000e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e8a:	601a      	str	r2, [r3, #0]
			break;
 8000e8c:	e035      	b.n	8000efa <seg7_handler+0x126>
		case 4:
			seg7_update(4, SEG7_DIGIT4);
 8000e8e:	f240 0320 	movw	r3, #32
 8000e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f04f 0004 	mov.w	r0, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f000 f82f 	bl	8000f00 <seg7_update>
		  SEG7_COUNTER++;
 8000ea2:	f240 0310 	movw	r3, #16
 8000ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f103 0201 	add.w	r2, r3, #1
 8000eb0:	f240 0310 	movw	r3, #16
 8000eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eb8:	601a      	str	r2, [r3, #0]
			break;
 8000eba:	e01e      	b.n	8000efa <seg7_handler+0x126>
		case 5:
			seg7_update(5, SEG7_COLON_DEGREE);
 8000ebc:	f240 0324 	movw	r3, #36	; 0x24
 8000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f04f 0005 	mov.w	r0, #5
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f000 f818 	bl	8000f00 <seg7_update>
		  SEG7_COUNTER++;
 8000ed0:	f240 0310 	movw	r3, #16
 8000ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f103 0201 	add.w	r2, r3, #1
 8000ede:	f240 0310 	movw	r3, #16
 8000ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee6:	601a      	str	r2, [r3, #0]
			break;
 8000ee8:	e007      	b.n	8000efa <seg7_handler+0x126>
		default:
			SEG7_COUNTER = 1;
 8000eea:	f240 0310 	movw	r3, #16
 8000eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef2:	f04f 0201 	mov.w	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
			break;
 8000ef8:	bf00      	nop
	}
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop

08000f00 <seg7_update>:

/*----------------------------------------------------------------------------
  seg7_update function - updates a single seg7 digit to write passed value
 *----------------------------------------------------------------------------*/
int seg7_update(int digit, int val) {
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	//disable cathode driver
	GPIOC->BSRRL |= (1ul << 1); //set CA_EN (PC1) high b/c active low
 8000f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f1a:	8b12      	ldrh	r2, [r2, #24]
 8000f1c:	f042 0202 	orr.w	r2, r2, #2
 8000f20:	b292      	uxth	r2, r2
 8000f22:	831a      	strh	r2, [r3, #24]
	
	//set cathode lines
	switch(val) {
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b10      	cmp	r3, #16
 8000f28:	f200 8726 	bhi.w	8001d78 <seg7_update+0xe78>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <seg7_update+0x34>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f79 	.word	0x08000f79
 8000f38:	0800104d 	.word	0x0800104d
 8000f3c:	08001121 	.word	0x08001121
 8000f40:	080011f5 	.word	0x080011f5
 8000f44:	080012c9 	.word	0x080012c9
 8000f48:	0800139d 	.word	0x0800139d
 8000f4c:	08001471 	.word	0x08001471
 8000f50:	08001545 	.word	0x08001545
 8000f54:	08001617 	.word	0x08001617
 8000f58:	080016e9 	.word	0x080016e9
 8000f5c:	080017bb 	.word	0x080017bb
 8000f60:	0800188d 	.word	0x0800188d
 8000f64:	0800195f 	.word	0x0800195f
 8000f68:	08001a31 	.word	0x08001a31
 8000f6c:	08001b03 	.word	0x08001b03
 8000f70:	08001bd5 	.word	0x08001bd5
 8000f74:	08001ca7 	.word	0x08001ca7
		case 0: //'0'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8000f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f88:	8b52      	ldrh	r2, [r2, #26]
 8000f8a:	f042 0220 	orr.w	r2, r2, #32
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fa2:	8b52      	ldrh	r2, [r2, #26]
 8000fa4:	f042 0202 	orr.w	r2, r2, #2
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fbc:	8b52      	ldrh	r2, [r2, #26]
 8000fbe:	f042 0202 	orr.w	r2, r2, #2
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd6:	8b52      	ldrh	r2, [r2, #26]
 8000fd8:	f042 0220 	orr.w	r2, r2, #32
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ff0:	8b52      	ldrh	r2, [r2, #26]
 8000ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8000ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ffe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001006:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800100a:	8b52      	ldrh	r2, [r2, #26]
 800100c:	f042 0204 	orr.w	r2, r2, #4
 8001010:	b292      	uxth	r2, r2
 8001012:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8001014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800101c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001020:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001024:	8b12      	ldrh	r2, [r2, #24]
 8001026:	f042 0210 	orr.w	r2, r2, #16
 800102a:	b292      	uxth	r2, r2
 800102c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 800102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001032:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800103e:	8b12      	ldrh	r2, [r2, #24]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	b292      	uxth	r2, r2
 8001046:	831a      	strh	r2, [r3, #24]
			break;
 8001048:	f000 be96 	b.w	8001d78 <seg7_update+0xe78>
		case 1: //'1'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001058:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800105c:	8b12      	ldrh	r2, [r2, #24]
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	b292      	uxth	r2, r2
 8001064:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800106e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001072:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001076:	8b52      	ldrh	r2, [r2, #26]
 8001078:	f042 0202 	orr.w	r2, r2, #2
 800107c:	b292      	uxth	r2, r2
 800107e:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001090:	8b52      	ldrh	r2, [r2, #26]
 8001092:	f042 0202 	orr.w	r2, r2, #2
 8001096:	b292      	uxth	r2, r2
 8001098:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010aa:	8b12      	ldrh	r2, [r2, #24]
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b292      	uxth	r2, r2
 80010b2:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010c4:	8b12      	ldrh	r2, [r2, #24]
 80010c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010ca:	b292      	uxth	r2, r2
 80010cc:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 80010ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010de:	8b12      	ldrh	r2, [r2, #24]
 80010e0:	f042 0204 	orr.w	r2, r2, #4
 80010e4:	b292      	uxth	r2, r2
 80010e6:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 80010e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010f8:	8b12      	ldrh	r2, [r2, #24]
 80010fa:	f042 0210 	orr.w	r2, r2, #16
 80010fe:	b292      	uxth	r2, r2
 8001100:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001106:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800110a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001112:	8b12      	ldrh	r2, [r2, #24]
 8001114:	f042 0201 	orr.w	r2, r2, #1
 8001118:	b292      	uxth	r2, r2
 800111a:	831a      	strh	r2, [r3, #24]
			break;
 800111c:	f000 be2c 	b.w	8001d78 <seg7_update+0xe78>
		case 2: //'2'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001124:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001130:	8b52      	ldrh	r2, [r2, #26]
 8001132:	f042 0220 	orr.w	r2, r2, #32
 8001136:	b292      	uxth	r2, r2
 8001138:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001146:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800114a:	8b52      	ldrh	r2, [r2, #26]
 800114c:	f042 0202 	orr.w	r2, r2, #2
 8001150:	b292      	uxth	r2, r2
 8001152:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001164:	8b12      	ldrh	r2, [r2, #24]
 8001166:	f042 0202 	orr.w	r2, r2, #2
 800116a:	b292      	uxth	r2, r2
 800116c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 800116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001172:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800117e:	8b52      	ldrh	r2, [r2, #26]
 8001180:	f042 0220 	orr.w	r2, r2, #32
 8001184:	b292      	uxth	r2, r2
 8001186:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8001188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001198:	8b52      	ldrh	r2, [r2, #26]
 800119a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800119e:	b292      	uxth	r2, r2
 80011a0:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 80011a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011b2:	8b12      	ldrh	r2, [r2, #24]
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	b292      	uxth	r2, r2
 80011ba:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 80011bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011cc:	8b52      	ldrh	r2, [r2, #26]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	b292      	uxth	r2, r2
 80011d4:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011e6:	8b12      	ldrh	r2, [r2, #24]
 80011e8:	f042 0201 	orr.w	r2, r2, #1
 80011ec:	b292      	uxth	r2, r2
 80011ee:	831a      	strh	r2, [r3, #24]
			break;
 80011f0:	f000 bdc2 	b.w	8001d78 <seg7_update+0xe78>
		case 3: //'3'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 80011f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001200:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001204:	8b52      	ldrh	r2, [r2, #26]
 8001206:	f042 0220 	orr.w	r2, r2, #32
 800120a:	b292      	uxth	r2, r2
 800120c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800121e:	8b52      	ldrh	r2, [r2, #26]
 8001220:	f042 0202 	orr.w	r2, r2, #2
 8001224:	b292      	uxth	r2, r2
 8001226:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001238:	8b52      	ldrh	r2, [r2, #26]
 800123a:	f042 0202 	orr.w	r2, r2, #2
 800123e:	b292      	uxth	r2, r2
 8001240:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8001242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001246:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800124a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001252:	8b52      	ldrh	r2, [r2, #26]
 8001254:	f042 0220 	orr.w	r2, r2, #32
 8001258:	b292      	uxth	r2, r2
 800125a:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 800125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001260:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800126c:	8b12      	ldrh	r2, [r2, #24]
 800126e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001272:	b292      	uxth	r2, r2
 8001274:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8001276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800127a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001282:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001286:	8b12      	ldrh	r2, [r2, #24]
 8001288:	f042 0204 	orr.w	r2, r2, #4
 800128c:	b292      	uxth	r2, r2
 800128e:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a0:	8b52      	ldrh	r2, [r2, #26]
 80012a2:	f042 0210 	orr.w	r2, r2, #16
 80012a6:	b292      	uxth	r2, r2
 80012a8:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012ba:	8b12      	ldrh	r2, [r2, #24]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	b292      	uxth	r2, r2
 80012c2:	831a      	strh	r2, [r3, #24]
			break;
 80012c4:	f000 bd58 	b.w	8001d78 <seg7_update+0xe78>
		case 4: //'4'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 80012c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d8:	8b12      	ldrh	r2, [r2, #24]
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	b292      	uxth	r2, r2
 80012e0:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012f2:	8b52      	ldrh	r2, [r2, #26]
 80012f4:	f042 0202 	orr.w	r2, r2, #2
 80012f8:	b292      	uxth	r2, r2
 80012fa:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800130c:	8b52      	ldrh	r2, [r2, #26]
 800130e:	f042 0202 	orr.w	r2, r2, #2
 8001312:	b292      	uxth	r2, r2
 8001314:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001322:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001326:	8b12      	ldrh	r2, [r2, #24]
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	b292      	uxth	r2, r2
 800132e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001340:	8b12      	ldrh	r2, [r2, #24]
 8001342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001346:	b292      	uxth	r2, r2
 8001348:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 800134a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001356:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800135a:	8b52      	ldrh	r2, [r2, #26]
 800135c:	f042 0204 	orr.w	r2, r2, #4
 8001360:	b292      	uxth	r2, r2
 8001362:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001368:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800136c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001370:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001374:	8b52      	ldrh	r2, [r2, #26]
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	b292      	uxth	r2, r2
 800137c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800138e:	8b12      	ldrh	r2, [r2, #24]
 8001390:	f042 0201 	orr.w	r2, r2, #1
 8001394:	b292      	uxth	r2, r2
 8001396:	831a      	strh	r2, [r3, #24]
			break;	
 8001398:	f000 bcee 	b.w	8001d78 <seg7_update+0xe78>
		case 5: //'5'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 800139c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013ac:	8b52      	ldrh	r2, [r2, #26]
 80013ae:	f042 0220 	orr.w	r2, r2, #32
 80013b2:	b292      	uxth	r2, r2
 80013b4:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 80013b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013c6:	8b12      	ldrh	r2, [r2, #24]
 80013c8:	f042 0202 	orr.w	r2, r2, #2
 80013cc:	b292      	uxth	r2, r2
 80013ce:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013e0:	8b52      	ldrh	r2, [r2, #26]
 80013e2:	f042 0202 	orr.w	r2, r2, #2
 80013e6:	b292      	uxth	r2, r2
 80013e8:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 80013ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013fa:	8b52      	ldrh	r2, [r2, #26]
 80013fc:	f042 0220 	orr.w	r2, r2, #32
 8001400:	b292      	uxth	r2, r2
 8001402:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001408:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001414:	8b12      	ldrh	r2, [r2, #24]
 8001416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800141a:	b292      	uxth	r2, r2
 800141c:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 800141e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001422:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800142e:	8b52      	ldrh	r2, [r2, #26]
 8001430:	f042 0204 	orr.w	r2, r2, #4
 8001434:	b292      	uxth	r2, r2
 8001436:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800143c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001444:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001448:	8b52      	ldrh	r2, [r2, #26]
 800144a:	f042 0210 	orr.w	r2, r2, #16
 800144e:	b292      	uxth	r2, r2
 8001450:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001456:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800145a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001462:	8b12      	ldrh	r2, [r2, #24]
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	b292      	uxth	r2, r2
 800146a:	831a      	strh	r2, [r3, #24]
			break;
 800146c:	f000 bc84 	b.w	8001d78 <seg7_update+0xe78>
		case 6: //'6'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800147c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001480:	8b52      	ldrh	r2, [r2, #26]
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	b292      	uxth	r2, r2
 8001488:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001496:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800149a:	8b12      	ldrh	r2, [r2, #24]
 800149c:	f042 0202 	orr.w	r2, r2, #2
 80014a0:	b292      	uxth	r2, r2
 80014a2:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014b4:	8b52      	ldrh	r2, [r2, #26]
 80014b6:	f042 0202 	orr.w	r2, r2, #2
 80014ba:	b292      	uxth	r2, r2
 80014bc:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 80014be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ce:	8b52      	ldrh	r2, [r2, #26]
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	b292      	uxth	r2, r2
 80014d6:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 80014d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014e8:	8b52      	ldrh	r2, [r2, #26]
 80014ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ee:	b292      	uxth	r2, r2
 80014f0:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 80014f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001502:	8b52      	ldrh	r2, [r2, #26]
 8001504:	f042 0204 	orr.w	r2, r2, #4
 8001508:	b292      	uxth	r2, r2
 800150a:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 800150c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001518:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800151c:	8b52      	ldrh	r2, [r2, #26]
 800151e:	f042 0210 	orr.w	r2, r2, #16
 8001522:	b292      	uxth	r2, r2
 8001524:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001536:	8b12      	ldrh	r2, [r2, #24]
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	b292      	uxth	r2, r2
 800153e:	831a      	strh	r2, [r3, #24]
			break;
 8001540:	f000 bc1a 	b.w	8001d78 <seg7_update+0xe78>
		case 7: //'7'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001548:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001554:	8b52      	ldrh	r2, [r2, #26]
 8001556:	f042 0220 	orr.w	r2, r2, #32
 800155a:	b292      	uxth	r2, r2
 800155c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 800155e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001562:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800156e:	8b52      	ldrh	r2, [r2, #26]
 8001570:	f042 0202 	orr.w	r2, r2, #2
 8001574:	b292      	uxth	r2, r2
 8001576:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001588:	8b52      	ldrh	r2, [r2, #26]
 800158a:	f042 0202 	orr.w	r2, r2, #2
 800158e:	b292      	uxth	r2, r2
 8001590:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800159a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015a2:	8b12      	ldrh	r2, [r2, #24]
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	b292      	uxth	r2, r2
 80015aa:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015bc:	8b12      	ldrh	r2, [r2, #24]
 80015be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c2:	b292      	uxth	r2, r2
 80015c4:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 80015c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015d6:	8b52      	ldrh	r2, [r2, #26]
 80015d8:	f042 0204 	orr.w	r2, r2, #4
 80015dc:	b292      	uxth	r2, r2
 80015de:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 80015e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015f0:	8b12      	ldrh	r2, [r2, #24]
 80015f2:	f042 0210 	orr.w	r2, r2, #16
 80015f6:	b292      	uxth	r2, r2
 80015f8:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80015fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800160a:	8b12      	ldrh	r2, [r2, #24]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	b292      	uxth	r2, r2
 8001612:	831a      	strh	r2, [r3, #24]
			break;
 8001614:	e3b0      	b.n	8001d78 <seg7_update+0xe78>
		case 8: //'8'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001616:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800161a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800161e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001622:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001626:	8b52      	ldrh	r2, [r2, #26]
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	b292      	uxth	r2, r2
 800162e:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001634:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001640:	8b52      	ldrh	r2, [r2, #26]
 8001642:	f042 0202 	orr.w	r2, r2, #2
 8001646:	b292      	uxth	r2, r2
 8001648:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800165a:	8b52      	ldrh	r2, [r2, #26]
 800165c:	f042 0202 	orr.w	r2, r2, #2
 8001660:	b292      	uxth	r2, r2
 8001662:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8001664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800166c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001670:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001674:	8b52      	ldrh	r2, [r2, #26]
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	b292      	uxth	r2, r2
 800167c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 800167e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001682:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800168e:	8b52      	ldrh	r2, [r2, #26]
 8001690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001694:	b292      	uxth	r2, r2
 8001696:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8001698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800169c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016a8:	8b52      	ldrh	r2, [r2, #26]
 80016aa:	f042 0204 	orr.w	r2, r2, #4
 80016ae:	b292      	uxth	r2, r2
 80016b0:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 80016b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016c2:	8b52      	ldrh	r2, [r2, #26]
 80016c4:	f042 0210 	orr.w	r2, r2, #16
 80016c8:	b292      	uxth	r2, r2
 80016ca:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 80016cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016dc:	8b12      	ldrh	r2, [r2, #24]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	b292      	uxth	r2, r2
 80016e4:	831a      	strh	r2, [r3, #24]
			break;	
 80016e6:	e347      	b.n	8001d78 <seg7_update+0xe78>
		case 9: //'9'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 80016e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016f8:	8b52      	ldrh	r2, [r2, #26]
 80016fa:	f042 0220 	orr.w	r2, r2, #32
 80016fe:	b292      	uxth	r2, r2
 8001700:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001706:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001712:	8b52      	ldrh	r2, [r2, #26]
 8001714:	f042 0202 	orr.w	r2, r2, #2
 8001718:	b292      	uxth	r2, r2
 800171a:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800172c:	8b52      	ldrh	r2, [r2, #26]
 800172e:	f042 0202 	orr.w	r2, r2, #2
 8001732:	b292      	uxth	r2, r2
 8001734:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001746:	8b12      	ldrh	r2, [r2, #24]
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	b292      	uxth	r2, r2
 800174e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001754:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001760:	8b12      	ldrh	r2, [r2, #24]
 8001762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001766:	b292      	uxth	r2, r2
 8001768:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 800176a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800176e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001776:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800177a:	8b52      	ldrh	r2, [r2, #26]
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	b292      	uxth	r2, r2
 8001782:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001788:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800178c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001790:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001794:	8b52      	ldrh	r2, [r2, #26]
 8001796:	f042 0210 	orr.w	r2, r2, #16
 800179a:	b292      	uxth	r2, r2
 800179c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017ae:	8b12      	ldrh	r2, [r2, #24]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	b292      	uxth	r2, r2
 80017b6:	831a      	strh	r2, [r3, #24]
			break;
 80017b8:	e2de      	b.n	8001d78 <seg7_update+0xe78>
		case 10: //OFF
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 80017ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017ca:	8b12      	ldrh	r2, [r2, #24]
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	b292      	uxth	r2, r2
 80017d2:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 80017d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017e4:	8b12      	ldrh	r2, [r2, #24]
 80017e6:	f042 0202 	orr.w	r2, r2, #2
 80017ea:	b292      	uxth	r2, r2
 80017ec:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017fe:	8b12      	ldrh	r2, [r2, #24]
 8001800:	f042 0202 	orr.w	r2, r2, #2
 8001804:	b292      	uxth	r2, r2
 8001806:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001814:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001818:	8b12      	ldrh	r2, [r2, #24]
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b292      	uxth	r2, r2
 8001820:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800182a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001832:	8b12      	ldrh	r2, [r2, #24]
 8001834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001838:	b292      	uxth	r2, r2
 800183a:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 800183c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001840:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001848:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800184c:	8b12      	ldrh	r2, [r2, #24]
 800184e:	f042 0204 	orr.w	r2, r2, #4
 8001852:	b292      	uxth	r2, r2
 8001854:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8001856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800185a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800185e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001862:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001866:	8b12      	ldrh	r2, [r2, #24]
 8001868:	f042 0210 	orr.w	r2, r2, #16
 800186c:	b292      	uxth	r2, r2
 800186e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001874:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001880:	8b12      	ldrh	r2, [r2, #24]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	b292      	uxth	r2, r2
 8001888:	831a      	strh	r2, [r3, #24]
			break;	
 800188a:	e275      	b.n	8001d78 <seg7_update+0xe78>
		case 11: //':'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 800188c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001898:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800189c:	8b52      	ldrh	r2, [r2, #26]
 800189e:	f042 0220 	orr.w	r2, r2, #32
 80018a2:	b292      	uxth	r2, r2
 80018a4:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 80018a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018b6:	8b52      	ldrh	r2, [r2, #26]
 80018b8:	f042 0202 	orr.w	r2, r2, #2
 80018bc:	b292      	uxth	r2, r2
 80018be:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018d0:	8b12      	ldrh	r2, [r2, #24]
 80018d2:	f042 0202 	orr.w	r2, r2, #2
 80018d6:	b292      	uxth	r2, r2
 80018d8:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 80018da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018ea:	8b12      	ldrh	r2, [r2, #24]
 80018ec:	f042 0220 	orr.w	r2, r2, #32
 80018f0:	b292      	uxth	r2, r2
 80018f2:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 80018f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001900:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001904:	8b12      	ldrh	r2, [r2, #24]
 8001906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190a:	b292      	uxth	r2, r2
 800190c:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 800190e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001912:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800191a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800191e:	8b12      	ldrh	r2, [r2, #24]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	b292      	uxth	r2, r2
 8001926:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8001928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001934:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001938:	8b12      	ldrh	r2, [r2, #24]
 800193a:	f042 0210 	orr.w	r2, r2, #16
 800193e:	b292      	uxth	r2, r2
 8001940:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001946:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800194a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001952:	8b12      	ldrh	r2, [r2, #24]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	b292      	uxth	r2, r2
 800195a:	831a      	strh	r2, [r3, #24]
			break;	
 800195c:	e20c      	b.n	8001d78 <seg7_update+0xe78>
		case 12: //'<degree>'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 800195e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001962:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800196a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800196e:	8b12      	ldrh	r2, [r2, #24]
 8001970:	f042 0220 	orr.w	r2, r2, #32
 8001974:	b292      	uxth	r2, r2
 8001976:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8001978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001984:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001988:	8b12      	ldrh	r2, [r2, #24]
 800198a:	f042 0202 	orr.w	r2, r2, #2
 800198e:	b292      	uxth	r2, r2
 8001990:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019a2:	8b52      	ldrh	r2, [r2, #26]
 80019a4:	f042 0202 	orr.w	r2, r2, #2
 80019a8:	b292      	uxth	r2, r2
 80019aa:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019bc:	8b12      	ldrh	r2, [r2, #24]
 80019be:	f042 0220 	orr.w	r2, r2, #32
 80019c2:	b292      	uxth	r2, r2
 80019c4:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 80019c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019d6:	8b12      	ldrh	r2, [r2, #24]
 80019d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019dc:	b292      	uxth	r2, r2
 80019de:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 80019e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019f0:	8b12      	ldrh	r2, [r2, #24]
 80019f2:	f042 0204 	orr.w	r2, r2, #4
 80019f6:	b292      	uxth	r2, r2
 80019f8:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 80019fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a0a:	8b12      	ldrh	r2, [r2, #24]
 8001a0c:	f042 0210 	orr.w	r2, r2, #16
 8001a10:	b292      	uxth	r2, r2
 8001a12:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a24:	8b12      	ldrh	r2, [r2, #24]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	831a      	strh	r2, [r3, #24]
			break;	
 8001a2e:	e1a3      	b.n	8001d78 <seg7_update+0xe78>
		case 13: //'<colon> and <degree>'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a40:	8b52      	ldrh	r2, [r2, #26]
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b292      	uxth	r2, r2
 8001a48:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 1); //set  CA_B (PB1) low
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a5a:	8b52      	ldrh	r2, [r2, #26]
 8001a5c:	f042 0202 	orr.w	r2, r2, #2
 8001a60:	b292      	uxth	r2, r2
 8001a62:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a74:	8b52      	ldrh	r2, [r2, #26]
 8001a76:	f042 0202 	orr.w	r2, r2, #2
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a8e:	8b12      	ldrh	r2, [r2, #24]
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	b292      	uxth	r2, r2
 8001a96:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set  CA_E (PB11) high
 8001a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aa8:	8b12      	ldrh	r2, [r2, #24]
 8001aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aae:	b292      	uxth	r2, r2
 8001ab0:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8001ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ac2:	8b12      	ldrh	r2, [r2, #24]
 8001ac4:	f042 0204 	orr.w	r2, r2, #4
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set  CA_G (PC4) high
 8001acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001adc:	8b12      	ldrh	r2, [r2, #24]
 8001ade:	f042 0210 	orr.w	r2, r2, #16
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001af6:	8b12      	ldrh	r2, [r2, #24]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	b292      	uxth	r2, r2
 8001afe:	831a      	strh	r2, [r3, #24]
			break;		
 8001b00:	e13a      	b.n	8001d78 <seg7_update+0xe78>
		case 14: //'E'
			GPIOC->BSRRH |= (1ul << 5); //set  CA_A (PC5) low
 8001b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b12:	8b52      	ldrh	r2, [r2, #26]
 8001b14:	f042 0220 	orr.w	r2, r2, #32
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b2c:	8b12      	ldrh	r2, [r2, #24]
 8001b2e:	f042 0202 	orr.w	r2, r2, #2
 8001b32:	b292      	uxth	r2, r2
 8001b34:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set  CA_C (PA1) high
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b46:	8b12      	ldrh	r2, [r2, #24]
 8001b48:	f042 0202 	orr.w	r2, r2, #2
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 5); //set  CA_D (PB5) low
 8001b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b60:	8b52      	ldrh	r2, [r2, #26]
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	b292      	uxth	r2, r2
 8001b68:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b7a:	8b52      	ldrh	r2, [r2, #26]
 8001b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b80:	b292      	uxth	r2, r2
 8001b82:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8001b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b94:	8b52      	ldrh	r2, [r2, #26]
 8001b96:	f042 0204 	orr.w	r2, r2, #4
 8001b9a:	b292      	uxth	r2, r2
 8001b9c:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ba2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001baa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bae:	8b52      	ldrh	r2, [r2, #26]
 8001bb0:	f042 0210 	orr.w	r2, r2, #16
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bc8:	8b12      	ldrh	r2, [r2, #24]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	831a      	strh	r2, [r3, #24]
			break;		
 8001bd2:	e0d1      	b.n	8001d78 <seg7_update+0xe78>
		case 15: //'h'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 8001bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001be4:	8b12      	ldrh	r2, [r2, #24]
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b292      	uxth	r2, r2
 8001bec:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bfe:	8b12      	ldrh	r2, [r2, #24]
 8001c00:	f042 0202 	orr.w	r2, r2, #2
 8001c04:	b292      	uxth	r2, r2
 8001c06:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c18:	8b52      	ldrh	r2, [r2, #26]
 8001c1a:	f042 0202 	orr.w	r2, r2, #2
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c32:	8b12      	ldrh	r2, [r2, #24]
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c4c:	8b52      	ldrh	r2, [r2, #26]
 8001c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c52:	b292      	uxth	r2, r2
 8001c54:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 2); //set  CA_F (PC2) low
 8001c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c66:	8b52      	ldrh	r2, [r2, #26]
 8001c68:	f042 0204 	orr.w	r2, r2, #4
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c80:	8b52      	ldrh	r2, [r2, #26]
 8001c82:	f042 0210 	orr.w	r2, r2, #16
 8001c86:	b292      	uxth	r2, r2
 8001c88:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c9a:	8b12      	ldrh	r2, [r2, #24]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	831a      	strh	r2, [r3, #24]
			break;		
 8001ca4:	e068      	b.n	8001d78 <seg7_update+0xe78>
		case 16: //'m'
			GPIOC->BSRRL |= (1ul << 5); //set  CA_A (PC5) high
 8001ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001caa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cb6:	8b12      	ldrh	r2, [r2, #24]
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set  CA_B (PB1) high
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ccc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cd0:	8b12      	ldrh	r2, [r2, #24]
 8001cd2:	f042 0202 	orr.w	r2, r2, #2
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set  CA_C (PA1) low
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cea:	8b52      	ldrh	r2, [r2, #26]
 8001cec:	f042 0202 	orr.w	r2, r2, #2
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 5); //set  CA_D (PB5) high
 8001cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d04:	8b12      	ldrh	r2, [r2, #24]
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 11); //set  CA_E (PB11) low
 8001d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d1e:	8b52      	ldrh	r2, [r2, #26]
 8001d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d24:	b292      	uxth	r2, r2
 8001d26:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 2); //set  CA_F (PC2) high
 8001d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d38:	8b12      	ldrh	r2, [r2, #24]
 8001d3a:	f042 0204 	orr.w	r2, r2, #4
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set  CA_G (PC4) low
 8001d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d52:	8b52      	ldrh	r2, [r2, #26]
 8001d54:	f042 0210 	orr.w	r2, r2, #16
 8001d58:	b292      	uxth	r2, r2
 8001d5a:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  CA_DP (PB0) high
 8001d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d6c:	8b12      	ldrh	r2, [r2, #24]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	b292      	uxth	r2, r2
 8001d74:	831a      	strh	r2, [r3, #24]
			break;	
 8001d76:	bf00      	nop
			
	}
	
	//clock cathode
	GPIOD->BSRRH |= (1ul << 2); //set CA_CLK (PD2) low
 8001d78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d80:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001d84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d88:	8b52      	ldrh	r2, [r2, #26]
 8001d8a:	f042 0204 	orr.w	r2, r2, #4
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	835a      	strh	r2, [r3, #26]
	GPIOD->BSRRL |= (1ul << 2); //set CA_CLK (PD2) high
 8001d92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d9a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001d9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da2:	8b12      	ldrh	r2, [r2, #24]
 8001da4:	f042 0204 	orr.w	r2, r2, #4
 8001da8:	b292      	uxth	r2, r2
 8001daa:	831a      	strh	r2, [r3, #24]

	//disable anode driver
	GPIOB->BSRRL |= (1ul << 4); //set AN_EN (PB4) high b/c active low
 8001dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dbc:	8b12      	ldrh	r2, [r2, #24]
 8001dbe:	f042 0210 	orr.w	r2, r2, #16
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	831a      	strh	r2, [r3, #24]
	
	//set anode lines
	switch(digit) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	f200 81d9 	bhi.w	8002184 <seg7_update+0x1284>
 8001dd2:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <seg7_update+0xed8>)
 8001dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd8:	08001ded 	.word	0x08001ded
 8001ddc:	08001ea5 	.word	0x08001ea5
 8001de0:	08001f5d 	.word	0x08001f5d
 8001de4:	08002015 	.word	0x08002015
 8001de8:	080020cd 	.word	0x080020cd
		case 1: //digit 1
			GPIOC->BSRRH |= (1ul << 2); //set DIGIT1 anode (PC2) low
 8001dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dfc:	8b52      	ldrh	r2, [r2, #26]
 8001dfe:	f042 0204 	orr.w	r2, r2, #4
 8001e02:	b292      	uxth	r2, r2
 8001e04:	835a      	strh	r2, [r3, #26]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e16:	8b12      	ldrh	r2, [r2, #24]
 8001e18:	f042 0202 	orr.w	r2, r2, #2
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8001e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e30:	8b12      	ldrh	r2, [r2, #24]
 8001e32:	f042 0210 	orr.w	r2, r2, #16
 8001e36:	b292      	uxth	r2, r2
 8001e38:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e4a:	8b12      	ldrh	r2, [r2, #24]
 8001e4c:	f042 0202 	orr.w	r2, r2, #2
 8001e50:	b292      	uxth	r2, r2
 8001e52:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8001e54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e64:	8b12      	ldrh	r2, [r2, #24]
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8001e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e7e:	8b12      	ldrh	r2, [r2, #24]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	b292      	uxth	r2, r2
 8001e86:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8001e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e98:	8b12      	ldrh	r2, [r2, #24]
 8001e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	831a      	strh	r2, [r3, #24]
			break;
 8001ea2:	e16f      	b.n	8002184 <seg7_update+0x1284>
		case 2: //digit 2
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8001ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ea8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001eb4:	8b12      	ldrh	r2, [r2, #24]
 8001eb6:	f042 0204 	orr.w	r2, r2, #4
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRH |= (1ul << 1); //set DIGIT2 anode (PA1) low
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ece:	8b52      	ldrh	r2, [r2, #26]
 8001ed0:	f042 0202 	orr.w	r2, r2, #2
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8001ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001edc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ee8:	8b12      	ldrh	r2, [r2, #24]
 8001eea:	f042 0210 	orr.w	r2, r2, #16
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f02:	8b12      	ldrh	r2, [r2, #24]
 8001f04:	f042 0202 	orr.w	r2, r2, #2
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8001f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f1c:	8b12      	ldrh	r2, [r2, #24]
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b292      	uxth	r2, r2
 8001f24:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f36:	8b12      	ldrh	r2, [r2, #24]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	b292      	uxth	r2, r2
 8001f3e:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8001f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f50:	8b12      	ldrh	r2, [r2, #24]
 8001f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f56:	b292      	uxth	r2, r2
 8001f58:	831a      	strh	r2, [r3, #24]
			break;
 8001f5a:	e113      	b.n	8002184 <seg7_update+0x1284>
		case 3: //digit 3
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8001f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f6c:	8b12      	ldrh	r2, [r2, #24]
 8001f6e:	f042 0204 	orr.w	r2, r2, #4
 8001f72:	b292      	uxth	r2, r2
 8001f74:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001f86:	8b12      	ldrh	r2, [r2, #24]
 8001f88:	f042 0202 	orr.w	r2, r2, #2
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 4); //set DIGIT3 anode (PC4) low
 8001f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fa0:	8b52      	ldrh	r2, [r2, #26]
 8001fa2:	f042 0210 	orr.w	r2, r2, #16
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fba:	8b12      	ldrh	r2, [r2, #24]
 8001fbc:	f042 0202 	orr.w	r2, r2, #2
 8001fc0:	b292      	uxth	r2, r2
 8001fc2:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 8001fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fd4:	8b12      	ldrh	r2, [r2, #24]
 8001fd6:	f042 0220 	orr.w	r2, r2, #32
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8001fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fee:	8b12      	ldrh	r2, [r2, #24]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8001ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002004:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002008:	8b12      	ldrh	r2, [r2, #24]
 800200a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200e:	b292      	uxth	r2, r2
 8002010:	831a      	strh	r2, [r3, #24]
			break;
 8002012:	e0b7      	b.n	8002184 <seg7_update+0x1284>
		case 4: //digit 4
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 8002014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800201c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002020:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002024:	8b12      	ldrh	r2, [r2, #24]
 8002026:	f042 0204 	orr.w	r2, r2, #4
 800202a:	b292      	uxth	r2, r2
 800202c:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800203e:	8b12      	ldrh	r2, [r2, #24]
 8002040:	f042 0202 	orr.w	r2, r2, #2
 8002044:	b292      	uxth	r2, r2
 8002046:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8002048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800204c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002054:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002058:	8b12      	ldrh	r2, [r2, #24]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	b292      	uxth	r2, r2
 8002060:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRH |= (1ul << 1); //set DIGIT4 anode (PB1) low
 8002062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002066:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800206a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002072:	8b52      	ldrh	r2, [r2, #26]
 8002074:	f042 0202 	orr.w	r2, r2, #2
 8002078:	b292      	uxth	r2, r2
 800207a:	835a      	strh	r2, [r3, #26]
			GPIOC->BSRRL |= (1ul << 5); //set COLON  anode (PC5) high
 800207c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002080:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002088:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800208c:	8b12      	ldrh	r2, [r2, #24]
 800208e:	f042 0220 	orr.w	r2, r2, #32
 8002092:	b292      	uxth	r2, r2
 8002094:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 8002096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020a6:	8b12      	ldrh	r2, [r2, #24]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	b292      	uxth	r2, r2
 80020ae:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 80020b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020c0:	8b12      	ldrh	r2, [r2, #24]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c6:	b292      	uxth	r2, r2
 80020c8:	831a      	strh	r2, [r3, #24]
			break;
 80020ca:	e05b      	b.n	8002184 <seg7_update+0x1284>
		case 5: //colon_degree
			GPIOC->BSRRL |= (1ul << 2); //set DIGIT1 anode (PC2) high
 80020cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020dc:	8b12      	ldrh	r2, [r2, #24]
 80020de:	f042 0204 	orr.w	r2, r2, #4
 80020e2:	b292      	uxth	r2, r2
 80020e4:	831a      	strh	r2, [r3, #24]
			GPIOA->BSRRL |= (1ul << 1); //set DIGIT2 anode (PA1) high
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020f6:	8b12      	ldrh	r2, [r2, #24]
 80020f8:	f042 0202 	orr.w	r2, r2, #2
 80020fc:	b292      	uxth	r2, r2
 80020fe:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRL |= (1ul << 4); //set DIGIT3 anode (PC4) high
 8002100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002104:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002110:	8b12      	ldrh	r2, [r2, #24]
 8002112:	f042 0210 	orr.w	r2, r2, #16
 8002116:	b292      	uxth	r2, r2
 8002118:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 1); //set DIGIT4 anode (PB1) high
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002126:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800212a:	8b12      	ldrh	r2, [r2, #24]
 800212c:	f042 0202 	orr.w	r2, r2, #2
 8002130:	b292      	uxth	r2, r2
 8002132:	831a      	strh	r2, [r3, #24]
			GPIOC->BSRRH |= (1ul << 5); //set COLON  anode (PC5) low
 8002134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002138:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800213c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002140:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002144:	8b52      	ldrh	r2, [r2, #26]
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	b292      	uxth	r2, r2
 800214c:	835a      	strh	r2, [r3, #26]
			GPIOB->BSRRL |= (1ul << 0); //set  AN_G  anode (PB0) high
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800215e:	8b12      	ldrh	r2, [r2, #24]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	b292      	uxth	r2, r2
 8002166:	831a      	strh	r2, [r3, #24]
			GPIOB->BSRRL |= (1ul << 11); //set AN_R   anode (PB11) high	
 8002168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002174:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002178:	8b12      	ldrh	r2, [r2, #24]
 800217a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217e:	b292      	uxth	r2, r2
 8002180:	831a      	strh	r2, [r3, #24]
			break;
 8002182:	bf00      	nop
}
	//clock anode driver
	GPIOC->BSRRH |= (1ul << 11); //set AN_CLK (PC11) low
 8002184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800218c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002190:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002194:	8b52      	ldrh	r2, [r2, #26]
 8002196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219a:	b292      	uxth	r2, r2
 800219c:	835a      	strh	r2, [r3, #26]
	GPIOC->BSRRL |= (1ul << 11); //set AN_CLK (PC11) high
 800219e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021ae:	8b12      	ldrh	r2, [r2, #24]
 80021b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b4:	b292      	uxth	r2, r2
 80021b6:	831a      	strh	r2, [r3, #24]

	//enable anode driver
	GPIOB->BSRRH |= (1ul << 4); //set AN_EN (PB4) low b/c active low
 80021b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021c8:	8b52      	ldrh	r2, [r2, #26]
 80021ca:	f042 0210 	orr.w	r2, r2, #16
 80021ce:	b292      	uxth	r2, r2
 80021d0:	835a      	strh	r2, [r3, #26]
	
	//enable cathode driver
	GPIOC->BSRRH |= (1ul << 1); //set CA_EN (PC1) low b/c active low
 80021d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021e2:	8b52      	ldrh	r2, [r2, #26]
 80021e4:	f042 0202 	orr.w	r2, r2, #2
 80021e8:	b292      	uxth	r2, r2
 80021ea:	835a      	strh	r2, [r3, #26]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	f107 070c 	add.w	r7, r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <bin2bcd>:


/*----------------------------------------------------------------------------
  Binary to BCD function
 *----------------------------------------------------------------------------*/
void bin2bcd (uint16_t binary) {
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
	uint8_t thousands = 0, hundreds = 0, tens = 0, ones = 0;
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	73bb      	strb	r3, [r7, #14]
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	737b      	strb	r3, [r7, #13]
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	733b      	strb	r3, [r7, #12]
	
	int i;
	for (i=15; i>=0; i--) {
 800221a:	f04f 030f 	mov.w	r3, #15
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e064      	b.n	80022ec <bin2bcd+0xf4>
		//add 3 to columns >= 5
		if (thousands >= 5)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d903      	bls.n	8002230 <bin2bcd+0x38>
				thousands += 3;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	f103 0303 	add.w	r3, r3, #3
 800222e:	73fb      	strb	r3, [r7, #15]
		if (hundreds >= 5)
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d903      	bls.n	800223e <bin2bcd+0x46>
				hundreds += 3;
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	f103 0303 	add.w	r3, r3, #3
 800223c:	73bb      	strb	r3, [r7, #14]
		if (tens >= 5)
 800223e:	7b7b      	ldrb	r3, [r7, #13]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d903      	bls.n	800224c <bin2bcd+0x54>
				tens += 3;
 8002244:	7b7b      	ldrb	r3, [r7, #13]
 8002246:	f103 0303 	add.w	r3, r3, #3
 800224a:	737b      	strb	r3, [r7, #13]
		if (ones >= 5)
 800224c:	7b3b      	ldrb	r3, [r7, #12]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d903      	bls.n	800225a <bin2bcd+0x62>
				ones += 3;
 8002252:	7b3b      	ldrb	r3, [r7, #12]
 8002254:	f103 0303 	add.w	r3, r3, #3
 8002258:	733b      	strb	r3, [r7, #12]
		
		//shift left one
		thousands << 1;
		thousands += (hundreds & 0x08) >> 3; //thousands[0] = hundreds[3]
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	ea4f 03e3 	mov.w	r3, r3, asr #3
 8002264:	b2da      	uxtb	r2, r3
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	18d3      	adds	r3, r2, r3
 800226a:	73fb      	strb	r3, [r7, #15]
		hundreds = hundreds << 1;
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002272:	73bb      	strb	r3, [r7, #14]
		hundreds += (tens & 0x08) >> 3; //hundreds[0] = tens[3]
 8002274:	7b7b      	ldrb	r3, [r7, #13]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	ea4f 03e3 	mov.w	r3, r3, asr #3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	7bbb      	ldrb	r3, [r7, #14]
 8002282:	18d3      	adds	r3, r2, r3
 8002284:	73bb      	strb	r3, [r7, #14]
		tens = tens << 1;
 8002286:	7b7b      	ldrb	r3, [r7, #13]
 8002288:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800228c:	737b      	strb	r3, [r7, #13]
		tens += (ones & 0x08) >> 3; //tens[0] = ones[3]
 800228e:	7b3b      	ldrb	r3, [r7, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	ea4f 03e3 	mov.w	r3, r3, asr #3
 8002298:	b2da      	uxtb	r2, r3
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	737b      	strb	r3, [r7, #13]
		ones = ones << 1;
 80022a0:	7b3b      	ldrb	r3, [r7, #12]
 80022a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80022a6:	733b      	strb	r3, [r7, #12]
		ones += (binary & (1ul << i)) >> i; //ones[0] = binary[i]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	f04f 0101 	mov.w	r1, #1
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	401a      	ands	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	7b3b      	ldrb	r3, [r7, #12]
 80022c0:	18d3      	adds	r3, r2, r3
 80022c2:	733b      	strb	r3, [r7, #12]
	
		//pretend data type is a nibble
		thousands &= 0x0F;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	73fb      	strb	r3, [r7, #15]
		hundreds &= 0x0F;
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	73bb      	strb	r3, [r7, #14]
		tens &= 0x0F;
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	737b      	strb	r3, [r7, #13]
		ones &= 0x0F;
 80022dc:	7b3b      	ldrb	r3, [r7, #12]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	733b      	strb	r3, [r7, #12]
 *----------------------------------------------------------------------------*/
void bin2bcd (uint16_t binary) {
	uint8_t thousands = 0, hundreds = 0, tens = 0, ones = 0;
	
	int i;
	for (i=15; i>=0; i--) {
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da97      	bge.n	8002222 <bin2bcd+0x2a>
		thousands &= 0x0F;
		hundreds &= 0x0F;
		tens &= 0x0F;
		ones &= 0x0F;
	}	
}
 80022f2:	f107 0714 	add.w	r7, r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <main>:
void bin2bcd_asm (uint16_t binary);

/*----------------------------------------------------------------------------
  MAIN function
 *----------------------------------------------------------------------------*/
int main (void) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
	uint16_t binary=1096;
 8002302:	f44f 6389 	mov.w	r3, #1096	; 0x448
 8002306:	817b      	strh	r3, [r7, #10]
	//bin2bcd(binary);
	bin2bcd_asm(binary);
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fd fef9 	bl	8000102 <bin2bcd_asm>
	//int num_int;
	
	//sub_uchar_from_quad_example();
	//num_int = atoi(num_char); //assum number between 0-9
	
  int32_t num = -1; 
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	617b      	str	r3, [r7, #20]
  int32_t dir =  1;
 8002316:	f04f 0301 	mov.w	r3, #1
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t btns = 0;
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
	
	
	//asmLDR_examples();
	//asmSTR_examples();
 
  SystemCoreClock = 168000000; 	//!!found in system_stm32f4xx.c, added here instead of as global
 8002322:	f240 2350 	movw	r3, #592	; 0x250
 8002326:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800232a:	f44f 42f4 	mov.w	r2, #31232	; 0x7a00
 800232e:	f6c0 2203 	movt	r2, #2563	; 0xa03
 8002332:	601a      	str	r2, [r3, #0]
							   //becaus we're trying to avoid need to have crt0.o

 
 
  SystemCoreClockUpdate();                      /* Get Core Clock Frequency   */
 8002334:	f7fe fb7e 	bl	8000a34 <SystemCoreClockUpdate>
  if (SysTick_Config(SystemCoreClock / 1000)) { /* SysTick 1 msec interrupts  */
 8002338:	f240 2350 	movw	r3, #592	; 0x250
 800233c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8002346:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800234a:	fba3 1302 	umull	r1, r3, r3, r2
 800234e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fc36 	bl	8000bc4 <SysTick_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d000      	beq.n	8002360 <main+0x64>
    while (1);                                  /* Capture error              */
 800235e:	e7fe      	b.n	800235e <main+0x62>
  }
	SEG7_Init();
 8002360:	f7fe f852 	bl	8000408 <SEG7_Init>
  LED_Init();
 8002364:	f7fe faa6 	bl	80008b4 <LED_Init>
  BTN_Init();    	
 8002368:	f7fe fc8c 	bl	8000c84 <BTN_Init>
  int toggle=0;
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
	
  while(1) {                                    // Loop forever 
		btns = BTN_Get();                           // Read button states       
 8002372:	f7fe fcc9 	bl	8000d08 <BTN_Get>
 8002376:	6078      	str	r0, [r7, #4]

    if (btns != (1UL << 0)) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d03f      	beq.n	80023fe <main+0x102>
      // Calculate 'num': 0,1,...,LED_NUM-1,LED_NUM-1,...,1,0,0,...
      num += dir;
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	18d3      	adds	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
      if (num == LED_NUM) { dir = -1; num =  LED_NUM-1; } 
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d106      	bne.n	800239a <main+0x9e>
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	f04f 0303 	mov.w	r3, #3
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e008      	b.n	80023ac <main+0xb0>
      else if   (num < 0) { dir =  1; num =  0;         }
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da05      	bge.n	80023ac <main+0xb0>
 80023a0:	f04f 0301 	mov.w	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

			if (toggle==0) {  	//LED and Delay in Assembly
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d111      	bne.n	80023d6 <main+0xda>
				asmLED_ON (num);
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7fd fef9 	bl	80001aa <asmLED_ON>
				MyasmDelay(50);
 80023b8:	f04f 0032 	mov.w	r0, #50	; 0x32
 80023bc:	f7fd fee9 	bl	8000192 <MyasmDelay>
				asmLED_OFF(num);
 80023c0:	6978      	ldr	r0, [r7, #20]
 80023c2:	f7fd fefe 	bl	80001c2 <asmLED_OFF>
				MyasmDelay(100);
 80023c6:	f04f 0064 	mov.w	r0, #100	; 0x64
 80023ca:	f7fd fee2 	bl	8000192 <MyasmDelay>
				toggle=1;
 80023ce:	f04f 0301 	mov.w	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
    else {
      LED_Out (0x0F);
      Delay(10);                                // Delay 10ms
    }

  }
 80023d4:	e7cd      	b.n	8002372 <main+0x76>
				asmLED_OFF(num);
				MyasmDelay(100);
				toggle=1;
			}
			else {							//LED and Delay in C
				LED_On (num);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fad1 	bl	8000980 <LED_On>
				Delay(50);
 80023de:	f04f 0032 	mov.w	r0, #50	; 0x32
 80023e2:	f7fe fc33 	bl	8000c4c <Delay>
				LED_Off(num);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fae3 	bl	80009b4 <LED_Off>
				Delay(100);
 80023ee:	f04f 0064 	mov.w	r0, #100	; 0x64
 80023f2:	f7fe fc2b 	bl	8000c4c <Delay>
				toggle=0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
    else {
      LED_Out (0x0F);
      Delay(10);                                // Delay 10ms
    }

  }
 80023fc:	e7b9      	b.n	8002372 <main+0x76>
			}
			
			
    }
    else {
      LED_Out (0x0F);
 80023fe:	f04f 000f 	mov.w	r0, #15
 8002402:	f7fe faf1 	bl	80009e8 <LED_Out>
      Delay(10);                                // Delay 10ms
 8002406:	f04f 000a 	mov.w	r0, #10
 800240a:	f7fe fc1f 	bl	8000c4c <Delay>
    }

  }
 800240e:	e7b0      	b.n	8002372 <main+0x76>

08002410 <led_mask>:
 8002410:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
